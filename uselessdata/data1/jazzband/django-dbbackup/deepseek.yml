```yaml
name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        django-version: ['2.2', '3.0', 'master']
        include:
          - python-version: '3.9'
            tox-env: lint
          - python-version: '3.9'
            tox-env: docs
          - python-version: '3.9'
            tox-env: functional
          - python-version: '3.9'
            tox-env: functional-mongodb
        exclude:
          - python-version: '3.9'
            django-version: '2.2'
          - python-version: '3.9'
            django-version: '3.0'
          - python-version: '3.9'
            django-version: 'master'
        allow-failures:
          - python-version: '3.9'
            django-version: 'master'
          - python-version: '3.9'
            tox-env: functional-mongodb

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: --health-cmd="mongo --eval 'db.runCommand(\"ping\").ok'" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install virtualenv tox

      - name: Set up TOX_ENV
        run: |
          if [ -z "${{ matrix.tox-env }}" ]; then
            export TOX_ENV=py${{ matrix.python-version }}-django${{ matrix.django-version }}
          else
            export TOX_ENV=${{ matrix.tox-env }}
          fi

      - name: Run tox
        run: |
          tox -e $TOX_ENV --notest
          tox -e $TOX_ENV

      - name: Upload coverage
        if: matrix.tox-env != 'lint' && matrix.tox-env != 'docs'
        run: |
          tox -e $TOX_ENV -- pip install coveralls
          tox -e $TOX_ENV -- coveralls

      - name: Run functional tests
        if: matrix.tox-env == 'functional'
        run: |
          mysql -e 'CREATE DATABASE test;'
          psql -c 'CREATE DATABASE test;' -U postgres
          tox -e $TOX_ENV
          DB_ENGINE=django.db.backends.mysql DB_USER=root DB_HOST=localhost DB_NAME=test tox -e $TOX_ENV
          DB_ENGINE=django.db.backends.postgresql DB_USER=postgres DB_HOST=localhost DB_NAME=test tox -e $TOX_ENV
          CONNECTOR=dbbackup.db.postgresql.PgDumpBinaryConnector DB_ENGINE=django.db.backends.postgresql DB_USER=postgres DB_HOST=localhost DB_NAME=test tox -e $TOX_ENV

      - name: Run functional MongoDB tests
        if: matrix.tox-env == 'functional-mongodb'
        run: |
          DB_ENGINE=djongo DB_NAME=test tox -e $TOX_ENV
```