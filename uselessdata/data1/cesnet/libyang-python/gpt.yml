name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - devel
  pull_request:
    branches:
      - master
      - devel
  release:
    types: [published]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libffi-dev libpcre3-dev
        pip install tox twine

    - name: Run tox for linting
      run: tox -- $(git ls-files '*.py') -e lint
      env:
        TOXENV: lint

    - name: Run tox for testing
      run: tox -- $(git ls-files '*.py')
      env:
        TOXENV: py${{ matrix.python-version }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.release.tag_name != null

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libffi-dev libpcre3-dev
        pip install tox twine

    - name: Deploy to PyPI
      run: twine upload --skip-existing dist/libyang-*.tar.gz
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
