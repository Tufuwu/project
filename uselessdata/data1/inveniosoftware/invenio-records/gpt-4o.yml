```yaml
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        requirements: ['lowest', 'release', 'devel']
        extras: ['all,sqlite', 'all,mysql', 'all,postgresql']
    env:
      DOCKER_COMPOSE_VERSION: 1.26.2
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Docker Compose
      run: |
        sudo rm /usr/local/bin/docker-compose
        curl -L https://github.com/docker/compose/releases/download/${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-`uname -s`-`uname -m` > docker-compose
        chmod +x docker-compose
        sudo mv docker-compose /usr/local/bin

    - name: Upgrade pip and install dependencies
      run: |
        pip install --upgrade pip setuptools py
        pip install twine wheel coveralls requirements-builder
        requirements-builder -e ${{ matrix.extras }} --level=min setup.py > .github-lowest-requirements.txt
        requirements-builder -e ${{ matrix.extras }} --level=pypi setup.py > .github-release-requirements.txt
        requirements-builder -e ${{ matrix.extras }} --level=dev --req requirements-devel.txt setup.py > .github-devel-requirements.txt

    - name: Check Docker version
      run: |
        docker --version
        docker-compose --version

    - name: Install project dependencies
      run: |
        pip install -r .github-${{ matrix.requirements }}-requirements.txt
        pip install -e .[${{ matrix.extras }}]

    - name: Run tests
      run: ./run-tests.sh

    - name: Upload coverage to Coveralls
      if: success()
      run: coveralls

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref_type == 'tag'
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install --upgrade pip setuptools
        pip install twine

    - name: Build and publish to PyPI
      env:
        TWINE_USERNAME: inveniosoftware
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py compile_catalog sdist bdist_wheel
        twine upload --skip-existing dist/*
```