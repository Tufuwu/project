```yaml
name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            compiler: gcc
            gn_args: 'gcc_cc="gcc-6" gcc_cxx="g++-6" is_clang=false'
            packages: g++-6
          - os: ubuntu-latest
            compiler: gcc
            gn_args: 'gcc_cc="gcc-6" gcc_cxx="g++-6" is_clang=false is_debug=false'
            packages: g++-6
          - os: ubuntu-latest
            compiler: gcc
            gn_args: 'gcc_cc="gcc-6" gcc_cxx="g++-6" is_clang=false is_official_build=true'
            packages: g++-6
          - os: ubuntu-latest
            compiler: clang
            gn_args: 'clang_cc="clang-3.8" clang_cxx="clang++-3.8" is_clang=true'
            packages: clang-3.8
          - os: ubuntu-latest
            compiler: clang
            gn_args: 'clang_cc="clang-3.8" clang_cxx="clang++-3.8" is_clang=true is_debug=false'
            packages: clang-3.8
          - os: ubuntu-latest
            compiler: clang
            gn_args: 'clang_cc="clang-3.8" clang_cxx="clang++-3.8" is_clang=true is_official_build=true'
            packages: clang-3.8
          - os: macos-latest
            compiler: clang
            gn_args: 'is_clang=true is_official_build=true'
            packages: clang

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python '3.9'
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.packages }}

      - name: Install GN and Ninja
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            GN_URL="https://github.com/timniederhausen/gn/releases/download/2020.03/gn-linux-amd64.tar.gz"
            NINJA_ZIP="https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip"
          else
            GN_URL="https://github.com/timniederhausen/gn/releases/download/2020.03/gn-macos-amd64.tar.gz"
            NINJA_ZIP="https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-mac.zip"
          fi

          wget --no-check-certificate --quiet -O ninja.zip $NINJA_ZIP
          python -c 'import sys,zipfile;zipfile.ZipFile(sys.argv[1]).extractall()' ninja.zip
          chmod +x ninja

          wget --no-check-certificate --quiet -O gn.tgz $GN_URL
          tar xvf gn.tgz
          chmod +x gn

      - name: Run gn_helpers unittests
        run: python3 gn_helpers_unittest.py

      - name: Setup test project
        run: |
          git clone --branch=testsrc --depth=1 https://github.com/timniederhausen/gn-build.git testsrc
          mkdir testsrc/build
          mv config testsrc/build/
          mv toolchain testsrc/build/
          echo script_executable = \"python3\" >> testsrc/.gn

      - name: Build test project
        run: |
          ./gn gen out --args="${{ matrix.gn_args }}" --root=testsrc
          cat out/args.gn
          ./ninja -C out
          cd out && ./hello
```