```yaml
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            compiler: gcc
            gn_args: 'gcc_cc="gcc-6" gcc_cxx="g++-6" is_clang=false'
          - os: ubuntu-latest
            compiler: gcc
            gn_args: 'gcc_cc="gcc-6" gcc_cxx="g++-6" is_clang=false is_debug=false'
          - os: ubuntu-latest
            compiler: gcc
            gn_args: 'gcc_cc="gcc-6" gcc_cxx="g++-6" is_clang=false is_official_build=true'
          - os: ubuntu-latest
            compiler: clang
            gn_args: 'clang_cc="clang-3.8" clang_cxx="clang++-3.8" is_clang=true'
          - os: ubuntu-latest
            compiler: clang
            gn_args: 'clang_cc="clang-3.8" clang_cxx="clang++-3.8" is_clang=true is_debug=false'
          - os: ubuntu-latest
            compiler: clang
            gn_args: 'clang_cc="clang-3.8" clang_cxx="clang++-3.8" is_clang=true is_official_build=true'
          - os: macos-latest
            compiler: clang
            gn_args: 'is_clang=true is_official_build=true'

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" == "gcc" ]; then
          sudo apt-get install -y g++-6
        elif [ "${{ matrix.compiler }}" == "clang" ]; then
          sudo apt-get install -y clang-3.8
        fi

    - name: Set environment variables
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          echo "GN_URL=${{ secrets.GN_LNX64_URL }}" >> $GITHUB_ENV
          echo "NINJA_ZIP=${{ secrets.NINJA_LNX_ZIP }}" >> $GITHUB_ENV
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          echo "GN_URL=${{ secrets.GN_MAC_URL }}" >> $GITHUB_ENV
          echo "NINJA_ZIP=${{ secrets.NINJA_MAC_ZIP }}" >> $GITHUB_ENV
        fi

    - name: Download and install Ninja
      run: |
        wget --no-check-certificate --quiet -O ninja.zip $NINJA_ZIP
        python3 -c 'import sys,zipfile;zipfile.ZipFile(sys.argv[1]).extractall()' ninja.zip
        chmod +x ninja

    - name: Download and install GN
      run: |
        wget --no-check-certificate --quiet -O gn.tgz $GN_URL
        tar xvf gn.tgz
        chmod +x gn

    - name: Run tests
      run: |
        python3 gn_helpers_unittest.py

    - name: Setup and build test project
      run: |
        git clone --branch=testsrc --depth=1 https://github.com/timniederhausen/gn-build.git testsrc
        mkdir testsrc/build
        mv config testsrc/build/
        mv toolchain testsrc/build/
        echo script_executable = \"python3\" >> testsrc/.gn
        ./gn gen out --args="${{ matrix.gn_args }}" --root=testsrc
        cat out/args.gn
        ./ninja -C out
        cd out && ./hello
```