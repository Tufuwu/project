```yaml
name: CI

on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10']
        gromacs-version: [4.6.5, 2018.6, 2019.1]
        include:
          - os: macos-latest
            python-version: '3.9'
            gromacs-version: 4.6.5
          - os: macos-latest
            python-version: '3.9'
            gromacs-version: 2019.1
          - os: macos-latest
            python-version: '3.10'
            gromacs-version: 2019.1

    env:
      PYTEST_FLAGS: "-v --disable-pytest-warnings --durations=20 --low-performance --cov=gromacs"
      PYTEST_LIST: "tests"
      MAIN_CMD: "pytest ${PYTEST_LIST}"
      SETUP_CMD: "${PYTEST_FLAGS}"
      BUILD_CMD: "pip install -v ."
      CONDA_DEPENDENCIES: "six scipy matplotlib pandas gromacs"
      CONDA_CHANNELS: "defaults conda-forge bioconda"
      CONDA_CHANNEL_PRIORITY: "True"
      PIP_DEPENDENCIES: "numkit codecov"
      NUMPY_VERSION: "stable"
      MPLBACKEND: "agg"

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenmpi-dev

      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          channels: ${{ env.CONDA_CHANNELS }}
          channel-priority: ${{ env.CONDA_CHANNEL_PRIORITY }}
          activate-environment: test-env

      - name: Install dependencies
        run: |
          conda install -y ${{ env.CONDA_DEPENDENCIES }} gromacs=${{ matrix.gromacs-version }}
          pip install ${{ env.PIP_DEPENDENCIES }}

      - name: Build package
        run: ${{ env.BUILD_CMD }}

      - name: Run tests
        run: |
          if [[ $RUNNER_OS == 'macOS' ]]; then ulimit -S -n 2048; fi
          echo ${{ env.MAIN_CMD }} ${{ env.SETUP_CMD }}
          eval ${{ env.MAIN_CMD }} ${{ env.SETUP_CMD }}

      - name: Upload coverage to Codecov
        if: ${{ env.CODECOV == 'true' }}
        run: codecov
```