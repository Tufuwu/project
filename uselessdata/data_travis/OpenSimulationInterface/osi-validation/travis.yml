# Use distribution Ubuntu 18.04 Bionic
dist: bionic

# Use python build environment.
language: python

python:
    - "3.6"

# Handle dependencies in separate directory.
before_install:
    - DEPS_DIR="${HOME}/deps"
    - mkdir -p "${DEPS_DIR}"
    - cd "${DEPS_DIR}"

# Install necessary packages.
install:
    # Install a recent version of the Protobuf
    - |
        PROTOBUF_URL="https://github.com/google/protobuf/releases/download/v3.2.0/protobuf-python-3.2.0.tar.gz"
        if [ ! -f ${DEPS_DIR}/protobuf/install/bin/protoc ] ; then mkdir -p protobuf ; travis_retry wget --no-check-certificate --quiet -O - ${PROTOBUF_URL} | tar --strip-components=1 -xz -C protobuf ; cd protobuf ; ./configure --prefix=${DEPS_DIR}/protobuf/install ; make ; make install ; fi
        export PATH=${DEPS_DIR}/protobuf/install/bin:${PATH}

    - sudo apt-get install python3-pip protobuf-compiler

# Change directory back to default build directory.
before_script:
    - cd "${TRAVIS_BUILD_DIR}"

# Run the build script
script:
    # Debug
    - which python
    - python -m site
    - protoc --version

    # Install black code formatter and check if it is applied
    - pip install black
    - black --check --exclude "(open-simulation-interface|proto2cpp)" .

    # Install vulture and search for dead code with 100% confidence
    - pip install vulture
    - vulture *.py tests/ osivalidator/ --min-confidence 100

    # Install osi-validation
    - cd open-simulation-interface
    - pip install .
    - cd ..
    - pip install .

    # Generate parsed rules
    - python rules2yml.py -d rules

    # Show validator usage
    - osivalidator -h

    # Check rule correctness with unittests
    - python -m unittest discover tests

    # Convert decompress small_test.txt and convert to small_test.osi
    - lzma -d data/small_test.txt.lzma
    - python open-simulation-interface/format/txt2osi.py -d data/small_test.txt

    # Run the validator on decompressed data
    - osivalidator data/small_test.osi
    - osivalidator data/small_test.osi -p
    - osivalidator data/small_test.txt
    - osivalidator data/small_test.txt -p

    # Run the validator on decompressed data with parsed rules
    - osivalidator data/small_test.osi -r rules
    - osivalidator data/small_test.osi -p -r rules
    - osivalidator data/small_test.txt -r rules
    - osivalidator data/small_test.txt -p -r rules

    # Compress *.osi and *.txt with lzma
    - lzma -z data/small_test.txt
    - lzma -z data/small_test.osi

    # Run validator on a small test with already existing rules
    - osivalidator data/small_test.osi.lzma
    - osivalidator data/small_test.osi.lzma -p
    - osivalidator data/small_test.txt.lzma
    - osivalidator data/small_test.txt.lzma -p

    # Run validator on a small test with parsed rules
    - osivalidator data/small_test.osi.lzma -r rules
    - osivalidator data/small_test.osi.lzma -p -r rules
    - osivalidator data/small_test.txt.lzma -r rules
    - osivalidator data/small_test.txt.lzma -p -r rules