```yaml
name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest
    if: "!contains(github.ref, 'cache')"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install pyctdev
          doit miniconda_install
          export PATH="$HOME/miniconda/bin:$PATH" && hash -r
          doit ecosystem_setup
          doit env_create
          source activate pyviz
          doit env_capture
      - name: Run tests
        run: |
          if ! [ $(ls -A ./notebooks/**/*.ipynb) ]; then
            echo 'No notebooks found' && exit 0;
          fi;
          doit test_all

  build_cache:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'website_dev') || github.ref == 'refs/heads/master'
    strategy:
      matrix:
        badge: [pypi_downloads, stars, contributors, license, conda_downloads]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install pyctdev
          doit miniconda_install
          export PATH="$HOME/miniconda/bin:$PATH" && hash -r
          doit ecosystem_setup
          doit env_create
          source activate pyviz
          doit env_capture
      - name: Build cache
        run: |
          if [ "${{ matrix.badge }}" == "conda_downloads" ]; then
            conda install -c conda-forge colorcet fastparquet intake intake-parquet "s3fs>=0.5.1" python-snappy
            python tools/conda_downloads.py
          else
            python tools/build_cache.py
          fi
      - name: Push cache
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          mv ./doc/_static/cache ./tmp
          git fetch origin cache:refs/remotes/cache
          git checkout cache
          mv ./tmp/* ./doc/_static/cache
          git add -f ./doc/_static/cache
          git commit -m "adding cached badge of ${{ matrix.badge }}"
          git push -f origin HEAD:cache

  website_release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install pyctdev
          doit miniconda_install
          export PATH="$HOME/miniconda/bin:$PATH" && hash -r
          doit ecosystem_setup
          doit env_create
          source activate pyviz
          doit env_capture
      - name: Prepare for deployment
        run: |
          git checkout -b deploy-${{ github.ref_name }}
          git fetch origin cache:refs/remotes/cache
          git checkout cache -- ./doc/_static/cache
      - name: Build website
        run: doit build_website
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./builtdocs
          cname: pyviz.org

  website_dev:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'website_dev') || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install pyctdev
          doit miniconda_install
          export PATH="$HOME/miniconda/bin:$PATH" && hash -r
          doit ecosystem_setup
          doit env_create
          source activate pyviz
          doit env_capture
      - name: Prepare for deployment
        run: |
          git checkout -b deploy-${{ github.ref_name }}
          git fetch origin cache:refs/remotes/cache
          git checkout cache -- ./doc/_static/cache
      - name: Build website
        run: doit build_website
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./builtdocs
          repo: pyviz-dev/website
```