```yaml
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
        check-type: [install, style, test]
        install-type: [pip, sdist, wheel]
        install-depends: [pip setuptools, "pip==19.0.2 setuptools==40.8.0"]
      exclude:
        - python-version: 3.7
          check-type: style

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip virtualenv
        virtualenv --python=python /tmp/venv
        source /tmp/venv/bin/activate
        python -m pip install --upgrade ${{ matrix.install-depends }}
        if [ "${{ matrix.install-type }}" == "pip" ]; then
            PACKAGE="."
        elif [ "${{ matrix.install-type }}" == "sdist" ]; then
            python setup.py sdist
            PACKAGE="$( ls dist/*.tar.gz )"
        elif [ "${{ matrix.install-type }}" == "wheel" ]; then
            python setup.py bdist_wheel
            PACKAGE="$( ls dist/*.whl )"
        fi
        python -m pip install $PACKAGE
        INTENDED_VERSION="$(python -c 'import versioneer; print(versioneer.get_version())')"
        pushd /tmp
        INSTALLED_VERSION="$(python -c 'import niworkflows; print(niworkflows.__version__)')"
        echo "Intended: $INTENDED_VERSION"
        echo "Installed: $INSTALLED_VERSION"
        test "$INTENDED_VERSION" == "$INSTALLED_VERSION"
        popd
        if [ "${{ matrix.check-type }}" = "install" ]; then exit 0; fi

    - name: Install check dependencies
      run: |
        python -m pip install "niworkflows[${{ matrix.check-type }}]"
        if [ "${{ matrix.check-type }}" == "test" ]; then
            mkdir -p $HOME/.cache/stanford-crn
            curl -sSL  "http://github.com/chrisfilo/BIDS-examples-1/archive/enh/ds054.tar.gz" |
                tar xvzf - -C $HOME/.cache/stanford-crn
            curl -sSL "https://files.osf.io/v1/resources/fvuh8/providers/osfstorage/57f328f6b83f6901ef94cf70" |
                tar xvzf - -C $HOME/.cache/stanford-crn
        fi

    - name: Run tests
      run: |
        if [ "${{ matrix.check-type }}" == "style" ]; then
          flake8 niworkflows
        elif [ "${{ matrix.check-type }}" == "test" ]; then
          pytest -n 2 -v --cov niworkflows --cov-report xml:cov.xml \
                 --ignore=niworkflows/interfaces/ants.py niworkflows
        else
          false

    - name: Upload coverage to Codecov
      if: matrix.check-type == 'test'
      run: |
        python -m pip install codecov
        python -m codecov --flags github --file cov.xml -e ${{ github.run_id }}
```