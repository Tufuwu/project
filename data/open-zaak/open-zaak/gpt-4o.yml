```yaml
name: CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up PostgreSQL
        uses: harmon758/postgresql-action@v1.0.0
        with:
          postgresql version: '10'
          postgresql db: 'postgres'
          postgresql user: 'postgres'
          postgresql password: ''

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdal-dev gdal-bin
          gdal-config --version
          pip install -r requirements/ci.txt
          pip install codecov
          npm ci
          npm run build

      - name: Create PostGIS extension
        run: |
          psql -U postgres -c "create extension postgis"

  unit_tests:
    runs-on: ubuntu-18.04
    needs: setup
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Unit tests
        run: |
          docker-compose -f docker-compose.travis-cmis.yml up -d
          python src/manage.py collectstatic --noinput --link
          export CMIS_BINDING=BROWSER
          coverage run src/manage.py test src
        env:
          DJANGO_SETTINGS_MODULE: openzaak.conf.ci
          DB_PASSWORD: ''
          DB_USER: postgres
          ALLOWED_HOSTS: openzaak.nl

      - name: Teardown
        if: always()
        run: |
          docker-compose -f docker-compose.travis-cmis.yml down -v --rmi all --remove-orphans

  unit_tests_cmis:
    runs-on: ubuntu-18.04
    needs: setup
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Unit tests CMIS web service (SOAP)
        run: |
          docker-compose -f docker-compose.travis-cmis.yml up -d
          docker ps -q | xargs docker stats --no-stream
          python src/manage.py collectstatic --noinput --link
          export CMIS_BINDING=WEBSERVICE
          coverage run src/manage.py test src --tag=cmis
        env:
          DJANGO_SETTINGS_MODULE: openzaak.conf.ci
          DB_PASSWORD: ''
          DB_USER: postgres
          ALLOWED_HOSTS: openzaak.nl

      - name: Teardown
        if: always()
        run: |
          docker-compose -f docker-compose.travis-cmis.yml down -v --rmi all --remove-orphans

      - name: After failure
        if: failure()
        run: |
          docker ps -a
          docker-compose -f docker-compose.travis-cmis.yml logs alfresco

  documentation_build:
    runs-on: ubuntu-18.04
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: pip install pytest -r requirements/dev.txt

      - name: Build Documentation
        run: cd docs && pytest check_sphinx.py -v --tb=auto

  docker_image_build:
    runs-on: ubuntu-18.04
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build .

  zgw_api_tests:
    runs-on: ubuntu-18.04
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 8

      - name: Install Newman
        run: npm install newman

      - name: Run ZGW API tests
        run: |
          docker-compose -f docker-compose.travis.yml up -d
          bin/postman_tests.sh

      - name: Teardown
        if: always()
        run: |
          docker-compose -f docker-compose.travis.yml stop
          docker-compose -f docker-compose.travis.yml rm -f

  docker_image_publication:
    runs-on: ubuntu-18.04
    if: github.event_name == 'push' && github.repository_owner == github.actor
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Publish Docker image
        run: |
          echo "trigger deploy?"
          bin/docker_push.sh latest
        if: github.ref == 'refs/heads/master'

      - name: Publish Docker image with tag
        run: bin/docker_push.sh ${{ github.ref_name }}
        if: startsWith(github.ref, 'refs/tags/')

  after_success:
    runs-on: ubuntu-18.04
    needs: [unit_tests, unit_tests_cmis]
    steps:
      - name: Upload coverage to Codecov
        run: codecov
```