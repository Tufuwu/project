```yaml
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.8]
        job: [UNITTEST, DOCS, LINT]
    env:
      FULL_DEPS: ${{ matrix.python-version == '3.6' || matrix.job != 'LINT' }}
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Miniconda
      shell: bash
      run: |
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        bash miniconda.sh -b -p $HOME/miniconda
        echo "$HOME/miniconda/bin" >> $GITHUB_PATH
        conda config --set always_yes yes --set changeps1 no
        conda update -q conda
        conda info -a

    - name: Create conda environment
      shell: bash
      run: |
        conda create -q -n plotnine-test python=${{ matrix.python-version }}
        source activate plotnine-test
        if [ "${{ env.FULL_DEPS }}" = "true" ]; then
          conda install scipy pandas statsmodels scikit-learn
          export MPLLOCALFREETYPE=1
          pip install matplotlib --no-binary matplotlib
          pip install scikit-misc
          pip install geopandas
          pip install adjustText
          pip install -e .
        fi
        if [ "${{ matrix.job }}" == "UNITTEST" ]; then
          conda install pytest-cov
          conda install -c conda-forge "pyshp>=2.0.0"
          pip install coveralls
        elif [ "${{ matrix.job }}" == "DOCS" ]; then
          pip install -r requirements/doc.txt
        elif [ "${{ matrix.job }}" == "LINT" ]; then
          pip install flake8
        fi
        conda list
        pip list
        echo "MATPLOTLIB_BACKEND=agg" >> $GITHUB_ENV

    - name: Run tests
      shell: bash
      run: |
        source activate plotnine-test
        if [ "${{ matrix.job }}" == "UNITTEST" ]; then
          coverage erase
          make test
        elif [ "${{ matrix.job }}" == "DOCS" ]; then
          pushd doc
          make html && popd
        elif [ "${{ matrix.job }}" == "LINT" ]; then
          make lint
        fi

    - name: Upload coverage to Coveralls
      if: matrix.job == 'UNITTEST'
      shell: bash
      run: |
        source activate plotnine-test
        coveralls --rcfile=.coveragerc

    - name: Show Sphinx error logs
      if: failure() && matrix.job == 'DOCS'
      shell: bash
      run: |
        cat /tmp/sphinx-err-*.log
```