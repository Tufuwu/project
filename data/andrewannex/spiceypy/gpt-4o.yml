```yaml
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        include:
          - os: ubuntu-latest
            python-version: 3.8
            env: CSPICE_SRC_DIR="/tmp/cspice"
          - os: ubuntu-latest
            python-version: 3.8
            env: CSPICE_SHARED_LIB="/tmp/cspice/lib/libcspice.so"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install pyenv
            pyenv install --skip-existing ${{ matrix.python-version }}
            pyenv global ${{ matrix.python-version }}
          fi
          python -m pip install --upgrade pip
          pip install -U wheel
          pip install twine
          pip install -r requirements.txt
          if [ ! -z "${{ matrix.env.CSPICE_SRC_DIR }}" ]; then
            wget -O - https://naif.jpl.nasa.gov/pub/naif/toolkit/C/PC_Linux_GCC_64bit/packages/cspice.tar.Z | gunzip -c | tar xC /tmp/
          fi
          if [ ! -z "${{ matrix.env.CSPICE_SHARED_LIB }}" ]; then
            mkdir -p /tmp/cspice/ && wget -O - https://anaconda.org/conda-forge/cspice/66/download/linux-64/cspice-66-h516909a_1009.tar.bz2 | tar xjC /tmp/cspice/
          fi

      - name: Install package
        run: python setup.py install

      - name: Run tests
        run: coverage run --source spiceypy -m pytest --pyargs spiceypy

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, 'release')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U wheel
          pip install twine
          pip install -r requirements.txt

      - name: Build and publish
        env:
          TWINE_USERNAME: andrewannex
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
```