```yaml
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-20.04
    services:
      memcached:
        image: memcached:latest
        ports:
          - 11211:11211
      redis:
        image: redis:latest
        ports:
          - 6379:6379
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      postgres:
        image: postgres:9.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgis
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: ['3.9', '3.10']

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-9.5-postgis-2.4 gdal-bin
        pip install tox-travis coverage coveralls codacy-coverage

    - name: Prepare databases
      run: |
        mysql -e 'create database django_prometheus_1;'
        psql -U postgres -c 'CREATE DATABASE postgis'
        psql -U postgres postgis -c 'CREATE EXTENSION IF NOT EXISTS postgis;'

    - name: Run tests
      run: tox

    - name: Coverage and Reporting
      if: success()
      run: |
        coverage combine .coverage django_prometheus/tests/end2end/.coverage
        coveralls
        coverage xml
        python-codacy-coverage -r coverage.xml

    - name: Prepare for deployment
      if: github.ref == 'refs/heads/master'
      run: |
        git fetch --unshallow
        python update_version_from_git.py

    - name: Deploy to PyPI
      if: github.ref == 'refs/heads/master'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_TOKEN }}
```