```yaml
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            conda_version: latest
          - os: macos-latest
            conda_version: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Miniconda
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            curl https://repo.anaconda.com/miniconda/Miniconda3-${{ matrix.conda_version }}-MacOSX-x86_64.sh -o miniconda.sh;
          else
            curl https://repo.anaconda.com/miniconda/Miniconda3-${{ matrix.conda_version }}-Linux-x86_64.sh -o miniconda.sh;
          fi
          bash miniconda.sh -b -p $HOME/miniconda
          source $HOME/miniconda/bin/activate
          conda config --set always_yes yes --set changeps1 no
          conda update -q --all
          conda config --add channels defaults
          conda install conda-build pip anaconda-client
          conda info

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            CONDA_BUILD_SYSROOT="$(xcode-select -p)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
            [[ -e /opt/MacOSX10.9.sdk ]] || sudo ln -s ${CONDA_BUILD_SYSROOT} /opt/MacOSX10.9.sdk;
            printf "CONDA_BUILD_SYSROOT:\n    - ${CONDA_BUILD_SYSROOT}\n" >> conda-recipe/conda_build_config.yaml;
            conda build -c $MY_CONDA_CHANNEL conda-recipe;
          else
            mkdir -m 0777 -p $HOME/miniconda/conda-bld/linux-64;
            ./conda_build_in_docker.sh `pwd` $HOME/miniconda/conda-bld/linux-64 $MY_CONDA_CHANNEL;
          fi

      - name: After Success
        if: success()
        shell: bash
        run: |
          ls $HOME/miniconda/conda-bld/${{ matrix.os == 'macos-latest' && echo 'osx-64' || echo 'linux-64' }}
          if [[ ! -z "$GITHUB_REF" && "$GITHUB_REF" == refs/tags/* ]]; then
            anaconda -t $CONDA_TOKEN upload --force $HOME/miniconda/conda-bld/${{ matrix.os == 'macos-latest' && echo 'osx-64' || echo 'linux-64' }}/*.tar.bz2;
            echo [distutils]                > ~/.pypirc;
            echo index-servers = mypypi    >> ~/.pypirc;
            echo [mypypi]                  >> ~/.pypirc;
            echo repository=$PYPI_URL      >> ~/.pypirc;
            echo username=$PYPI_USER       >> ~/.pypirc;
            echo password=$PYPI_PASSWORD   >> ~/.pypirc;
            pip install twine;
            if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
              twine upload -r mypypi --skip-existing $HOME/miniconda/conda-bld/linux-64/pcaspy-*.tar.gz;
              twine upload -r mypypi --skip-existing $HOME/miniconda/conda-bld/linux-64/pcaspy-*.egg;
            fi;
            if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              twine upload -r mypypi --skip-existing $HOME/miniconda/conda-bld/osx-64/pcaspy-*.whl;
            fi;
          fi
```