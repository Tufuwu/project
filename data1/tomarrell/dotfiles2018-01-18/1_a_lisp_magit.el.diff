diff --git a/lisp/magit.el b/lisp/magit.el
index 23c0ce3..dc6a00f 100644
--- a/lisp/magit.el
++ b/lisp/magit.el
@@ -1,6 +1,6 @@
 ;;; magit.el --- A Git porcelain inside Emacs  -*- lexical-binding: t; coding: utf-8 -*-
 
-;; Copyright (C) 2008-2017  The Magit Project Contributors
;; Copyright (C) 2008-2018  The Magit Project Contributors
 ;;
 ;; You should have received a copy of the AUTHORS.md file which
 ;; lists all contributors.  If not, see http://magit.vc/authors.
@@ -16,7 +16,6 @@
 ;;	R¨¦mi Vanicat      <vanicat@debian.org>
 ;;	Yann Hodique      <yann.hodique@gmail.com>
 
-;; Package-Requires: ((emacs "24.4") (async "20170219.942") (dash "20170207.2056") (with-editor "20170111.609") (git-commit "20170214.347") (magit-popup "20170214.347"))
 ;; Keywords: git tools vc
 ;; Homepage: https://github.com/magit/magit
 
@@ -75,7 +74,15 @@
 
 (defface magit-header-line
   '((t :inherit magit-section-heading))
-  "Face for the `header-line'."
  "Face for the `header-line' in some Magit modes.
Note that some modes, such as `magit-log-select-mode', have their
own faces for the `header-line', or for parts of the
`header-line'."
  :group 'magit-faces)

(defface magit-header-line-key
  '((t :inherit magit-popup-key))
  "Face for keys in the `header-line'."
   :group 'magit-faces)
 
 (defface magit-dimmed
@@ -102,6 +109,12 @@
   "Face for remote branch head labels shown in log buffer."
   :group 'magit-faces)
 
(defface magit-branch-remote-head
  '((((class color) (background light)) :inherit magit-branch-remote :box t)
    (((class color) (background  dark)) :inherit magit-branch-remote :box t))
  "Face for current branch."
  :group 'magit-faces)

 (defface magit-branch-local
   '((((class color) (background light)) :foreground "SkyBlue4")
     (((class color) (background  dark)) :foreground "LightSkyBlue1"))
@@ -117,7 +130,7 @@
 (defface magit-head
   '((((class color) (background light)) :inherit magit-branch-local)
     (((class color) (background  dark)) :inherit magit-branch-local))
-  "Face for the symbolic ref \"HEAD\"."
  "Face for the symbolic ref `HEAD'."
   :group 'magit-faces)
 
 (defface magit-refname
@@ -136,6 +149,11 @@
   "Face for wip refnames."
   :group 'magit-faces)
 
(defface magit-keyword
  '((t :inherit font-lock-string-face))
  "Face for parts of commit messages inside brackets."
  :group 'magit-faces)

 (defface magit-signature-good
   '((t :foreground "green"))
   "Face for good signatures."
@@ -229,7 +247,7 @@ merge.
   "Merge commit REV into the current branch; and edit message.
 Perform the merge and prepare a commit message but let the user
 edit it.
-\n(git merge --edit --no-ff [ARGS] rev)"
\n(git merge --edit --no-ff [ARGS] REV)"
   (interactive (list (magit-read-other-branch-or-commit "Merge")
                      (magit-merge-arguments)))
   (magit-merge-assert)
@@ -242,7 +260,7 @@ edit it.
   "Merge commit REV into the current branch; pretending it failed.
 Pretend the merge failed to give the user the opportunity to
 inspect the merge and change the commit message.
-\n(git merge --no-commit --no-ff [ARGS] rev)"
\n(git merge --no-commit --no-ff [ARGS] REV)"
   (interactive (list (magit-read-other-branch-or-commit "Merge")
                      (magit-merge-arguments)))
   (magit-merge-assert)
@@ -263,10 +281,9 @@ inspect the merge and change the commit message.
 (defun magit-merge-preview-refresh-buffer (rev)
   (let* ((branch (magit-get-current-branch))
          (head (or branch (magit-rev-verify "HEAD"))))
-    (setq header-line-format
-          (propertize (format "Preview merge of %s into %s"
-                              rev (or branch "HEAD"))
-                      'face 'magit-header-line))
    (magit-set-header-line-format (format "Preview merge of %s into %s"
                                          rev
                                          (or branch "HEAD")))
     (magit-insert-section (diffbuf)
       (magit-git-wash #'magit-diff-wash-diffs
         "merge-tree" (magit-git-string "merge-base" head rev) head rev))))
@@ -309,7 +326,7 @@ inspect the merge and change the commit message.
   (file-exists-p (magit-git-dir "MERGE_HEAD")))
 
 (defun magit-merge-assert ()
-  (or (not (magit-anything-modified-p))
  (or (not (magit-anything-modified-p t))
       (magit-confirm 'merge-dirty
         "Merging with dirty worktree is risky.  Continue")
       (user-error "Abort")))
@@ -346,7 +363,8 @@ If no merge is in progress, do nothing."
   :actions '((?m "reset mixed  (HEAD and index)"         magit-reset-head)
              (?s "reset soft   (HEAD only)"              magit-reset-soft)
              (?h "reset hard   (HEAD, index, and files)" magit-reset-hard)
-             (?i "reset index  (index only)"             magit-reset-index))
             (?i "reset index  (index only)"             magit-reset-index) nil
             (?f "reset a file"                          magit-file-checkout))
   :max-action-columns 1)
 
 ;;;###autoload
@@ -414,8 +432,9 @@ With a prefix argument also reset the working tree.
   "Popup console for tag commands."
   :man-page "git-tag"
   :switches '((?a "Annotate" "--annotate")
-              (?s "Sign"     "--sign")
-              (?f "Force"    "--force"))
              (?f "Force"    "--force")
              (?s "Sign"     "--sign"))
  :options  '((?f "Sign"     "--local-user=" magit-read-gpg-secret-key))
   :actions  '((?t "Create"   magit-tag)
               (?k "Delete"   magit-tag-delete)
               (?p "Prune"    magit-tag-prune))
@@ -427,10 +446,7 @@ With a prefix argument also reset the working tree.
 With a prefix argument annotate the tag.
 \n(git tag [--annotate] NAME REV)"
   (interactive (list (magit-read-tag "Tag name")
-                     (or (and (memq 'magit-tag magit-no-confirm-default)
-                              (or (magit-branch-or-commit-at-point)
-                                  (magit-get-current-branch)))
-                         (magit-read-branch-or-commit "Place tag on"))
                     (magit-read-branch-or-commit "Place tag on")
                      (let ((args (magit-tag-arguments)))
                        (when current-prefix-arg
                          (cl-pushnew "--annotate" args))
@@ -444,9 +460,11 @@ If the region marks multiple tags (and nothing else), then offer
 to delete those, otherwise prompt for a single tag to be deleted,
 defaulting to the tag at point.
 \n(git tag -d TAGS)"
-  (interactive (list (--if-let (magit-region-values 'tag)
-                         (magit-confirm t nil "Delete %i tags" it)
-                       (magit-read-tag "Delete tag" t))))
  (interactive
   (list (--if-let (magit-region-values 'tag)
             (or (magit-confirm t "Delete %s" "Delete %i tags" it)
                 (user-error "Abort"))
           (magit-read-tag "Delete tag" t))))
   (magit-run-git "tag" "-d" tags))
 
 (defun magit-tag-prune (tags remote-tags remote)
@@ -506,6 +524,7 @@ defaulting to the tag at point.
              (?y "Show Refs"       magit-show-refs-popup)
              (?z "Stashing"        magit-stash-popup)
              (?! "Running"         magit-run-popup)
             (?% "Worktree"        magit-worktree-popup)
              "Applying changes"
              (?a "Apply"           magit-apply)
              (?s "Stage"           magit-stage)
@@ -556,6 +575,14 @@ defaulting to the tag at point.
 
 ;;;; Git Popup
 
(defcustom magit-shell-command-verbose-prompt t
  "Whether to show the working directory when reading a command.
This affects `magit-git-command', `magit-git-command-topdir',
`magit-shell-command', and `magit-shell-command-topdir'."
  :package-version '(magit . "2.11.0")
  :group 'magit-commands
  :type 'boolean)

 (defvar magit-git-command-history nil)
 
 ;;;###autoload (autoload 'magit-run-popup "magit" nil t)
@@ -573,63 +600,66 @@ defaulting to the tag at point.
   :max-action-columns 2)
 
 ;;;###autoload
-(defun magit-git-command (args directory)
-  "Execute a Git subcommand asynchronously, displaying the output.
-With a prefix argument run Git in the root of the current
-repository, otherwise in `default-directory'."
-  (interactive (magit-read-shell-command "Git subcommand (pwd: %s)"))
-  (require 'eshell)
-  (with-temp-buffer
-    (insert args)
-    (setq args (mapcar 'eval (eshell-parse-arguments (point-min)
-                                                     (point-max))))
-    (setq default-directory directory)
-    (let ((magit-git-global-arguments
-           ;; A human will want globbing by default.
-           (remove "--literal-pathspecs"
-                   magit-git-global-arguments)))
-     (magit-run-git-async args)))
-  (magit-process-buffer))
(defun magit-git-command (command)
  "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

With a prefix argument COMMAND is run in the top-level directory
of the current working tree, otherwise in `default-directory'."
  (interactive (list (magit-read-shell-command nil "git ")))
  (magit--shell-command command))
 
 ;;;###autoload
-(defun magit-git-command-topdir (args directory)
-  "Execute a Git subcommand asynchronously, displaying the output.
-Run Git in the top-level directory of the current repository.
-\n(fn)" ; arguments are for internal use
-  (interactive (magit-read-shell-command "Git subcommand (pwd: %s)" t))
-  (magit-git-command args directory))
(defun magit-git-command-topdir (command)
  "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

COMMAND is run in the top-level directory of the current
working tree."
  (interactive (list (magit-read-shell-command t "git ")))
  (magit--shell-command command (magit-toplevel)))
 
 ;;;###autoload
-(defun magit-shell-command (args directory)
-  "Execute a shell command asynchronously, displaying the output.
-With a prefix argument run the command in the root of the current
-repository, otherwise in `default-directory'."
-  (interactive (magit-read-shell-command "Shell command (pwd: %s)"))
-  (require 'eshell)
-  (with-temp-buffer
-    (insert args)
-    (setq args (mapcar 'eval (eshell-parse-arguments (point-min)
-                                                     (point-max))))
-    (setq default-directory directory)
-    (apply #'magit-start-process (car args) nil (cdr args)))
-  (magit-process-buffer))
(defun magit-shell-command (command)
  "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  With a
prefix argument COMMAND is run in the top-level directory of
the current working tree, otherwise in `default-directory'."
  (interactive (list (magit-read-shell-command)))
  (magit--shell-command command))
 
 ;;;###autoload
-(defun magit-shell-command-topdir (args directory)
-  "Execute a shell command asynchronously, displaying the output.
-Run the command in the top-level directory of the current repository.
-\n(fn)" ; arguments are for internal use
-  (interactive (magit-read-shell-command "Shell command (pwd: %s)" t))
-  (magit-shell-command args directory))
-
-(defun magit-read-shell-command (prompt &optional root)
-  (let ((dir (if (or root current-prefix-arg)
-                 (or (magit-toplevel)
-                     (user-error "Not inside a Git repository"))
-               default-directory)))
-    (list (magit-read-string (format prompt (abbreviate-file-name dir))
-                             nil 'magit-git-command-history)
-          dir)))
(defun magit-shell-command-topdir (command)
  "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  COMMAND
is run in the top-level directory of the current working tree."
  (interactive (list (magit-read-shell-command t)))
  (magit--shell-command command (magit-toplevel)))

(defun magit--shell-command (command &optional directory)
  (let ((default-directory (or directory default-directory))
        (process-environment process-environment))
    (push "GIT_PAGER=cat" process-environment)
    (magit-start-process shell-file-name nil
                         shell-command-switch command))
  (magit-process-buffer))

(defun magit-read-shell-command (&optional toplevel initial-input)
  (let ((dir (abbreviate-file-name
              (if (or toplevel current-prefix-arg)
                  (or (magit-toplevel)
                      (magit--not-inside-repository-error))
                default-directory))))
    (read-shell-command (if magit-shell-command-verbose-prompt
                            (format "Async shell command in %s: " dir)
                          "Async shell command: ")
                        initial-input 'magit-git-command-history)))
 
 ;;; Revision Stack
 
@@ -656,7 +686,7 @@ the index number.  That number is incremented by one, and becomes
 the index number of the entry to be inserted.  If you don't want
 to number the inserted revisions, then use nil for INDEX-REGEXP.
 
-If INDEX-REGEXP is non-nil then both POINT-FORMAT and EOB-FORMAT
If INDEX-REGEXP is non-nil, then both POINT-FORMAT and EOB-FORMAT
 should contain \"%N\", which is replaced with the number that was
 determined in the previous step.
 
@@ -688,7 +718,7 @@ the current buffer according to `magit-pop-revision-stack-format'.
 Revisions can be put on the stack using `magit-copy-section-value'
 and `magit-copy-buffer-revision'.
 
-If the stack is empty or with a prefix argument instead read a
If the stack is empty or with a prefix argument, instead read a
 revision in the minibuffer.  By using the minibuffer history this
 allows selecting an item which was popped earlier or to insert an
 arbitrary reference or revision without first pushing it onto the
@@ -725,11 +755,11 @@ the minibuffer too."
                             "1"))))
               pnt-args eob-args)
           (when (listp pnt-format)
-            (setq pnt-args (cdr pnt-format)
-                  pnt-format (car pnt-format)))
            (setq pnt-args (cdr pnt-format))
            (setq pnt-format (car pnt-format)))
           (when (listp eob-format)
-            (setq eob-args (cdr eob-format)
-                  eob-format (car eob-format)))
            (setq eob-args (cdr eob-format))
            (setq eob-format (car eob-format)))
           (when pnt-format
             (when idx-format
               (setq pnt-format
@@ -777,7 +807,7 @@ above."
   (if (use-region-p)
       (copy-region-as-kill nil nil 'region)
     (-when-let* ((section (magit-current-section))
-                 (value (magit-section-value section)))
                 (value (oref section value)))
       (magit-section-case
         ((branch commit module-commit tag)
          (let ((default-directory default-directory) ref)
@@ -867,18 +897,20 @@ above."
 Use the function by the same name instead of this variable.")
 
 ;;;###autoload
-(defun magit-version ()
(defun magit-version (&optional print-dest)
   "Return the version of Magit currently in use.
-When called interactive also show the used versions of Magit,
-Git, and Emacs in the echo area."
-  (interactive)
If optional argument PRINT-DEST is non-nil, output
stream (interactively, the echo area, or the current buffer with
a prefix argument), also print the used versions of Magit, Git,
and Emacs to it."
  (interactive (list (if current-prefix-arg (current-buffer) t)))
   (let ((magit-git-global-arguments nil)
         (toplib (or load-file-name buffer-file-name))
         debug)
     (unless (and toplib
                  (equal (file-name-nondirectory toplib) "magit.el"))
-      (setq toplib (locate-library "magit.el"))
-      (setq toplib (and toplib (file-chase-links toplib))))
      (setq toplib (locate-library "magit.el")))
    (setq toplib (and toplib (file-chase-links toplib)))
     (push toplib debug)
     (when toplib
       (let* ((topdir (file-name-directory toplib))
@@ -924,12 +956,18 @@ Git, and Emacs in the echo area."
                                     dirname)
                   (setq magit-version (match-string 1 dirname))))))))
     (if (stringp magit-version)
-        (when (called-interactively-p 'any)
-          (message "Magit %s, Git %s, Emacs %s, %s"
-                   (or magit-version "(unknown)")
-                   (or (magit-git-version t) "(unknown)")
-                   emacs-version
-                   system-type))
        (when print-dest
          (princ (format "Magit %s, Git %s, Emacs %s, %s"
                         (or magit-version "(unknown)")
                         (or (let ((magit-git-debug
                                    (lambda (err)
                                      (display-warning '(magit git)
                                                       err :error))))
                               (magit-git-version t))
                             "(unknown)")
                         emacs-version
                         system-type)
                 print-dest))
       (setq debug (reverse debug))
       (setq magit-version 'error)
       (when magit-version
@@ -939,6 +977,40 @@ Git, and Emacs in the echo area."
         (message "Cannot determine Magit's version %S" debug)))
     magit-version))
 
(defun magit-debug-git-executable ()
  "Display a buffer with information about `magit-git-executable'.
See info node `(magit)Debugging Tools' for more information."
  (interactive)
  (with-current-buffer (get-buffer-create "*magit-git-debug*")
    (pop-to-buffer (current-buffer))
    (erase-buffer)
    (insert (concat
             (format "magit-git-executable: %S" magit-git-executable)
             (and (not (file-name-absolute-p magit-git-executable))
                  (format " [%S]" (executable-find magit-git-executable)))
             (format " (%s)\n"
                     (let* ((errmsg nil)
                            (magit-git-debug (lambda (err) (setq errmsg err))))
                       (or (magit-git-version t) errmsg)))))
    (insert (format "exec-path: %S\n" exec-path))
    (--when-let (cl-set-difference
                 (-filter #'file-exists-p (remq nil (parse-colon-path
                                                     (getenv "PATH"))))
                 (-filter #'file-exists-p (remq nil exec-path))
                 :test #'file-equal-p)
      (insert (format "  entries in PATH, but not in exec-path: %S\n" it)))
    (dolist (execdir exec-path)
      (insert (format "  %s (%s)\n" execdir (car (file-attributes execdir))))
      (when (file-directory-p execdir)
        (dolist (exec (directory-files
                       execdir t (concat
                                  "\\`git" (regexp-opt exec-suffixes) "\\'")))
          (insert (format "    %s (%s)\n" exec
                          (let* ((magit-git-executable exec)
                                 (errmsg nil)
                                 (magit-git-debug (lambda (err) (setq errmsg err))))
                            (or (magit-git-version t) errmsg)))))))))

 ;;; (Asserts)
 
 (defun magit-startup-asserts ()
@@ -1010,7 +1082,12 @@ library getting in the way.  Then restart Emacs.\n"
     (require 'magit-subtree)
     (require 'magit-ediff)
     (require 'magit-extras)
-    (require 'git-rebase)))
    (require 'git-rebase)
    (require 'magit-imenu)
    (require 'magit-bookmark)))

(eval-after-load 'bookmark
  '(require 'magit-bookmark))
 
 (if after-init-time
     (progn (magit-startup-asserts)
