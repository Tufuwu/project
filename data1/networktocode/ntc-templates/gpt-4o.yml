```yaml
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install poetry
        poetry install
    - name: Run linters
      run: |
        poetry run tox -e black
        poetry run tox -e flake8
        poetry run tox -e yamllint

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install poetry
        poetry install
    - name: Run tests
      run: poetry run tox -e py${{ matrix.python-version }}

  deploy-github:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install poetry
    - name: Build package
      run: |
        poetry version ${{ github.event.release.tag_name }}
        poetry build
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/*
        asset_name: my-package-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  deploy-pypi:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install poetry
    - name: Publish to PyPI
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        echo Deploying the release to PyPI
        poetry version ${{ github.event.release.tag_name }}
        poetry publish --build -u __token__ -p $PYPI_TOKEN
```