name: CI

on:
  push:
    branches:
      - develop
      - 'releases/**'

jobs:
  style-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8
      - name: Style check
        run: |
          black --diff --check .
          flake8

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          python setup.py install
          python setup.py build_ext --inplace
      - name: Run tests
        run: |
          PYTHONPATH=. coverage run $(which pytest)
          cd $GITHUB_WORKSPACE
          git clone https://github.com/LLNL/Caliper.git
          cd Caliper
          mkdir build && mkdir install
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../install ../
          make VERBOSE=1
          make install
          export PATH=${PWD}/../install/bin:${PATH}
          cd ../../
          which cali-query
          pip install --upgrade scikit-build
          pip install --upgrade --no-cache-dir --no-deps -v timemory==3.2.0.dev4 --install-option=--disable-{c,gotcha,tools}
          PYTHONPATH=. coverage run $(which pytest)

  coverage:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install codecov
      - name: Upload coverage
        run: |
          codecov --env PYTHON_VERSION --required --flags "${TEST_SUITE}${GITHUB_OS_NAME}"
