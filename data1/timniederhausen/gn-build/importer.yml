name: Tufuwu/test2
on:
  push:
    branches:
    - "**/*"
  pull_request:
concurrency:
#   # This item has no matching transformer
#   maximum_number_of_builds: 0
env:
  GN_LNX64_URL: https://github.com/timniederhausen/gn/releases/download/2020.03/gn-linux-amd64.tar.gz
  GN_MAC_URL: https://github.com/timniederhausen/gn/releases/download/2020.03/gn-macos-amd64.tar.gz
  NINJA_LNX_ZIP: https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip
  NINJA_MAC_ZIP: https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-mac.zip
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      gcc_cc: gcc-6
      gcc_cxx: g++-6
      GN_ARGS: "'"
      is_clang: false'
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - run: apt-get -y install g++-6
#     # 'compiler' was not transformed because there is no suitable equivalent in GitHub Actions
    - run: if [[ "${{ runner.os }}" == "linux" ]]; then export GN_URL="$GN_LNX64_URL"; export NINJA_ZIP="$NINJA_LNX_ZIP"; fi
    - run: if [[ "${{ runner.os }}" == "osx" ]]; then export GN_URL="$GN_MAC_URL"; export NINJA_ZIP="$NINJA_MAC_ZIP"; fi
    - run: echo $GN_URL
    - run: travis_retry wget --no-check-certificate --quiet -O ninja.zip $NINJA_ZIP
    - run: python -c 'import sys,zipfile;zipfile.ZipFile(sys.argv[1]).extractall()' ninja.zip
    - run: chmod +x ninja
    - run: travis_retry wget --no-check-certificate --quiet -O gn.tgz $GN_URL
    - run: tar xvf gn.tgz
    - run: chmod +x gn
    - run: python3 gn_helpers_unittest.py
    - run: git clone --branch=testsrc --depth=1 https://github.com/timniederhausen/gn-build.git testsrc
    - run: mkdir testsrc/build
    - run: mv config testsrc/build/
    - run: mv toolchain testsrc/build/
    - run: echo script_executable = \"python3\" >> testsrc/.gn
    - run: ./gn gen out --args="$GN_ARGS" --root=testsrc
    - run: cat out/args.gn
    - run: "./ninja -C out"
    - run: cd out &&  ./hello
  test_2:
    runs-on: ubuntu-latest
    env:
      gcc_cc: gcc-6
      gcc_cxx: g++-6
      GN_ARGS: "'"
      is_clang: 'false'
      is_debug: false'
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - run: apt-get -y install g++-6
#     # 'compiler' was not transformed because there is no suitable equivalent in GitHub Actions
    - run: if [[ "${{ runner.os }}" == "linux" ]]; then export GN_URL="$GN_LNX64_URL"; export NINJA_ZIP="$NINJA_LNX_ZIP"; fi
    - run: if [[ "${{ runner.os }}" == "osx" ]]; then export GN_URL="$GN_MAC_URL"; export NINJA_ZIP="$NINJA_MAC_ZIP"; fi
    - run: echo $GN_URL
    - run: travis_retry wget --no-check-certificate --quiet -O ninja.zip $NINJA_ZIP
    - run: python -c 'import sys,zipfile;zipfile.ZipFile(sys.argv[1]).extractall()' ninja.zip
    - run: chmod +x ninja
    - run: travis_retry wget --no-check-certificate --quiet -O gn.tgz $GN_URL
    - run: tar xvf gn.tgz
    - run: chmod +x gn
    - run: python3 gn_helpers_unittest.py
    - run: git clone --branch=testsrc --depth=1 https://github.com/timniederhausen/gn-build.git testsrc
    - run: mkdir testsrc/build
    - run: mv config testsrc/build/
    - run: mv toolchain testsrc/build/
    - run: echo script_executable = \"python3\" >> testsrc/.gn
    - run: ./gn gen out --args="$GN_ARGS" --root=testsrc
    - run: cat out/args.gn
    - run: "./ninja -C out"
    - run: cd out &&  ./hello
  test_3:
    runs-on: ubuntu-latest
    env:
      gcc_cc: gcc-6
      gcc_cxx: g++-6
      GN_ARGS: "'"
      is_clang: 'false'
      is_official_build: true'
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - run: apt-get -y install g++-6
#     # 'compiler' was not transformed because there is no suitable equivalent in GitHub Actions
    - run: if [[ "${{ runner.os }}" == "linux" ]]; then export GN_URL="$GN_LNX64_URL"; export NINJA_ZIP="$NINJA_LNX_ZIP"; fi
    - run: if [[ "${{ runner.os }}" == "osx" ]]; then export GN_URL="$GN_MAC_URL"; export NINJA_ZIP="$NINJA_MAC_ZIP"; fi
    - run: echo $GN_URL
    - run: travis_retry wget --no-check-certificate --quiet -O ninja.zip $NINJA_ZIP
    - run: python -c 'import sys,zipfile;zipfile.ZipFile(sys.argv[1]).extractall()' ninja.zip
    - run: chmod +x ninja
    - run: travis_retry wget --no-check-certificate --quiet -O gn.tgz $GN_URL
    - run: tar xvf gn.tgz
    - run: chmod +x gn
    - run: python3 gn_helpers_unittest.py
    - run: git clone --branch=testsrc --depth=1 https://github.com/timniederhausen/gn-build.git testsrc
    - run: mkdir testsrc/build
    - run: mv config testsrc/build/
    - run: mv toolchain testsrc/build/
    - run: echo script_executable = \"python3\" >> testsrc/.gn
    - run: ./gn gen out --args="$GN_ARGS" --root=testsrc
    - run: cat out/args.gn
    - run: "./ninja -C out"
    - run: cd out &&  ./hello
  test_4:
    runs-on: ubuntu-latest
    env:
      clang_cc: clang-3.8
      clang_cxx: clang++-3.8
      GN_ARGS: "'"
      is_clang: true'
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - run: apt-get -y install clang-3.8
#     # 'compiler' was not transformed because there is no suitable equivalent in GitHub Actions
    - run: if [[ "${{ runner.os }}" == "linux" ]]; then export GN_URL="$GN_LNX64_URL"; export NINJA_ZIP="$NINJA_LNX_ZIP"; fi
    - run: if [[ "${{ runner.os }}" == "osx" ]]; then export GN_URL="$GN_MAC_URL"; export NINJA_ZIP="$NINJA_MAC_ZIP"; fi
    - run: echo $GN_URL
    - run: travis_retry wget --no-check-certificate --quiet -O ninja.zip $NINJA_ZIP
    - run: python -c 'import sys,zipfile;zipfile.ZipFile(sys.argv[1]).extractall()' ninja.zip
    - run: chmod +x ninja
    - run: travis_retry wget --no-check-certificate --quiet -O gn.tgz $GN_URL
    - run: tar xvf gn.tgz
    - run: chmod +x gn
    - run: python3 gn_helpers_unittest.py
    - run: git clone --branch=testsrc --depth=1 https://github.com/timniederhausen/gn-build.git testsrc
    - run: mkdir testsrc/build
    - run: mv config testsrc/build/
    - run: mv toolchain testsrc/build/
    - run: echo script_executable = \"python3\" >> testsrc/.gn
    - run: ./gn gen out --args="$GN_ARGS" --root=testsrc
    - run: cat out/args.gn
    - run: "./ninja -C out"
    - run: cd out &&  ./hello
  test_5:
    runs-on: ubuntu-latest
    env:
      clang_cc: clang-3.8
      clang_cxx: clang++-3.8
      GN_ARGS: "'"
      is_clang: 'true'
      is_debug: false'
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - run: apt-get -y install clang-3.8
#     # 'compiler' was not transformed because there is no suitable equivalent in GitHub Actions
    - run: if [[ "${{ runner.os }}" == "linux" ]]; then export GN_URL="$GN_LNX64_URL"; export NINJA_ZIP="$NINJA_LNX_ZIP"; fi
    - run: if [[ "${{ runner.os }}" == "osx" ]]; then export GN_URL="$GN_MAC_URL"; export NINJA_ZIP="$NINJA_MAC_ZIP"; fi
    - run: echo $GN_URL
    - run: travis_retry wget --no-check-certificate --quiet -O ninja.zip $NINJA_ZIP
    - run: python -c 'import sys,zipfile;zipfile.ZipFile(sys.argv[1]).extractall()' ninja.zip
    - run: chmod +x ninja
    - run: travis_retry wget --no-check-certificate --quiet -O gn.tgz $GN_URL
    - run: tar xvf gn.tgz
    - run: chmod +x gn
    - run: python3 gn_helpers_unittest.py
    - run: git clone --branch=testsrc --depth=1 https://github.com/timniederhausen/gn-build.git testsrc
    - run: mkdir testsrc/build
    - run: mv config testsrc/build/
    - run: mv toolchain testsrc/build/
    - run: echo script_executable = \"python3\" >> testsrc/.gn
    - run: ./gn gen out --args="$GN_ARGS" --root=testsrc
    - run: cat out/args.gn
    - run: "./ninja -C out"
    - run: cd out &&  ./hello
  test_6:
    runs-on: ubuntu-latest
    env:
      clang_cc: clang-3.8
      clang_cxx: clang++-3.8
      GN_ARGS: "'"
      is_clang: 'true'
      is_official_build: true'
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - run: apt-get -y install clang-3.8
#     # 'compiler' was not transformed because there is no suitable equivalent in GitHub Actions
    - run: if [[ "${{ runner.os }}" == "linux" ]]; then export GN_URL="$GN_LNX64_URL"; export NINJA_ZIP="$NINJA_LNX_ZIP"; fi
    - run: if [[ "${{ runner.os }}" == "osx" ]]; then export GN_URL="$GN_MAC_URL"; export NINJA_ZIP="$NINJA_MAC_ZIP"; fi
    - run: echo $GN_URL
    - run: travis_retry wget --no-check-certificate --quiet -O ninja.zip $NINJA_ZIP
    - run: python -c 'import sys,zipfile;zipfile.ZipFile(sys.argv[1]).extractall()' ninja.zip
    - run: chmod +x ninja
    - run: travis_retry wget --no-check-certificate --quiet -O gn.tgz $GN_URL
    - run: tar xvf gn.tgz
    - run: chmod +x gn
    - run: python3 gn_helpers_unittest.py
    - run: git clone --branch=testsrc --depth=1 https://github.com/timniederhausen/gn-build.git testsrc
    - run: mkdir testsrc/build
    - run: mv config testsrc/build/
    - run: mv toolchain testsrc/build/
    - run: echo script_executable = \"python3\" >> testsrc/.gn
    - run: ./gn gen out --args="$GN_ARGS" --root=testsrc
    - run: cat out/args.gn
    - run: "./ninja -C out"
    - run: cd out &&  ./hello
  test_7:
    runs-on: macos-latest
    env:
      GN_ARGS: "'is_clang=true"
      is_official_build: true'
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - run: 'apt-get -y install '
#     # 'compiler' was not transformed because there is no suitable equivalent in GitHub Actions
    - run: if [[ "${{ runner.os }}" == "linux" ]]; then export GN_URL="$GN_LNX64_URL"; export NINJA_ZIP="$NINJA_LNX_ZIP"; fi
    - run: if [[ "${{ runner.os }}" == "osx" ]]; then export GN_URL="$GN_MAC_URL"; export NINJA_ZIP="$NINJA_MAC_ZIP"; fi
    - run: echo $GN_URL
    - run: travis_retry wget --no-check-certificate --quiet -O ninja.zip $NINJA_ZIP
    - run: python -c 'import sys,zipfile;zipfile.ZipFile(sys.argv[1]).extractall()' ninja.zip
    - run: chmod +x ninja
    - run: travis_retry wget --no-check-certificate --quiet -O gn.tgz $GN_URL
    - run: tar xvf gn.tgz
    - run: chmod +x gn
    - run: python3 gn_helpers_unittest.py
    - run: git clone --branch=testsrc --depth=1 https://github.com/timniederhausen/gn-build.git testsrc
    - run: mkdir testsrc/build
    - run: mv config testsrc/build/
    - run: mv toolchain testsrc/build/
    - run: echo script_executable = \"python3\" >> testsrc/.gn
    - run: ./gn gen out --args="$GN_ARGS" --root=testsrc
    - run: cat out/args.gn
    - run: "./ninja -C out"
    - run: cd out &&  ./hello