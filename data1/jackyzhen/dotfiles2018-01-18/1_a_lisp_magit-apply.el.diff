diff --git a/lisp/magit-apply.el b/lisp/magit-apply.el
index 81693d3..027d26f 100644
--- a/lisp/magit-apply.el
++ b/lisp/magit-apply.el
@@ -1,6 +1,6 @@
 ;;; magit-apply.el --- apply Git diffs  -*- lexical-binding: t -*-
 
-;; Copyright (C) 2010-2017  The Magit Project Contributors
;; Copyright (C) 2010-2018  The Magit Project Contributors
 ;;
 ;; You should have received a copy of the AUTHORS.md file which
 ;; lists all contributors.  If not, see http://magit.vc/authors.
@@ -36,13 +36,17 @@
 
 ;; For `magit-apply'
 (declare-function magit-am-popup 'magit-sequence)
(declare-function magit-patch-apply-popup 'magit-files)
 ;; For `magit-discard-files'
 (declare-function magit-checkout-stage 'magit)
 (declare-function magit-checkout-read-stage 'magit)
 (defvar auto-revert-verbose)
 ;; For `magit-stage-untracked'
 (declare-function magit-submodule-add 'magit-submodule)
-(declare-function magit-submodule-read-name 'magit-submodule)
(declare-function magit-submodule-read-name-for-path 'magit-submodule)
(declare-function borg--maybe-absorb-gitdir 'borg)
(declare-function borg--sort-submodule-sections 'borg)
(defvar borg-user-emacs-directory)
 
 (require 'dired)
 
@@ -52,8 +56,8 @@
   "Whether Magit uses the system's trash can.
 
 You should absolutely not disable this and also remove `discard'
-from `magit-no-confirm'.  Even if you have all of the Magit-Wip
-modes enabled you shouldn't do that, because those modes to not
from `magit-no-confirm'.  You shouldn't do that even if you have
all of the Magit-Wip modes enabled, because those modes do not
 track any files that are not tracked in the proper branch."
   :package-version '(magit . "2.1.0")
   :group 'magit-essentials
@@ -104,14 +108,15 @@ so causes the change to be applied to the index as well."
       (`(,_ region) (magit-apply-region it args))
       (`(,_   hunk) (magit-apply-hunk   it args))
       (`(,_  hunks) (magit-apply-hunks  it args))
      (`(rebase-sequence file) (magit-patch-apply-popup))
       (`(,_   file) (magit-apply-diff   it args))
       (`(,_  files) (magit-apply-diffs  it args)))))
 
 (defun magit-apply--section-content (section)
-  (buffer-substring-no-properties (if (eq (magit-section-type section) 'hunk)
-                                      (magit-section-start section)
-                                    (magit-section-content section))
-                                  (magit-section-end section)))
  (buffer-substring-no-properties (if (magit-hunk-section-p section)
                                      (oref section start)
                                    (oref section content))
                                  (oref section end)))
 
 (defun magit-apply-diffs (sections &rest args)
   (setq sections (magit-apply--get-diffs sections))
@@ -129,18 +134,18 @@ so causes the change to be applied to the index as well."
                              (magit-apply--section-content section))))
 
 (defun magit-apply-hunks (sections &rest args)
-  (let ((section (magit-section-parent (car sections))))
-    (when (string-match "^diff --cc" (magit-section-value section))
  (let ((section (oref (car sections) parent)))
    (when (string-match "^diff --cc" (oref section value))
       (user-error "Cannot un-/stage resolution hunks.  Stage the whole file"))
     (magit-apply-patch section args
-                       (concat (magit-section-diff-header section)
                       (concat (oref section header)
                                (mapconcat 'magit-apply--section-content
                                           sections "")))))
 
 (defun magit-apply-hunk (section &rest args)
   (when (string-match "^diff --cc" (magit-section-parent-value section))
     (user-error "Cannot un-/stage resolution hunks.  Stage the whole file"))
-  (magit-apply-patch (magit-section-parent section) args
  (magit-apply-patch (oref section parent) args
                      (concat (magit-diff-file-header section)
                              (magit-apply--section-content section))))
 
@@ -149,14 +154,14 @@ so causes the change to be applied to the index as well."
     (user-error "Not enough context to apply region.  Increase the context"))
   (when (string-match "^diff --cc" (magit-section-parent-value section))
     (user-error "Cannot un-/stage resolution hunks.  Stage the whole file"))
-  (magit-apply-patch (magit-section-parent section) args
  (magit-apply-patch (oref section parent) args
                      (concat (magit-diff-file-header section)
                              (magit-diff-hunk-region-patch section args))))
 
 (defun magit-apply-patch (section:s args patch)
   (let* ((files (if (atom section:s)
-                    (list (magit-section-value section:s))
-                  (mapcar 'magit-section-value section:s)))
                    (list (oref section:s value))
                  (--map (oref it value) section:s)))
          (command (symbol-name this-command))
          (command (if (and command (string-match "^magit-\\([^-]+\\)" command))
                       (match-string 1 command)
@@ -175,25 +180,36 @@ so causes the change to be applied to the index as well."
       (magit-refresh))))
 
 (defun magit-apply--get-selection ()
-  (or (magit-region-sections 'hunk 'file)
  (or (magit-region-sections '(hunk file) t)
       (let ((section (magit-current-section)))
-        (pcase (magit-section-type section)
        (pcase (oref section type)
           ((or `hunk `file) section)
           ((or `staged `unstaged `untracked
                `stashed-index `stashed-worktree `stashed-untracked)
-           (magit-section-children section))
           (oref section children))
           (_ (user-error "Cannot apply this, it's not a change"))))))
 
 (defun magit-apply--get-diffs (sections)
   (magit-section-case
     ([file diffstat]
      (--map (or (magit-get-section
-                 (append `((file . ,(magit-section-value it)))
                 (append `((file . ,(oref it value)))
                          (magit-section-ident magit-root-section)))
                 (error "Cannot get required diff headers"))
             sections))
     (t sections)))
 
(defun magit-apply--diff-ignores-whitespace-p ()
  (and (cl-intersection (if (derived-mode-p 'magit-diff-mode)
                            (nth 2 magit-refresh-args)
                          magit-diff-section-arguments)
                        '("--ignore-space-at-eol"
                          "--ignore-space-change"
                          "--ignore-all-space"
                          "--ignore-blank-lines")
                        :test #'equal)
       t))

 ;;;; Stage
 
 (defun magit-stage (&optional intent)
@@ -202,17 +218,22 @@ With a prefix argument, INTENT, and an untracked file (or files)
 at point, stage the file but not its content."
   (interactive "P")
   (--if-let (and (derived-mode-p 'magit-mode) (magit-apply--get-selection))
-      (pcase (list (magit-diff-type) (magit-diff-scope))
-        (`(untracked     ,_) (magit-stage-untracked intent))
-        (`(unstaged  region) (magit-apply-region it "--cached"))
-        (`(unstaged    hunk) (magit-apply-hunk   it "--cached"))
-        (`(unstaged   hunks) (magit-apply-hunks  it "--cached"))
-        (`(unstaged    file) (magit-stage-1 "-u" (list (magit-section-value it))))
-        (`(unstaged   files) (magit-stage-1 "-u" (magit-region-values)))
-        (`(unstaged    list) (magit-stage-1 "-u"))
-        (`(staged        ,_) (user-error "Already staged"))
-        (`(committed     ,_) (user-error "Cannot stage committed changes"))
-        (`(undefined     ,_) (user-error "Cannot stage this change")))
      (pcase (list (magit-diff-type)
                   (magit-diff-scope)
                   (magit-apply--diff-ignores-whitespace-p))
        (`(untracked     ,_  ,_) (magit-stage-untracked intent))
        (`(unstaged  region  ,_) (magit-apply-region it "--cached"))
        (`(unstaged    hunk  ,_) (magit-apply-hunk   it "--cached"))
        (`(unstaged   hunks  ,_) (magit-apply-hunks  it "--cached"))
        (`(unstaged    file   t) (magit-apply-diff   it "--cached"))
        (`(unstaged   files   t) (magit-apply-diffs  it "--cached"))
        (`(unstaged    list   t) (magit-apply-diffs  it "--cached"))
        (`(unstaged    file nil) (magit-stage-1 "-u" (list (oref it value))))
        (`(unstaged   files nil) (magit-stage-1 "-u" (magit-region-values nil t)))
        (`(unstaged    list nil) (magit-stage-modified))
        (`(staged        ,_  ,_) (user-error "Already staged"))
        (`(committed     ,_  ,_) (user-error "Cannot stage committed changes"))
        (`(undefined     ,_  ,_) (user-error "Cannot stage this change")))
     (call-interactively 'magit-stage-file)))
 
 ;;;###autoload
@@ -224,7 +245,7 @@ requiring confirmation."
   (interactive
    (let* ((atpoint (magit-section-when (file)))
           (current (magit-file-relative-name))
-          (choices (nconc (magit-modified-files)
          (choices (nconc (magit-unstaged-files)
                           (magit-untracked-files)))
           (default (car (member (or atpoint current) choices))))
      (list (if (or current-prefix-arg (not default))
@@ -240,12 +261,11 @@ requiring confirmation."
 Stage all new content of tracked files and remove tracked files
 that no longer exist in the working tree from the index also.
 With a prefix argument also stage previously untracked (but not
-ignored) files.
-\('git add --update|--all .')."
-  (interactive (progn (unless (or (not (magit-anything-staged-p))
-                                  (magit-confirm 'stage-all-changes))
-                        (user-error "Abort"))
-                      (list current-prefix-arg)))
ignored) files."
  (interactive "P")
  (when (magit-anything-staged-p)
    (unless (magit-confirm 'stage-all-changes)
      (user-error "Abort")))
   (magit-with-toplevel
     (magit-stage-1 (if all "--all" "-u"))))
 
@@ -259,12 +279,13 @@ ignored) files.
 (defun magit-stage-untracked (&optional intent)
   (let* ((section (magit-current-section))
          (files (pcase (magit-diff-scope)
-                  (`file  (list (magit-section-value section)))
-                  (`files (magit-region-values))
                  (`file  (list (oref section value)))
                  (`files (magit-region-values nil t))
                   (`list  (magit-untracked-files))))
          plain repos)
     (dolist (file files)
-      (if (magit-git-repo-p file t)
      (if (and (not (file-symlink-p file))
               (magit-git-repo-p file t))
           (push file repos)
         (push file plain)))
     (magit-wip-commit-before-change files " before stage")
@@ -275,15 +296,32 @@ ignored) files.
         (mapc #'magit-turn-on-auto-revert-mode-if-desired plain)))
     (dolist (repo repos)
       (save-excursion
-        (goto-char (magit-section-start
-                    (magit-get-section
-                     `((file . ,repo) (untracked) (status)))))
-        (magit-submodule-add
-         (let ((default-directory
-                 (file-name-as-directory (expand-file-name repo))))
-           (magit-get "remote" (or (magit-get-remote) "origin") "url"))
-         repo
-         (magit-submodule-read-name repo))))
        (goto-char (oref (magit-get-section
                          `((file . ,repo) (untracked) (status)))
                         start))
        (let* ((topdir (magit-toplevel))
               (package
                (and (equal (bound-and-true-p borg-user-emacs-directory)
                            topdir)
                     (file-name-nondirectory (directory-file-name repo)))))
          (magit-submodule-add
           (let ((default-directory
                   (file-name-as-directory (expand-file-name repo))))
             (or (magit-get "remote" (magit-get-some-remote) "url")
                 (concat (file-name-as-directory ".") repo)))
           repo
           (magit-submodule-read-name-for-path repo package))
          (when package
            (borg--sort-submodule-sections
             (expand-file-name ".gitmodules" topdir))
            (let ((default-directory borg-user-emacs-directory))
              (borg--maybe-absorb-gitdir package))
            (when (and (y-or-n-p
                        (format "Also build and activate `%s' drone?" package))
                       (fboundp 'borg-build)
                       (fboundp 'borg-activate))
              (borg-build package)
              (borg-activate package))))))
     (magit-wip-commit-after-apply files " after stage")))
 
 ;;;; Unstage
@@ -292,19 +330,24 @@ ignored) files.
   "Remove the change at point from the staging area."
   (interactive)
   (--when-let (magit-apply--get-selection)
-    (pcase (list (magit-diff-type) (magit-diff-scope))
-      (`(untracked     ,_) (user-error "Cannot unstage untracked changes"))
-      (`(unstaged      ,_) (user-error "Already unstaged"))
-      (`(staged    region) (magit-apply-region it "--reverse" "--cached"))
-      (`(staged      hunk) (magit-apply-hunk   it "--reverse" "--cached"))
-      (`(staged     hunks) (magit-apply-hunks  it "--reverse" "--cached"))
-      (`(staged      file) (magit-unstage-1 (list (magit-section-value it))))
-      (`(staged     files) (magit-unstage-1 (magit-region-values)))
-      (`(staged      list) (magit-unstage-all))
-      (`(committed     ,_) (if magit-unstage-committed
-                               (magit-reverse-in-index)
-                             (user-error "Cannot unstage committed changes")))
-      (`(undefined     ,_) (user-error "Cannot unstage this change")))))
    (pcase (list (magit-diff-type)
                 (magit-diff-scope)
                 (magit-apply--diff-ignores-whitespace-p))
      (`(untracked     ,_  ,_) (user-error "Cannot unstage untracked changes"))
      (`(unstaged      ,_  ,_) (user-error "Already unstaged"))
      (`(staged    region  ,_) (magit-apply-region it "--reverse" "--cached"))
      (`(staged      hunk  ,_) (magit-apply-hunk   it "--reverse" "--cached"))
      (`(staged     hunks  ,_) (magit-apply-hunks  it "--reverse" "--cached"))
      (`(staged      file   t) (magit-apply-diff   it "--reverse" "--cached"))
      (`(staged     files   t) (magit-apply-diffs  it "--reverse" "--cached"))
      (`(staged      list   t) (magit-apply-diffs  it "--reverse" "--cached"))
      (`(staged      file nil) (magit-unstage-1 (list (oref it value))))
      (`(staged     files nil) (magit-unstage-1 (magit-region-values nil t)))
      (`(staged      list nil) (magit-unstage-all))
      (`(committed     ,_  ,_) (if magit-unstage-committed
                                   (magit-reverse-in-index)
                                 (user-error "Cannot unstage committed changes")))
      (`(undefined     ,_  ,_) (user-error "Cannot unstage this change")))))
 
 ;;;###autoload
 (defun magit-unstage-file (file)
@@ -335,12 +378,13 @@ without requiring confirmation."
 (defun magit-unstage-all ()
   "Remove all changes from the staging area."
   (interactive)
-  (when (or (and (not (magit-anything-unstaged-p))
-                 (not (magit-untracked-files)))
-            (magit-confirm 'unstage-all-changes))
-    (magit-wip-commit-before-change nil " before unstage")
-    (magit-run-git "reset" "HEAD" "--")
-    (magit-wip-commit-after-apply nil " after unstage")))
  (when (or (magit-anything-unstaged-p)
            (magit-untracked-files))
    (unless (magit-confirm 'unstage-all-changes)
      (user-error "Abort")))
  (magit-wip-commit-before-change nil " before unstage")
  (magit-run-git "reset" "HEAD" "--")
  (magit-wip-commit-after-apply nil " after unstage"))
 
 ;;;; Discard
 
@@ -370,8 +414,8 @@ without requiring confirmation."
   (if (eq (magit-diff-type section) 'unstaged)
       (funcall apply section "--reverse")
     (if (magit-anything-unstaged-p
-         nil (if (eq (magit-section-type section) 'file)
-                 (magit-section-value section)
         nil (if (magit-file-section-p section)
                 (oref section value)
                (magit-section-parent-value section)))
         (progn (let ((inhibit-magit-refresh t))
                  (funcall apply section "--reverse" "--cached")
@@ -391,8 +435,8 @@ without requiring confirmation."
     (if (eq (magit-diff-type section) 'unstaged)
         (funcall apply sections "--reverse")
       (if (magit-anything-unstaged-p
-           nil (if (eq (magit-section-type section) 'file)
-                   (magit-section-value section)
           nil (if (magit-file-section-p section)
                   (oref section value)
                  (magit-section-parent-value section)))
           (progn (let ((inhibit-magit-refresh t))
                    (funcall apply sections "--reverse" "--cached")
@@ -409,7 +453,7 @@ without requiring confirmation."
         (status (magit-file-status))
         files delete resurrect rename discard discard-new resolve)
     (dolist (section sections)
-      (let ((file (magit-section-value section)))
      (let ((file (oref section value)))
         (push file files)
         (pcase (cons (pcase type
                        (`staged ?X)
@@ -458,8 +502,9 @@ without requiring confirmation."
     (let ((delete-by-moving-to-trash magit-delete-by-moving-to-trash))
       (dolist (file files)
         (if (memq (magit-diff-type) '(unstaged untracked))
-            (dired-delete-file file dired-recursive-deletes
-                               magit-delete-by-moving-to-trash)
            (progn (dired-delete-file file dired-recursive-deletes
                                      magit-delete-by-moving-to-trash)
                   (dired-clean-up-after-deletion file))
           (pcase (nth 3 (assoc file status))
             (?  (delete-file file t)
                 (magit-call-git "rm" "--cached" "--" file))
@@ -491,7 +536,7 @@ without requiring confirmation."
           (magit-call-git "reset" "--" orig))))))
 
 (defun magit-discard-files--discard (sections new-files)
-  (let ((files (mapcar #'magit-section-value sections)))
  (let ((files (--map (oref it value) sections)))
     (when (magit-confirm-files
            'discard (append files new-files)
            (format "Discard %s changes in" (magit-diff-type)))
@@ -503,14 +548,14 @@ without requiring confirmation."
         (let ((binaries (magit-staged-binary-files)))
           (when binaries
             (setq sections
-                  (--filter (not (member (magit-section-value it) binaries))
                  (--filter (not (member (oref it value) binaries))
                             sections)))
           (cond ((= (length sections) 1)
                  (magit-discard-apply (car sections) 'magit-apply-diff))
                 (sections
                  (magit-discard-apply-n sections 'magit-apply-diffs)))
           (when binaries
-            (let ((modified (magit-modified-files t)))
            (let ((modified (magit-unstaged-files t)))
               (setq binaries (--separate (member it modified) binaries)))
             (when (cadr binaries)
               (magit-call-git "reset" "--" (cadr binaries)))
@@ -559,8 +604,9 @@ so causes the change to be applied to the index as well."
 (defun magit-reverse-files (sections args)
   (-let [(binaries sections)
          (let ((bs (magit-staged-binary-files)))
-           (--separate (member (magit-section-value it) bs) sections))]
-    (when (magit-confirm-files 'reverse (mapcar #'magit-section-value sections))
           (--separate (member (oref it value) bs)
                       sections))]
    (when (magit-confirm-files 'reverse (--map (oref it value) sections))
       (if (= (length sections) 1)
           (magit-reverse-apply (car sections) 'magit-apply-diff args)
         (magit-reverse-apply sections 'magit-apply-diffs args)))
