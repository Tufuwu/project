diff --git a/lisp/magit-commit.el b/lisp/magit-commit.el
index 513c5c7..99613d1 100644
--- a/lisp/magit-commit.el
++ b/lisp/magit-commit.el
@@ -1,6 +1,6 @@
 ;;; magit-commit.el --- create Git commits  -*- lexical-binding: t -*-
 
-;; Copyright (C) 2008-2017  The Magit Project Contributors
;; Copyright (C) 2008-2018  The Magit Project Contributors
 ;;
 ;; You should have received a copy of the AUTHORS.md file which
 ;; lists all contributors.  If not, see http://magit.vc/authors.
@@ -100,12 +100,13 @@ an error while using those is harder to recover from."
     :switches ((?a "Stage all modified and deleted files"   "--all")
                (?e "Allow empty commit"                     "--allow-empty")
                (?v "Show diff of changes to be committed"   "--verbose")
-               (?n "Bypass git hooks"                       "--no-verify")
               (?h "Disable hooks"                          "--no-verify")
                (?s "Add Signed-off-by line"                 "--signoff")
                (?R "Claim authorship and reset author date" "--reset-author"))
     :options  ((?A "Override the author"  "--author=")
                (?S "Sign using gpg"       "--gpg-sign=" magit-read-gpg-secret-key)
-               (?C "Reuse commit message" "--reuse-message="))
               (?C "Reuse commit message" "--reuse-message="
                   magit-read-reuse-message))
     :actions  ((?c "Commit"         magit-commit)
                (?e "Extend"         magit-commit-extend)
                (?f "Fixup"          magit-commit-fixup)
@@ -142,18 +143,28 @@ an error while using those is harder to recover from."
                         (car (or magit-gpg-secret-key-hist keys)))
                        " "))))
 
(defun magit-read-reuse-message (prompt &optional default)
  (magit-completing-read prompt (magit-list-refnames)
                         nil nil nil 'magit-revision-history
                         (or default
                             (and (magit-rev-verify "ORIG_HEAD")
                                  "ORIG_HEAD"))))

 ;;; Commands
 
 ;;;###autoload
 (defun magit-commit (&optional args)
-  "Create a new commit on HEAD.
-With a prefix argument amend to the commit at HEAD instead.
  "Create a new commit on `HEAD'.
With a prefix argument, amend to the commit at `HEAD' instead.
 \n(git commit [--amend] ARGS)"
   (interactive (if current-prefix-arg
                    (list (cons "--amend" (magit-commit-arguments)))
                  (list (magit-commit-arguments))))
  (when (member "--all" args)
    (setq this-command 'magit-commit-all))
   (when (setq args (magit-commit-assert args))
-    (magit-run-git-with-editor "commit" args)))
    (let ((default-directory (magit-toplevel)))
      (magit-run-git-with-editor "commit" args))))
 
 ;;;###autoload
 (defun magit-commit-amend (&optional args)
@@ -250,6 +261,15 @@ depending on the value of option `magit-commit-squash-confirm'."
 (defun magit-commit-squash-internal
     (option commit &optional args rebase edit confirmed)
   (-when-let (args (magit-commit-assert args t))
    (when commit
      (when (and rebase (not (magit-rev-ancestor-p commit "HEAD")))
        (magit-read-char-case
            (format "%s isn't an ancestor of HEAD.  " commit) nil
          (?c "[c]reate without rebasing" (setq rebase nil))
          (?s "[s]elect other"            (setq commit nil))
          (?a "[a]bort"                   (user-error "Quit")))))
    (when commit
      (setq commit (magit-rebase-interactive-assert commit)))
     (if (and commit
              (or confirmed
                  (not (or rebase
@@ -266,16 +286,19 @@ depending on the value of option `magit-commit-squash-confirm'."
                  (-remove-first
                   (apply-partially #'string-match-p "\\`--gpg-sign=")
                   args)))
-            (magit-run-git-with-editor "commit" args)))
            (magit-run-git-with-editor "commit" args))
          t) ; The commit was created; used by below lambda.
       (magit-log-select
-        `(lambda (commit)
-           (magit-commit-squash-internal ,option commit ',args ,rebase ,edit t)
-           ,@(when rebase
-               `((magit-rebase-interactive-1 commit
-                     (list "--autosquash" "--autostash")
-                   "" "true"))))
        (lambda (commit)
          (when (and (magit-commit-squash-internal option commit args
                                                   rebase edit t)
                     rebase)
            (magit-rebase-interactive-1 commit
                (list "--autosquash" "--autostash")
              "" "true" t)))
         (format "Type %%p on a commit to %s into it,"
-                (substring option 2)))
                (substring option 2))
        nil nil (list "--graph"))
       (when magit-commit-show-diff
         (let ((magit-display-buffer-noselect t))
           (apply #'magit-diff-staged nil (magit-diff-arguments)))))))
@@ -316,24 +339,31 @@ depending on the value of option `magit-commit-squash-confirm'."
 ;;; Pending Diff
 
 (defun magit-commit-diff ()
-  (-when-let (fn (and git-commit-mode
-                      magit-commit-show-diff
-                      (pcase last-command
-                        (`magit-commit
-                         (apply-partially 'magit-diff-staged nil))
-                        (`magit-commit-amend  'magit-diff-while-amending)
-                        (`magit-commit-reword 'magit-diff-while-amending))))
  (when (and git-commit-mode magit-commit-show-diff)
     (-when-let (diff-buffer (magit-mode-get-buffer 'magit-diff-mode))
       ;; This window just started displaying the commit message
       ;; buffer.  Without this that buffer would immediately be
       ;; replaced with the diff buffer.  See #2632.
       (unrecord-window-buffer nil diff-buffer))
     (condition-case nil
-        (let ((magit-inhibit-save-previous-winconf 'unset)
        (let ((args (car (magit-diff-arguments)))
              (magit-inhibit-save-previous-winconf 'unset)
               (magit-display-buffer-noselect t)
               (inhibit-quit nil))
           (message "Diffing changes to be committed (C-g to abort diffing)")
-          (funcall fn (car (magit-diff-arguments))))
          (-if-let (fn (cl-case last-command
                         (magit-commit
                          (apply-partially 'magit-diff-staged nil))
                         (magit-commit-all
                          (apply-partially 'magit-diff-working-tree nil))
                         ((magit-commit-amend
                           magit-commit-reword
                           magit-rebase-reword-commit)
                          'magit-diff-while-amending)))
              (funcall fn args)
            (if (magit-anything-staged-p)
                (magit-diff-staged nil args)
              (magit-diff-while-amending args))))
       (quit))))
 
 ;; Mention `magit-diff-while-committing' because that's
@@ -366,8 +396,8 @@ actually insert the entry."
         (log (magit-commit-message-buffer)) buf pos)
     (save-window-excursion
       (call-interactively #'magit-diff-visit-file)
-      (setq buf (current-buffer)
-            pos (point)))
      (setq buf (current-buffer))
      (setq pos (point)))
     (unless log
       (unless (magit-commit-assert nil)
         (user-error "Abort"))
