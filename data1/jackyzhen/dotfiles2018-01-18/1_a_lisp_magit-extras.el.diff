diff --git a/lisp/magit-extras.el b/lisp/magit-extras.el
index ce82b5b..760f4f8 100644
--- a/lisp/magit-extras.el
++ b/lisp/magit-extras.el
@@ -1,6 +1,6 @@
 ;;; magit-extras.el --- additional functionality for Magit  -*- lexical-binding: t -*-
 
-;; Copyright (C) 2008-2017  The Magit Project Contributors
;; Copyright (C) 2008-2018  The Magit Project Contributors
 ;;
 ;; You should have received a copy of the AUTHORS.md file which
 ;; lists all contributors.  If not, see http://magit.vc/authors.
@@ -51,12 +51,12 @@
   "Run `git gui' for the current git repository."
   (interactive)
   (magit-with-toplevel
-    (call-process magit-git-executable nil 0 nil "gui")))
    (magit-process-file magit-git-executable nil 0 nil "gui")))
 
 ;;;###autoload
 (defun magit-run-git-gui-blame (commit filename &optional linenum)
   "Run `git gui blame' on the given FILENAME and COMMIT.
-Interactively run it for the current file and the HEAD, with a
Interactively run it for the current file and the `HEAD', with a
 prefix or when the current file cannot be determined let the user
 choose.  When the current buffer is visiting FILENAME instruct
 blame to center around the line point is on."
@@ -65,15 +65,15 @@ blame to center around the line point is on."
      (when (or current-prefix-arg
                (not (setq revision "HEAD"
                           filename (magit-file-relative-name nil 'tracked))))
-       (setq revision (magit-read-branch-or-commit "Blame from revision")
-             filename (magit-read-file-from-rev revision "Blame file")))
       (setq revision (magit-read-branch-or-commit "Blame from revision"))
       (setq filename (magit-read-file-from-rev revision "Blame file")))
      (list revision filename
            (and (equal filename
                        (ignore-errors
                          (magit-file-relative-name buffer-file-name)))
                 (line-number-at-pos)))))
   (magit-with-toplevel
-    (apply #'call-process magit-git-executable nil 0 nil "gui" "blame"
    (apply #'magit-process-file magit-git-executable nil 0 nil "gui" "blame"
            `(,@(and linenum (list (format "--line=%d" linenum)))
              ,commit
              ,filename))))
@@ -82,19 +82,19 @@ blame to center around the line point is on."
 (defun magit-run-gitk ()
   "Run `gitk' in the current repository."
   (interactive)
-  (call-process magit-gitk-executable nil 0))
  (magit-process-file magit-gitk-executable nil 0))
 
 ;;;###autoload
 (defun magit-run-gitk-branches ()
   "Run `gitk --branches' in the current repository."
   (interactive)
-  (call-process magit-gitk-executable nil 0 nil "--branches"))
  (magit-process-file magit-gitk-executable nil 0 nil "--branches"))
 
 ;;;###autoload
 (defun magit-run-gitk-all ()
   "Run `gitk --all' in the current repository."
   (interactive)
-  (call-process magit-gitk-executable nil 0 nil "--all"))
  (magit-process-file magit-gitk-executable nil 0 nil "--all"))
 
 ;;; Emacs Tools
 
@@ -124,7 +124,7 @@ like pretty much every other keymap:
 (defun magit-dired-jump (&optional other-window)
   "Visit file at point using Dired.
 With a prefix argument, visit in another window.  If there
-is no file at point then instead visit `default-directory'."
is no file at point, then instead visit `default-directory'."
   (interactive "P")
   (dired-jump other-window (-if-let (file (magit-file-at-point))
                                (progn (setq file (expand-file-name file))
@@ -133,6 +133,28 @@ is no file at point then instead visit `default-directory'."
                                         file))
                              (concat default-directory "/."))))
 
;;;###autoload
(defun magit-dired-log (&optional follow)
  "Show log for all marked files, or the current file."
  (interactive "P")
  (-if-let (topdir (magit-toplevel default-directory))
      (let ((args (car (magit-log-arguments)))
            (files (dired-get-marked-files nil nil #'magit-file-tracked-p)))
        (unless files
          (user-error "No marked file is being tracked by Git"))
        (when (and follow
                   (not (member "--follow" args))
                   (not (cdr files)))
          (push "--follow" args))
        (magit-mode-setup-internal
         #'magit-log-mode
         (list (list (or (magit-get-current-branch) "HEAD"))
               args
               (let ((default-directory topdir))
                 (mapcar #'file-relative-name files)))
         magit-log-buffer-file-locked))
    (magit--not-inside-repository-error)))

 ;;;###autoload
 (defun magit-do-async-shell-command (file)
   "Open FILE with `dired-do-async-shell-command'.
@@ -145,6 +167,59 @@ Interactively, open the file at point."
    (dired-read-shell-command "& on %s: " current-prefix-arg (list file))
    nil (list file)))
 
;;; Shift Selection

(defun magit--turn-on-shift-select-mode-p ()
  (and shift-select-mode
       this-command-keys-shift-translated
       (not mark-active)
       (not (eq (car-safe transient-mark-mode) 'only))))

;;;###autoload
(defun magit-previous-line (&optional arg try-vscroll)
  "Like `previous-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects an
area that is larger than the region.  This causes `previous-line'
when invoked while holding the shift key to move up one line and
thereby select two lines.  When invoked inside a hunk body this
command does not move point on the first invocation and thereby
it only selects a single line.  Which inconsistency you prefer
is a matter of preference."
  (declare (interactive-only
            "use `forward-line' with negative argument instead."))
  (interactive "p\np")
  (unless arg (setq arg 1))
  (let ((stay (or (magit-diff-inside-hunk-body-p)
                  (magit-section-position-in-heading-p))))
    (if (and stay (= arg 1) (magit--turn-on-shift-select-mode-p))
        (push-mark nil nil t)
      (with-no-warnings
        (handle-shift-selection)
        (previous-line (if stay (max (1- arg) 1) arg) try-vscroll)))))

;;;###autoload
(defun magit-next-line (&optional arg try-vscroll)
  "Like `next-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects
an area that is larger than the region.  This causes `next-line'
when invoked while holding the shift key to move down one line
and thereby select two lines.  When invoked inside a hunk body
this command does not move point on the first invocation and
thereby it only selects a single line.  Which inconsistency you
prefer is a matter of preference."
  (declare (interactive-only forward-line))
  (interactive "p\np")
  (unless arg (setq arg 1))
  (let ((stay (or (magit-diff-inside-hunk-body-p)
                  (magit-section-position-in-heading-p))))
    (if (and stay (= arg 1) (magit--turn-on-shift-select-mode-p))
        (push-mark nil nil t)
      (with-no-warnings
        (handle-shift-selection)
        (next-line (if stay (max (1- arg) 1) arg) try-vscroll)))))

 ;;; Clean
 
 ;;;###autoload
@@ -229,8 +304,8 @@ a position in a file-visiting buffer."
   (let (buf pos)
     (save-window-excursion
       (call-interactively #'magit-diff-visit-file)
-      (setq buf (current-buffer)
-            pos (point)))
      (setq buf (current-buffer))
      (setq pos (point)))
     (save-excursion
       (with-current-buffer buf
         (goto-char pos)
@@ -247,5 +322,19 @@ on a position in a file-visiting buffer."
                           (prompt-for-change-log-name))))
   (magit-add-change-log-entry whoami file-name t))
 
;;; Miscellaneous

;;;###autoload
(defun magit-abort-dwim ()
  "Abort current operation.
Depending on the context, this will abort a merge, a rebase, a
patch application, a cherry-pick, a revert, or a bisect."
  (interactive)
  (cond ((magit-merge-state)             (magit-merge-abort))
        ((magit-rebase-in-progress-p)    (magit-rebase-abort))
        ((magit-am-in-progress-p)        (magit-am-abort))
        ((magit-sequencer-in-progress-p) (magit-sequencer-abort))
        ((magit-bisect-in-progress-p)    (magit-bisect-reset))))

 (provide 'magit-extras)
 ;;; magit-extras.el ends here
