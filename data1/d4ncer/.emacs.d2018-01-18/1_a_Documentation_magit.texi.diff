diff --git a/Documentation/magit.texi b/Documentation/magit.texi
index d7623de9..ddfcb14d 100644
--- a/Documentation/magit.texi
++ b/Documentation/magit.texi
@@ -1,24 +1,14 @@
 \input texinfo    @c -*- texinfo -*-
 @c %**start of header
-@setfilename ./magit.info
@setfilename magit.info
 @settitle Magit User Manual
 @documentencoding UTF-8
 @documentlanguage en
 @c %**end of header
 
 @copying
-@ifnottex
-Magit is an interface to the version control system Git, implemented
-as an Emacs package.  Magit aspires to be a complete Git porcelain.
-While we cannot (yet) claim that Magit wraps and improves upon each
-and every Git command, it is complete enough to allow even experienced
-Git users to perform almost all of their daily version control tasks
-directly from within Emacs.  While many fine Git clients exist, only
-Magit and Git itself deserve to be called porcelains.
-@end ifnottex
-
 @quotation
-Copyright (C) 2015-2017 Jonas Bernoulli <jonas@@bernoul.li>
Copyright (C) 2015-2018 Jonas Bernoulli <jonas@@bernoul.li>
 
 You can redistribute this document and/or modify it under the terms
 of the GNU General Public License as published by the Free Software
@@ -40,7 +30,7 @@ General Public License for more details.
 @finalout
 @titlepage
 @title Magit User Manual
-@subtitle for version 2.10
@subtitle for version 2.11.0 (2.11.0-411-g73ea37afb+1)
 @author Jonas Bernoulli
 @page
 @vskip 0pt plus 1filll
@@ -52,7 +42,31 @@ General Public License for more details.
 @ifnottex
 @node Top
 @top Magit User Manual
-@insertcopying

Magit is an interface to the version control system Git, implemented
as an Emacs package.  Magit aspires to be a complete Git porcelain.
While we cannot (yet) claim that Magit wraps and improves upon each
and every Git command, it is complete enough to allow even experienced
Git users to perform almost all of their daily version control tasks
directly from within Emacs.  While many fine Git clients exist, only
Magit and Git itself deserve to be called porcelains.

@noindent
This manual is for Magit version 2.11.0 (2.11.0-411-g73ea37afb+1).

@quotation
Copyright (C) 2015-2018 Jonas Bernoulli <jonas@@bernoul.li>

You can redistribute this document and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any
later version.

This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.
@end quotation
 @end ifnottex
 
 @menu
@@ -67,6 +81,7 @@ General Public License for more details.
 * Customizing::
 * Plumbing::
 * FAQ::
* Debugging Tools::
 * Keystroke Index::
 * Command Index::
 * Function Index::
@@ -75,22 +90,18 @@ General Public License for more details.
 @detailmenu
 --- The Detailed Node Listing ---
 
-
 Installation
 
 * Installing from an Elpa Archive::
 * Installing from the Git Repository::
 * Post-Installation Tasks::
 
-
-
-
 Interface Concepts
 
 * Modes and Buffers::
 * Sections::
 * Popup Buffers and Prefix Commands::
-* Completion and Confirmation::
* Completion, Confirmation and the Selection: Completion Confirmation and the Selection. 
 * Running Git::
 
 Modes and Buffers
@@ -112,15 +123,25 @@ Sections
 * Section Options::
 
 
Completion, Confirmation and the Selection

* Action Confirmation::
* Completion and Confirmation::
* The Selection::
* The hunk-internal region::
* Support for Completion Frameworks::
* Additional Completion Options::
 
 
 Running Git
 
 * Viewing Git Output::
* Git Process Status::
 * Running Git Manually::
 * Git Executable::
 * Global Git Arguments::
 

 Inspecting
 
 * Status Buffer::
@@ -137,10 +158,10 @@ Status Buffer
 
 * Status Sections::
 * Status Header Sections::
* Status Module Sections::
 * Status Options::
 
 
-
 Logging
 
 * Refreshing Logs::
@@ -159,11 +180,11 @@ Diffing
 * Revision Buffer::
 
 
-
 References Buffer
 
 * References Sections::
 

 Manipulating
 
 * Repository Setup::
@@ -178,13 +199,11 @@ Manipulating
 * Resetting::
 * Stashing::
 
-
 Staging and Unstaging
 
 * Staging from File-Visiting Buffers::
 
 
-
 Committing
 
 * Initiating a Commit::
@@ -198,8 +217,6 @@ Branching
 * The Branch Config Popup::
 
 
-
-
 Rebasing
 
 * Editing Rebase Sequences::
@@ -210,6 +227,7 @@ Cherry Picking
 
 * Reverting::
 

 Transferring
 
 * Remotes::
@@ -219,6 +237,10 @@ Transferring
 * Creating and Sending Patches::
 * Applying Patches::
 
Remotes

* The Remote Popup::
* The Remote Config Popup::
 
 
 Miscellaneous
@@ -232,24 +254,23 @@ Miscellaneous
 * Minor Mode for Buffers Visiting Files::
 * Minor Mode for Buffers Visiting Blobs::
 
-
-
 Submodules
 
 * Listing Submodules::
 * Submodule Popup::
 

 Customizing
 
 * Per-Repository Configuration::
 * Essential Settings::
 
-
 Essential Settings
 
 * Safety::
 * Performance::
 

 Plumbing
 
 * Calling Git::
@@ -270,12 +291,11 @@ Section Plumbing
 * Matching Sections::
 
 
-
 Conventions
 
-* Confirmation and Completion::
 * Theming Faces::
 

 FAQ
 
 * FAQ - How to @dots{}?::
@@ -302,10 +322,11 @@ FAQ - Issues and Errors
 * Point is wrong in the @code{COMMIT_EDITMSG} buffer::
 * The mode-line information isn't always up-to-date::
 * Emacs 24.5 hangs when loading Magit: Emacs 245 hangs when loading Magit. 
-@end detailmenu
-@end menu
* A branch and tag sharing the same name breaks SOMETHING::
 
 
@end detailmenu
@end menu
 
 @node Introduction
 @chapter Introduction
@@ -357,8 +378,8 @@ gotten their hands on Magit earlier.
 While one has to know the basic features of Emacs to be able to make
 full use of Magit, acquiring just enough Emacs skills doesn't take
 long and is worth it, even for users who prefer other editors.  Vim
-users are advised to give @uref{https://bitbucket.org/lyro/evil/wiki/Home,Evil}, the "Extensible VI Layer for Emacs",
-and @uref{https://github.com/syl20bnr/spacemacs,Spacemacs}, an "Emacs starter-kit focused on Evil" a try.
users are advised to give @uref{https://bitbucket.org/lyro/evil/wiki/Home, Evil}, the "Extensible VI Layer for Emacs",
and @uref{https://github.com/syl20bnr/spacemacs, Spacemacs}, an "Emacs starter-kit focused on Evil" a try.
 
 Magit provides a consistent and efficient Git porcelain.  After a
 short learning period, you will be able to perform most of your daily
@@ -443,21 +464,21 @@ using:
 M-x package-install RET magit RET
 @end example
 
-Now see @ref{Post-Installation Tasks,Post-Installation Tasks}.
Now see @ref{Post-Installation Tasks}.
 
 @node Installing from the Git Repository
 @section Installing from the Git Repository
 
-Magit depends on the @code{dash} and @code{with-editor} library which are available
-from Melpa and Melpa-Stable.  Install them using @code{M-x package-install
-RET <package> RET}.  Of course you may also install them manually from
-their development repository, but I won't cover that here.
Magit depends on the @code{dash}, @code{magit-popup}, @code{ghub} and @code{with-editor} libraries
which are available from Melpa and Melpa-Stable.  Install them using @code{M-x
package-install RET <package> RET}.  Of course you may also install
them manually from their development repository.
 
-(An older release of Magit is also available from Marmalade, but no
-new versions will be uploaded in the future.  Marmalade's maintainer
-has stopped responding to requests from package maintainers who are
-having difficulties or require him to create an account so that they
-can upload their packages in the first place.)
(An ancient release of Magit is also available from Marmalade, but
no new versions will be uploaded.  Marmalade is unmaintained ¡ª its
maintainer has stopped responding to support requests from package
authors or even just to create new accounts so that new authors can
upload their packages in the first place.)
 
 Then clone the Magit repository:
 
@@ -472,14 +493,16 @@ Then compile the libraries and generate the info manuals:
 $ make
 @end example
 
-If you haven't installed @code{dash} and @code{with-editor} using Elpa or at
-@code{/path/to/magit/../<package>}, then you have to tell @code{make} where to find
-them.  To do so create @code{/path/to/magit/config.mk} with the following
-content before running @code{make}:
If you haven't installed @code{dash}, @code{magit-popup}, @code{ghub} and @code{with-editor} from
Melpa or at @code{/path/to/magit/../<package>}, then you have to tell @code{make} where
to find them.  To do so create the file @code{/path/to/magit/config.mk} with the
following content before running @code{make}:
 
 @example
 LOAD_PATH  = -L /path/to/magit/lisp
 LOAD_PATH += -L /path/to/dash
LOAD_PATH += -L /path/to/magit-popup
LOAD_PATH += -L /path/to/ghub
 LOAD_PATH += -L /path/to/with-editor
 @end example
 
@@ -521,7 +544,7 @@ At times it might be necessary to run @code{make clean all} instead.
 
 To view all available targets use @code{make help}.
 
-Now see @ref{Post-Installation Tasks,Post-Installation Tasks}.
Now see @ref{Post-Installation Tasks}.
 
 @node Post-Installation Tasks
 @section Post-Installation Tasks
@@ -542,14 +565,17 @@ Magit 2.8.0, Git 2.10.2, Emacs 25.1.1, gnu/linux
 @end example
 
 Then you might also want to read about options that many users likely
-want to customize.  See @ref{Essential Settings,Essential Settings}.
want to customize.  See @ref{Essential Settings}.
 
 To be able to follow cross references to Git manpages found in this
 manual, you might also have to manually install the @code{gitman} info manual,
 or advice @code{Info-follow-nearest-node} to instead open the actual manpage.
-See @ref{How to install the gitman info manual?,How to install the gitman info manual?}.
See @ref{How to install the gitman info manual?}.
 
-If you are completely new to Magit then see @ref{Getting Started,Getting Started}.
If you are completely new to Magit then see @ref{Getting Started}.

If you run into problems, then please see the @ref{FAQ}.  Also see the
@ref{Debugging Tools}.
 
 And last but not least please consider making a donation, to ensure
 that I can keep working on Magit.  See @uref{https://magit.vc/donations}.
@@ -657,7 +683,7 @@ command too:
 
 In the same vein, you might also want to enable @code{global-magit-file-mode}
 to get some more Magit key bindings in regular file-visiting buffers
-(see @ref{Minor Mode for Buffers Visiting Files,Minor Mode for Buffers Visiting Files}).
(see @ref{Minor Mode for Buffers Visiting Files}).
 
 It is not necessary that you do so now, but if you stick with Magit,
 then it is highly recommended that you read the next section too.
@@ -669,7 +695,7 @@ then it is highly recommended that you read the next section too.
 * Modes and Buffers::
 * Sections::
 * Popup Buffers and Prefix Commands::
-* Completion and Confirmation::
* Completion, Confirmation and the Selection: Completion Confirmation and the Selection. 
 * Running Git::
 @end menu
 
@@ -896,10 +922,18 @@ empty string.
 
 The top-level directory of the working tree of the repository, or
 if @code{magit-uniquify-buffer-names} is non-nil an abbreviation of that.


@item
@code{%T}

Like @code{%t}, but append an asterisk if and only if
@code{magit-uniquify-buffer-names} is nil.
 @end itemize
-The value should always contain either @code{%m} or @code{%M}, @code{%v} or @code{%V}, and @code{%t}.

The value should always contain @code{%m} or @code{%M}, @code{%v} or @code{%V}, and @code{%t} or @code{%T}.
 If @code{magit-uniquify-buffer-names} is non-nil, then the value must end
-with @code{%t}.
with @code{%t} or @code{%T} (see issue #2841).
 @end defopt
 
 @defopt magit-uniquify-buffer-names
@@ -1289,8 +1323,7 @@ Move to the beginning of the parent of the current section.
 @end table
 
 The above commands all call the hook @code{magit-section-movement-hook}.
-And, except for the second, the below functions are all members of
-that hook's default value.
Any of the functions listed below can be used as members of this hook.
 
 @defvar magit-section-movement-hook
 
@@ -1302,7 +1335,7 @@ arriving at the destination.
 
 This hook function ensures that the beginning of the current section
 is visible, provided it is a @code{hunk} section.  Otherwise, it does
-nothing.
nothing.  This function is a member of the hook's default value.
 @end defun
 
 @defun magit-section-set-window-start
@@ -1317,14 +1350,16 @@ variant in turn.
 
 This hook function only has an effect in log buffers, and @code{point} is
 on the "show more" section.  If that is the case, then it doubles
-the number of commits that are being shown.
the number of commits that are being shown.  This function is a
member of the hook's default value.
 @end defun
 
 @defun magit-log-maybe-update-revision-buffer
 
 When moving inside a log buffer, then this function updates the
 revision buffer, provided it is already being displayed in another
-window of the same frame.
window of the same frame.  This function is a member of the hook's
default value.
 @end defun
 
 @defun magit-log-maybe-update-blob-buffer
@@ -1476,6 +1511,16 @@ then the previous visibility is preserved. The initial visibility of
 certain sections can also be overwritten using the hook
 @code{magit-section-set-visibility-hook}.
 
@defopt magit-section-cache-visibility-types

This option controls for which sections the previous visibility
state should be restored if a section disappears and later appears
again.  The value is a list of section types.

This requires that @code{magit-section-cached-visibility} is a member of
@code{magit-section-set-visibility-hook}.
@end defopt

 @defvar magit-section-set-visibility-hook
 
 This hook is run when first creating a buffer and also when
@@ -1615,75 +1660,483 @@ you should setup a global binding:
 (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
 @end lisp
 
Most popups set their initial arguments according to the corresponding
@code{magit-*-arguments} variable.  Two popups, the log and diff popups
(see @ref{Logging} and @ref{Diffing}), may behave a bit differently, depending
on the value of @code{magit-use-sticky-arguments}.

@defopt magit-use-sticky-arguments

This option controls how diff and log commands reuse arguments from
existing buffers.

When @code{t} (the default value), the log or diff popup reuses the
arguments from the current repository's log or diff buffer,
respectively.  When no log or diff buffer exists for the current
repository, these popups use the default value of
@code{magit-log-arguments} or @code{magit-diff-arguments}.

When @code{current}, log and diff popups will only reuse the arguments if
the current buffer is derived from @code{magit-log-mode} or
@code{magit-diff-mode}, respectively.

When @code{nil}, the default value of @code{magit-log-arguments} or
@code{magit-diff-arguments} is always used.
@end defopt

@node Completion Confirmation and the Selection
@section Completion, Confirmation and the Selection

@menu
* Action Confirmation::
* Completion and Confirmation::
* The Selection::
* The hunk-internal region::
* Support for Completion Frameworks::
* Additional Completion Options::
@end menu

@node Action Confirmation
@subsection Action Confirmation

By default many actions that could potentially lead to data loss have
to be confirmed.  This includes many very common actions, so this can
quickly become annoying.  Many of these actions can be undone and if
you have thought about how to undo certain mistakes, then it should
be safe to disable confirmation for the respective actions.

The option @code{magit-no-confirm} can be used to tell Magit to perform
certain actions without the user having to confirm them.  Note that
while this option can only be used to disable confirmation for a
specific set of actions, the next section explains another way of
telling Magit to ask fewer questions.

@defopt magit-no-confirm

The value of this option is a list of symbols, representing actions
that do not have to be confirmed by the user before being carried
out.

By default many potentially dangerous commands ask the user for
confirmation.  Each of the below symbols stands for an action which,
when invoked unintentionally or without being fully aware of the
consequences, could lead to tears.  In many cases there are several
commands that perform variations of a certain action, so we don't
use the command names but more generic symbols.

@itemize
@item
Applying changes:

@itemize
@item
@code{discard} Discarding one or more changes (i.e. hunks or the
complete diff for a file) loses that change, obviously.


@item
@code{reverse} Reverting one or more changes can usually be undone by
reverting the reversion.


@item
@code{stage-all-changes}, @code{unstage-all-changes} When there are both
staged and unstaged changes, then un-/staging everything would
destroy that distinction.  Of course that also applies when
un-/staging a single change, but then less is lost and one does
that so often that having to confirm every time would be
unacceptable.
@end itemize


@item
Files:

@itemize
@item
@code{delete} When a file that isn't yet tracked by Git is deleted,
then it is completely lost, not just the last changes.  Very
dangerous.


@item
@code{trash} Instead of deleting a file it can also be move to the
system trash.  Obviously much less dangerous than deleting it.

Also see option @code{magit-delete-by-moving-to-trash}.


@item
@code{resurrect} A deleted file can easily be resurrected by "deleting"
the deletion, which is done using the same command that was used
to delete the same file in the first place.


@item
@code{untrack} Untracking a file can be undone by tracking it again.


@item
@code{rename} Renaming a file can easily be undone.
@end itemize


@item
Sequences:

@itemize
@item
@code{reset-bisect} Aborting (known to Git as "resetting") a bisect
operation loses all information collected so far.


@item
@code{abort-rebase} Aborting a rebase throws away all already modified
commits, but it's possible to restore those from the reflog.


@item
@code{abort-merge} Aborting a merge throws away all conflict
resolutions which have already been carried out by the user.


@item
@code{merge-dirty} Merging with a dirty worktree can make it hard to go
back to the state before the merge was initiated.
@end itemize


@item
References:

@itemize
@item
@code{delete-unmerged-branch} Once a branch has been deleted, it can
only be restored using low-level recovery tools provided by Git.
And even then the reflog is gone.  The user always has to
confirm the deletion of a branch by accepting the default choice
(or selecting another branch), but when a branch has not been
merged yet, also make sure the user is aware of that.


@item
@code{delete-pr-branch} When deleting a branch that was created from a
pull request and if no other branches still exist on that
remote, then `magit-branch-delete' offers to delete the remote
as well.  This should be safe because it only happens if no
other refs exist in the remotes namespace, and you can recreate
the remote if necessary.


@item
@code{drop-stashes} Dropping a stash is dangerous because Git stores
stashes in the reflog.  Once a stash is removed, there is no
going back without using low-level recovery tools provided by
Git.  When a single stash is dropped, then the user always has
to confirm by accepting the default (or selecting another).
This action only concerns the deletion of multiple stashes at
once.
@end itemize


@item
Various:

@itemize
@item
@code{kill-process} There seldom is a reason to kill a process.
@end itemize


@item
Global settings:

Instead of adding all of the above symbols to the value of this
option, you can also set it to the atom `t', which has the same
effect as adding all of the above symbols.  Doing that most
certainly is a bad idea, especially because other symbols might be
added in the future.  So even if you don't want to be asked for
confirmation for any of these actions, you are still better of
adding all of the respective symbols individually.

When @code{magit-wip-before-change-mode} is enabled, then the following
actions can be undone fairly easily: @code{discard}, @code{reverse},
@code{stage-all-changes}, and @code{unstage-all-changes}.  If and only if
this mode is enabled, then @code{safe-with-wip} has the same effect as
adding all of these symbols individually.
@end itemize
@end defopt

 @node Completion and Confirmation
-@section Completion and Confirmation
@subsection Completion and Confirmation

Many Magit commands ask the user to select from a list of possible
things to act on, while offering the most likely choice as the
default.  For many of these commands the default is the thing at
point, provided that it actually is a valid thing to act on.  For
many commands that act on a branch, the current branch serves as
the default if there is no branch at point.

These commands combine asking for confirmation and asking for a target
to act on into a single action.  The user can confirm the default
target using @code{RET} or abort using @code{C-g}.  This is similar to a @code{y-or-n-p}
prompt, but the keys to confirm or abort differ.

At the same time the user is also given the opportunity to select
another target, which is useful because for some commands and/or in
some situations you might want to select the action before selecting
the target by moving to it.

However you might find that for some commands you always want to use
the default target, if any, or even that you want the command to act
on the default without requiring any confirmation at all.  The option
@code{magit-dwim-selection} can be used to configure certain commands to that
effect.
 
-Many commands read a value from the user.  By default this is done
-using the built-in function @code{completing-read}, but Magit can instead use
-another completion framework.
Note that when the region is active then many commands act on the
things that are selected using a mechanism based on the region, in
many cases after asking for confirmation.  This region-based mechanism
is called the "selection" and is described in detail in the next
section.  When a selection exists that is valid for the invoked
command, then that command never offers to act on something else, and
whether it asks for confirmation is not controlled by this option.
 
-@defopt magit-completing-read-function
Also note that Magit asks for confirmation of certain actions that are
not coupled with completion (or the selection).  Such dialogs are also
not affected by this option and are described in the previous section.
 
-The value of this variable is the function used to perform
-completion.  Because functions @emph{intended} to replace @code{completing-read}
-often are not fully compatible drop-in replacements, and also
-because Magit expects them to add the default choice to the prompt
-themselves, such functions should not be used directly.  Instead a
-wrapper function has to be used.
@defopt magit-dwim-selection
 @end defopt
 
-Currently only the real @code{completing-read} and @uref{http://www.emacswiki.org/emacs/InteractivelyDoThings,Ido} are fully supported.
-More frameworks will be supported in the future.
This option can be used to tell certain commands to use the thing
at point instead of asking the user to select a candidate to act
on, with or without confirmation.

The value has the form @code{((COMMAND nil|PROMPT DEFAULT)...)}.

@itemize
@item
COMMAND is the command that should not prompt for a choice.
To have an effect, the command has to use the function
@code{magit-completing-read} or a utility function which in turn uses
that function.


@item
If the command uses @code{magit-completing-read} multiple times, then
PROMPT can be used to only affect one of these uses.  PROMPT, if
non-nil, is a regular expression that is used to match against
the PROMPT argument passed to @code{magit-completing-read}.


@item
DEFAULT specifies how to use the default.  If it is @code{t}, then
the DEFAULT argument passed to @code{magit-completing-read} is used
without confirmation.  If it is @code{ask}, then the user is given
a chance to abort.  DEFAULT can also be @code{nil}, in which case the
entry has no effect.
@end itemize

@node The Selection
@subsection The Selection

If the region is active, then many Magit commands act on the things
that are selected using a mechanism based on the region instead of one
single thing.  When the region is not active, then these commands act
on the thing at point or read a single thing to act on.  This is
described in the previous section ¡ª this section only covers how
multiple things are selected, how that is visualized, and how certain
commands behave when that is the case.

Magit's mechanism for selecting multiple things, or rather sections
that represent these things, is based on the Emacs region, but the
area that Magit considers to be selected is typically larger than the
region and additional restrictions apply.

Magit makes a distinction between a region that qualifies as forming a
valid Magit selection and a region that does not.  If the region does
not qualify, then it is displayed as it is in other Emacs buffers.  If
the region does qualify as a Magit selection, then the selection is
always visualized, while the region itself is only visualized if it
begins and ends on the same line.

For a region to qualify as a Magit selection, it must begin in the
heading of one section and end in the heading of a sibling section.
Note that if the end of the region is at the very beginning of section
heading (i.e. at the very beginning of a line) then that section is
considered to be @strong{inside} the selection.

This is not consistent with how the region is normally treated in
Emacs ¡ª if the region ends at the beginning of a line, then that line
is outside the region.  Due to how Magit visualizes the selection, it
should be obvious that this difference exists.

Not every command acts on every valid selection.  Some commands do not
even consider the location of point, others may act on the section at
point but not support acting on the selection, and even commands that
do support the selection of course only do so if it selects things
that they can act on.

This is the main reason why the selection must include the section at
point.  Even if a selection exists, the invoked command may disregard
it, in which case it may act on the current section only.  It is much
safer to only act on the current section but not the other selected
sections than it is to act on the current section @strong{instead} of the
selected sections.  The latter would be much more surprising and if
the current section always is part of the selection, then that cannot
happen.

@defvar magit-keep-region-overlay

This variable controls whether the region is visualized as usual
even when a valid Magit selection or a hunk-internal region exists.
See the doc-string for more information.
@end defvar

@node The hunk-internal region
@subsection The hunk-internal region

Somewhat related to the Magit selection described in the previous
section is the hunk-internal region.

Like the selection, the hunk-internal region is based on the Emacs
region but causes that region to not be visualized as it would in
other Emacs buffers, and includes the line on which the region ends
even if it ends at the very beginning of that line.

Unlike the selection, which is based on a region that must begin in
the heading of one section and ends in the section of a sibling
section, the hunk-internal region must begin inside the @strong{body} of a
hunk section and end in the body of the @strong{same} section.

The hunk-internal region is honored by "apply" commands, which can,
among other targets, act on a hunk.  If the hunk-internal region is
active, then such commands act only on the marked part of the hunk
instead of on the complete hunk.

@node Support for Completion Frameworks
@subsection Support for Completion Frameworks

The built-in option @code{completing-read-function} specifies the low-level
function used by @code{completing-read} to ask a user to select from a list
of choices.  Its default value is @code{completing-read-default}.
Alternative completion frameworks typically activate themselves by
substituting their own implementation.

Mostly for historic reasons Magit provides a similar option named
@code{magit-completing-read-function}, which only controls the low-level
function used by @code{magit-completing-read}.  This option also makes it
possible to use a different completing mechanism for Magit than for
the rest of Emacs, but doing that is not recommend.

You most likely don't have to customize the magit-specific option to
use an alternative completion framework.  For example, if you enable
@code{ivy-mode}, then Magit will respect that, and if you enable @code{helm-mode},
then you are done too.

However if you want to use Ido, then @code{ido-mode} won't do the trick.  You
will also have to install the @code{ido-completing-read+} package and use
@code{magit-ido-completing-read} as @code{magit-completing-read-function}.

@defopt magit-completing-read-function

The value of this variable is the low-level function used to perform
completion by code that uses @code{magit-completing-read} (as opposed to
the built-in @code{completing-read}).

The default value, @code{magit-builtin-completing-read}, is suitable for
the standard completion mechanism, @code{ivy-mode}, and @code{helm-mode} at least.

The built-in @code{completing-read} and @code{completing-read-default} are @strong{not}
suitable to be used here.  @code{magit-builtin-completing-read} performs
some additional work, and any function used in its place has to do
the same.
@end defopt
 
 @defun magit-builtin-completing-read prompt choices &optional predicate require-match initial-input hist def
 
-Perform completion using @code{completion-read}.
This function performs completion using the built-in @code{completion-read}
and does some additional magit-specific work.
 @end defun
 
 @defun magit-ido-completing-read prompt choices &optional predicate require-match initial-input hist def
 
-Perform completion using @code{ido-completing-read+} from the package by
-the same name (which you have to explicitly install).  Ido itself
-comes with a supposed drop-in replacement @code{ido-completing-read}, but
-that has too many deficits to serve our needs.
This function performs completion using @code{ido-completing-read+} from the
package by the same name (which you have to explicitly install) and
does some additional magit-specific work.

We have to use @code{ido-completing-read+} instead of the
@code{ido-completing-read} that comes with Ido itself, because the latter,
while intended as a drop-in replacement, cannot serve that purpose
because it violates too many of the implicit conventions.
 @end defun
 
-By default many commands that could potentially lead to data loss have
-to be confirmed.  This includes many very common commands, so this
-can become annoying quickly.  Many of these actions can be undone,
-provided @code{magit-wip-before-change-mode} is turned on (which it is not by
-default, due to performance concerns).
@defun magit-completing-read prompt choices &optional predicate require-match initial-input hist def fallback
 
-@defopt magit-no-confirm
This is the function that Magit commands use when they need the user
to select a single thing to act on.  The arguments have the same
meaning as for @code{completing-read}, except for FALLBACK, which is unique
to this function and is described below.
 
-The value of this option is a list of symbols, representing commands
-which do not have to be confirmed by the user before being carried
-out.
Instead of asking the user to choose from a list of possible
candidates, this function may just return the default specified by
DEF, with or without requiring user confirmation.  Whether that is
the case depends on PROMPT, @code{this-command} and @code{magit-dwim-selection}.
See the documentation of the latter for more information.
 
-When the global mode @code{magit-wip-before-change-mode} is enabled then
-many commands can be undone.  If that mode is enabled then adding
-@code{safe-with-wip} to this list has the same effect as adding @code{discard},
-@code{reverse}, @code{stage-all-changes}, and @code{unstage-all-changes}.
If it does read a value in the minibuffer, then this function acts
similar to @code{completing-read}, except for the following:
 
-@lisp
-(add-to-list 'magit-no-confirm 'safe-with-wip)
-@end lisp
@itemize
@item
If REQUIRE-MATCH is @code{nil} and the user exits without a choice, then
@code{nil} is returned instead of an empty string.
 
-For a list of all symbols that can be added to the value of this
-variable, see the doc-string.
-@end defopt
 
-Note that there are commands that ignore this option and always
-require confirmation, or which can be told not to do so using another
-dedicated option.  Also most commands, when acting on multiple sections
-at once always, require confirmation, even when they do respect this
-option when acting on a single section.
@item
If REQUIRE-MATCH is non-nil and the users exits without a choice,
an user-error is raised.


@item
FALLBACK specifies a secondary default that is only used if the
primary default DEF is @code{nil}.  The secondary default is not subject
to @code{magit-dwim-selection} ¡ª if DEF is @code{nil} but FALLBACK is not, then
this function always asks the user to choose a candidate, just as
if both defaults were @code{nil}.


@item
": " is appended to PROMPT.


@item
PROMPT is modified to end with \" (default DEF|FALLBACK): \"
provided that DEF or FALLBACK is non-nil, that neither @code{ivy-mode}
nor @code{helm-mode} is enabled, and that
@code{magit-completing-read-function} is set to its default value of
@code{magit-builtin-completing-read}.
@end itemize
@end defun

@node Additional Completion Options
@subsection Additional Completion Options

@defopt magit-list-refs-sortby

For many commands that read a ref or refs from the user, the value
of this option can be used to control the order of the refs.  Valid
values include any key accepted by the @code{--sort} flag of @code{git
  for-each-ref}.  By default, refs are sorted alphabetically by their
full name (e.g., "refs/heads/master").
@end defopt
 
 @node Running Git
 @section Running Git
 
 @menu
 * Viewing Git Output::
* Git Process Status::
 * Running Git Manually::
 * Git Executable::
 * Global Git Arguments::
@@ -1693,9 +2146,14 @@ option when acting on a single section.
 @subsection Viewing Git Output
 
 Magit runs Git either for side-effects (e.g. when pushing) or to get
-some value (e.g. the name of the current branch).  When Git is run for
-side-effects then the output goes into a per-repository log buffer,
-which can be consulted when things don't go as expected.
some value (e.g. the name of the current branch).

When Git is run for side-effects, the process output is logged in a
per-repository log buffer, which can be consulted using the
@code{magit-process} command when things don't go as expected.

The output/errors for up to `magit-process-log-max' Git commands are
retained.
 
 @table @asis
 @kindex $
@@ -1725,6 +2183,27 @@ in the process buffer.  This is useful when debugging, otherwise it
 just negatively affects performance.
 @end defopt
 
@node Git Process Status
@subsection Git Process Status

When a Git process is running for side-effects, Magit displays an
indicator in the mode line, using the @code{magit-mode-line-process} face.

If the Git process exits successfully, the process indicator is
removed from the mode line immediately.

In the case of a Git error, the process indicator is not removed, but
is instead highlighted with the @code{magit-mode-line-process-error} face,
and the error details from the process buffer are provided as a
tooltip for mouse users.  This error indicator persists in the mode
line until the next magit buffer refresh.

If you do not wish process errors to be indicated in the mode line,
customize the @code{magit-process-display-mode-line-error} user option.

Process errors are additionally indicated at the top of the status
buffer.

 @node Running Git Manually
 @subsection Running Git Manually
 
@@ -1740,47 +2219,51 @@ switch to a shell.
 @item @kbd{!} @tie{}@tie{}@tie{}@tie{}(@code{magit-run-popup})
 
 Shows the popup buffer featuring the below suffix commands.
-@end table
 
-These suffix commands run a Git subcommand.  The user input has to
-begin with the subcommand, "git" is assumed.
-
-@table @asis
 @kindex ! !
 @cindex magit-git-command-topdir
 @item @kbd{! !} @tie{}@tie{}@tie{}@tie{}(@code{magit-git-command-topdir})
 
-This command reads a Git subcommand from the user and executes it in
-the top-level directory of the current repository.
This command reads a command from the user and executes it in the
top-level directory of the current working tree.

The string "git " is used as initial input when prompting the user
for the command.  It can be removed to run another command.
 
 @kindex ! p
 @cindex magit-git-command
 @item @kbd{! p} @tie{}@tie{}@tie{}@tie{}(@code{magit-git-command})
 
-This command reads a Git subcommand from the user and executes it in
This command reads a command from the user and executes it in
 @code{default-directory}.  With a prefix argument the command is executed
-in the top-level directory of the current repository instead.
-@end table
in the top-level directory of the current working tree instead.
 
-These suffix commands run arbitrary shell commands.
The string "git " is used as initial input when prompting the user
for the command.  It can be removed to run another command.
 
-@table @asis
 @kindex ! s
 @cindex magit-shell-command-topdir
 @item @kbd{! s} @tie{}@tie{}@tie{}@tie{}(@code{magit-shell-command-topdir})
 
-This command reads a shell command from the user and executes it in
-the top-level directory of the current repository.
This command reads a command from the user and executes it in the
top-level directory of the current working tree.
 
 @kindex ! S
 @cindex magit-shell-command
 @item @kbd{! S} @tie{}@tie{}@tie{}@tie{}(@code{magit-shell-command})
 
-This command reads a shell command from the user and executes it in
This command reads a command from the user and executes it in
 @code{default-directory}.  With a prefix argument the command is executed
-in the top-level directory of the current repository instead.
in the top-level directory of the current working tree instead.

 @end table
 
@defopt magit-shell-command-verbose-prompt

Whether the prompt, used by the the above commands when reading a
shell command, shows the directory in which it will be run.
@end defopt

 These suffix commands start external gui tools.
 
 @table @asis
@@ -1828,8 +2311,9 @@ one you think you are using.
 @cindex magit-version
 @item @kbd{M-x magit-version} @tie{}@tie{}@tie{}@tie{}(@code{magit-version})
 
-Shows the currently used versions of Magit, Git, and Emacs in the
-echo area.  Non-interactively this just returns the Magit version.
This command shows the currently used versions of Magit, Git, and
Emacs in the echo area.  Non-interactively this just returns the
Magit version.
 @end table
 
 When the @code{system-type} is @code{windows-nt}, then @code{magit-git-executable} is set
@@ -1839,11 +2323,13 @@ the actual git binary, which are also placed on @code{$PATH}, and using one
 of these wrappers instead of the binary would degrade performance
 horribly.
 
-If Magit doesn't find the correct executable then you @strong{can} work around
-that by setting @code{magit-git-executable} to an absolute path.  But note
-that doing so is a kludge.  It is better to make sure the order in the
-environment variable @code{$PATH} is correct, and that Emacs is started with
-that environment in effect.  If you have to connect from Windows to a
If Magit doesn't find the correct executable then you @strong{can} work
around that by setting @code{magit-git-executable} to an absolute path.
But note that doing so is a kludge.  It is better to make sure the
order in the environment variable @code{$PATH} is correct, and that Emacs
is started with that environment in effect.  The command
@code{magit-debug-git-executable} can be useful to find out where Emacs is
searching for git.  If you have to connect from Windows to a
 non-Windows machine, then you must change the value to "git".
 
 @defopt magit-git-executable
@@ -1853,6 +2339,14 @@ executable or the string "git" to let Emacs find the executable
 itself, using the standard mechanism for doing such things.
 @end defopt
 
@table @asis
@kindex M-x magit-debug-git-executable
@cindex magit-debug-git-executable
@item @kbd{M-x magit-debug-git-executable} @tie{}@tie{}@tie{}@tie{}(@code{magit-debug-git-executable})

Display a buffer with information about @code{magit-git-executable}.
@end table

 @node Global Git Arguments
 @subsection Global Git Arguments
 
@@ -1994,6 +2488,7 @@ like pretty much every other keymap:
 @menu
 * Status Sections::
 * Status Header Sections::
* Status Module Sections::
 * Status Options::
 @end menu
 
@@ -2001,7 +2496,7 @@ like pretty much every other keymap:
 @subsection Status Sections
 
 The contents of status buffers is controlled using the hook
-@code{magit-status-sections-hook}.  See @ref{Section Hooks,Section Hooks} to learn about such
@code{magit-status-sections-hook}.  See @ref{Section Hooks} to learn about such
 hooks and how to customize them.
 
 @defopt magit-status-sections-hook
@@ -2133,44 +2628,6 @@ How many recent commits @code{magit-insert-recent-commits} and
 unpulled commits) show.
 @end defopt
 
-@defun magit-insert-modules-unpulled-from-upstream
-
-Insert sections for modules that haven't been pulled from the
-upstream yet.  These sections can be expanded to show the respective
-commits.
-@end defun
-
-@defun magit-insert-modules-unpulled-from-pushremote
-
-Insert sections for modules that haven't been pulled from the
-push-remote yet.  These sections can be expanded to show the
-respective commits.
-@end defun
-
-@defun magit-insert-modules-unpushed-to-upstream
-
-Insert sections for modules that haven't been pushed to the upstream
-yet.  These sections can be expanded to show the respective commits.
-@end defun
-
-@defun magit-insert-modules-unpushed-to-pushremote
-
-Insert sections for modules that haven't been pushed to the
-push-remote yet. These sections can be expanded to show the
-respective commits.
-@end defun
-
-@defun magit-insert-submodules
-
-Insert sections for all submodules.  For each section insert the
-path, the branch, and the output of @code{git describe --tags}.
-
-Press @code{RET} on such a submodule section to show its own status buffer.
-Press @code{RET} on the "Modules" section to display a list of submodules
-in a separate buffer.  This shows additional information not
-displayed in the super-repository's status buffer.
-@end defun
-
 @defun magit-insert-unpulled-cherries
 
 Insert section showing unpulled commits.
@@ -2189,14 +2646,15 @@ a patch-id not shared with any upstream commit) with "+" and
 all others with "-".
 @end defun
 
-See @ref{References Buffer,References Buffer} for some more section inserters, which could be
See @ref{References Buffer} for some more section inserters, which could be
 used here.
 
 @node Status Header Sections
 @subsection Status Header Sections
 
 The contents of status buffers is controlled using the hook
-@code{magit-status-sections-hook}, as described in the previous section.
@code{magit-status-sections-hook} (see @ref{Status Sections}).

 By default @code{magit-insert-status-headers} is the first member of that
 hook variable.
 
@@ -2252,7 +2710,8 @@ usually pushed to.
 
 @defun magit-insert-tags-header
 
-Insert a header line about the current and/or next tag.
Insert a header line about the current and/or next tag, along with
the number of commits between the tag and @code{HEAD}.
 @end defun
 
 The following functions can also be added to the above hook:
@@ -2276,6 +2735,82 @@ remote in alphabetic order.
 Insert a header line about the current user.
 @end defun
 
@node Status Module Sections
@subsection Status Module Sections

The contents of status buffers is controlled using the hook
@code{magit-status-sections-hook} (see @ref{Status Sections}).

By default @code{magit-insert-modules} is @emph{not} a member of that hook
variable.

@defun magit-insert-modules

Insert submodule sections.

Hook @code{magit-module-sections-hook} controls which module sections are
inserted, and option @code{magit-module-sections-nested} controls whether
they are wrapped in an additional section.
@end defun

@itemize
@item
Option: magit-module-sections-hook

Hook run by @code{magit-insert-modules}.


@item
Option: magit-module-sections-nested

This option controls whether @code{magit-insert-modules} wraps inserted
sections in an additional section.

If this is non-nil, then only a single top-level section is inserted.
If it is nil, then all sections listed in @code{magit-module-sections-hook}
become top-level sections.

@end itemize

@defun magit-insert-modules-overview

Insert sections for all submodules.  For each section insert the
path, the branch, and the output of @code{git describe --tags},
or, failing that, the abbreviated HEAD commit hash.

Press @code{RET} on such a submodule section to show its own status buffer.
Press @code{RET} on the "Modules" section to display a list of submodules
in a separate buffer.  This shows additional information not
displayed in the super-repository's status buffer.
@end defun

@defun magit-insert-modules-unpulled-from-upstream

Insert sections for modules that haven't been pulled from the
upstream yet.  These sections can be expanded to show the respective
commits.
@end defun

@defun magit-insert-modules-unpulled-from-pushremote

Insert sections for modules that haven't been pulled from the
push-remote yet.  These sections can be expanded to show the
respective commits.
@end defun

@defun magit-insert-modules-unpushed-to-upstream

Insert sections for modules that haven't been pushed to the upstream
yet.  These sections can be expanded to show the respective commits.
@end defun

@defun magit-insert-modules-unpushed-to-pushremote

Insert sections for modules that haven't been pushed to the
push-remote yet.  These sections can be expanded to show the
respective commits.
@end defun

 @node Status Options
 @subsection Status Options
 
@@ -2407,11 +2942,10 @@ on @code{l}, features several suffix commands, which show a specific log in a
 separate log buffer.
 
 Like other popups, the log popup also features several arguments that
-can be changed before invoking one of the suffix commands.  However in
-case of the log popup these arguments correspond to those currently in
-use in the current repository's log buffer.  When the log popup is
-invoked while no log buffer exists for the current repository yet,
-then the default value of @code{magit-log-arguments} is used instead.
can be changed before invoking one of the suffix commands.  However,
in the case of the log popup, these arguments may be taken from those
currently in use in the current repository's log buffer, depending on
the value of @code{magit-use-sticky-arguments} (see @ref{Popup Buffers and Prefix Commands}).
 
 For information about the various arguments, see 
 @ifinfo
@@ -2429,7 +2963,7 @@ the git-log(1) manpage.
 The switch @code{++order=VALUE} is converted to one of @code{--author-date-order},
 @code{--date-order}, or @code{--topo-order} before being passed to @code{git log}.
 
-The log popup also features several reflog commands.  See @ref{Reflog,Reflog}.
The log popup also features several reflog commands.  See @ref{Reflog}.
 
 @table @asis
 @kindex l
@@ -2483,8 +3017,8 @@ Show log for all references and @code{HEAD}.
 
 
 Two additional commands that show the log for the file or blob that
-is being visited in the current buffer exists, see @ref{Minor Mode for Buffers Visiting Files,Minor Mode for Buffers Visiting Files}.  The command @code{magit-cherry} also shows a log,
-see @ref{Cherries,Cherries}.
is being visited in the current buffer exists, see @ref{Minor Mode for Buffers Visiting Files}.  The command @code{magit-cherry} also shows a log,
see @ref{Cherries}.
 
 @menu
 * Refreshing Logs::
@@ -2552,7 +3086,7 @@ Show or hide the margin.
 @item @kbd{L} @tie{}@tie{}@tie{}@tie{}(@code{magit-log-refresh-popup})
 
 This prefix command shows the following suffix commands along with
-the appropriate infix arguments in a popup buffer.  See @ref{Refreshing Logs,Refreshing Logs}.
the appropriate infix arguments in a popup buffer.  See @ref{Refreshing Logs}.
 
 @kindex q
 @cindex magit-log-bury-buffer
@@ -2621,9 +3155,9 @@ limit.  Otherwise set it to 256.
 
 Double the number of commits the current log buffer is limited to.
 
-@kindex =
@kindex -
 @cindex magit-log-half-commit-limit
-@item @kbd{=} @tie{}@tie{}@tie{}@tie{}(@code{magit-log-half-commit-limit})
@item @kbd{-} @tie{}@tie{}@tie{}@tie{}(@code{magit-log-half-commit-limit})
 
 Half the number of commits the current log buffer is limited to.
 
@@ -2642,7 +3176,35 @@ Whether to show the refnames after the commit summaries.  This is
 useful if you use really long branch names.
 @end defopt
 
-For a description of @code{magit-log-margin} see @ref{Log Margin,Log Margin}.
Magit displays references in logs a bit differently from how Git does
it.

Local branches are blue and remote branches are green.  Of course that
depends on the used theme, as do the colors used for other types of
references.  The current branch has a box around it, as do remote
branches that are their respective remote's @code{HEAD} branch.

If a local branch and its push-target point at the same commit, then
their names are combined to preserve space and to make that
relationship visible.  For example:

@example
origin/feature
[green][blue-]

instead of

feature origin/feature
[blue-] [green-------]
@end example

Also note that while the popup features the @code{--show-signature} argument,
that won't actually be used when enabled, because Magit defaults to
use just one line per commit.  Instead the commit colorized to
indicate the validity of the signed commit object, using the faces
named @code{magit-signature-*} (which see).

For a description of @code{magit-log-margin} see @ref{Log Margin}.
 
 @node Log Margin
 @subsection Log Margin
@@ -2807,7 +3369,7 @@ the <a href="http://git-scm.com/docs/git-reflog">git-reflog(1)</a> manpage.
 the git-reflog(1) manpage.
 @end iftex
 
-These reflog commands are available from the log popup.  See @ref{Logging,Logging}.
These reflog commands are available from the log popup.  See @ref{Logging}.
 
 @table @asis
 @kindex l r
@@ -2870,7 +3432,7 @@ has an equivalent in the upstream and @code{+} if it does not, i.e. if it is
 a cherry.
 
 The command @code{magit-cherry} shows cherries for a single branch, but the
-references buffer (see @ref{References Buffer,References Buffer}) can show cherries for
references buffer (see @ref{References Buffer}) can show cherries for
 multiple "upstreams" at once.
 
 Also see 
@@ -2936,11 +3498,10 @@ on @code{d}, features several suffix commands, which show a specific diff in
 a separate diff buffer.
 
 Like other popups, the diff popup also features several arguments that
-can be changed before invoking one of the suffix commands.  However in
-case of the diff popup these arguments correspond to those currently
-in use in the current repository's diff buffer.  When the diff popup
-is invoked while no diff buffer exists for the current repository yet,
-then the default value of @code{magit-diff-arguments} is used instead.
can be changed before invoking one of the suffix commands.  However,
in the case of the diff popup, these arguments may be taken from those
currently in use in the current repository's log buffer, depending on
the value of @code{magit-use-sticky-arguments} (see @ref{Popup Buffers and Prefix Commands}).
 
 Also see 
 @ifinfo
@@ -2977,7 +3538,7 @@ Show differences between two commits.
 
 RANGE should be a range (A..B or A@dots{}B) but can also be a single
 commit.  If one side of the range is omitted, then it defaults to
-HEAD.  If just a commit is given, then changes in the working tree
@code{HEAD}.  If just a commit is given, then changes in the working tree
 relative to that commit are shown.
 
 If the region is active, use the revisions on the first and last
@@ -2986,8 +3547,8 @@ revisions, choose a revision to view changes along, starting at the
 common ancestor of both revisions (i.e., use a "@dots{}"  range).
 
 @kindex d w
-@cindex magit-diff-worktree
-@item @kbd{d w} @tie{}@tie{}@tie{}@tie{}(@code{magit-diff-worktree})
@cindex magit-diff-working-tree
@item @kbd{d w} @tie{}@tie{}@tie{}@tie{}(@code{magit-diff-working-tree})
 
 Show changes between the current working tree and the @code{HEAD} commit.
 With a prefix argument show changes between the working tree and a
@@ -3034,7 +3595,7 @@ Show all diffs of a stash in a buffer.
 @end table
 
 Two additional commands that show the diff for the file or blob that
-is being visited in the current buffer exists, see @ref{Minor Mode for Buffers Visiting Files,Minor Mode for Buffers Visiting Files}.
is being visited in the current buffer exists, see @ref{Minor Mode for Buffers Visiting Files}.
 
 @menu
 * Refreshing Diffs::
@@ -3103,6 +3664,18 @@ This command converts the diff range type from "revA..revB" to
 
 This command swaps revisions in the diff range from "revA..revB"
 to "revB..revA", or vice versa.

@kindex D F
@cindex magit-diff-toggle-file-filter
@item @kbd{D F} @tie{}@tie{}@tie{}@tie{}(@code{magit-diff-toggle-file-filter})

This command toggles the file restriction of the diffs in the
current buffer, allowing you to quickly switch between viewing all
the changes in the commit and the restricted subset.  As a special
case, when this command is called from a log buffer, it toggles the
file restriction in the repository's revision buffer, which is
useful when you display a revision from a log buffer that is
restricted to a file or files.
 @end table
 
 In addition to the above popup, which allows changing any of the
@@ -3211,10 +3784,19 @@ The actual file in the worktree is visited. The positions in the
 hunk headers get less useful the "older" the changes are, and as a
 result, jumping to the appropriate position gets less reliable.
 
-Also see @code{magit-diff-visit-file-worktree}, which visits the respective
-blob, unless the diff shows changes in the worktree, the index, or
-@code{HEAD}.
Also see @code{magit-diff-visit-file}, which visits the respective blob,
unless the diff shows changes in the worktree, the index, or @code{HEAD}.

@end table

@cindex magit-diff-visit-file-other-window
@deffn Command magit-diff-visit-file-other-window

From a diff, visit the corresponding file at the appropriate
position in another window.
@end deffn
 
@table @asis
 @kindex j
 @cindex magit-jump-to-diffstat-or-diff
 @item @kbd{j} @tie{}@tie{}@tie{}@tie{}(@code{magit-jump-to-diffstat-or-diff})
@@ -3255,6 +3837,38 @@ Whether to show word-granularity differences within diff hunks.
 @end itemize
 @end defopt
 
@defopt magit-diff-adjust-tab-width

Whether to adjust the width of tabs in diffs.

Determining the correct width can be expensive if it requires
opening large and/or many files, so the widths are cached in the
variable @code{magit-diff--tab-width-cache}.  Set that to nil to invalidate
the cache.

@itemize
@item
@code{nil} Never ajust tab width.  Use `tab-width's value from the Magit
buffer itself instead.


@item
@code{t} If the corresponding file-visiting buffer exits, then use
@code{tab-width}'s value from that buffer.  Doing this is cheap, so this
value is used even if a corresponding cache entry exists.


@item
@code{always} If there is no such buffer, then temporarily visit the file
to determine the value.


@item
NUMBER Like @code{always}, but don't visit files larger than NUMBER
bytes.
@end itemize
@end defopt

 @defopt magit-diff-paint-whitespace
 
 Specify where to highlight whitespace errors.
@@ -3304,7 +3918,7 @@ This function should not be removed from the value of this option.
 
 @code{magit-diff-highlight-hunk-region-using-overlays} and
 @code{magit-diff-highlight-hunk-region-using-underline} emphasize the
-region by placing delimiting horizonal lines before and after it.
region by placing delimiting horizontal lines before and after it.
 Both of these functions have glitches which cannot be fixed due to
 limitations of Emacs' display engine.  For more information see
 @uref{https://github.com/magit/magit/issues/2758} ff.
@@ -3344,13 +3958,55 @@ inserted inside the text that was previously inserted according
 to @code{magit-revision-header-format}.
 
 Both cells are regular expressions.  The car specifies where to
-insert the author gravatar image.  The top halve of the image is
-inserted right after the matched text, the bottom halve on the
insert the author gravatar image.  The top half of the image is
inserted right after the matched text, the bottom half on the
 next line at the same offset.  The cdr specifies where to insert
 the committer image, accordingly.  Either the car or the cdr may
 be nil.
 @end defopt
 
@defopt magit-revision-use-hash-sections

Whether to turn hashes inside the commit message into sections.

If non-nil, then hashes inside the commit message are turned into
@code{commit} sections.  There is a trade off to be made between
performance and reliability:

@itemize
@item
@code{slow} calls git for every word to be absolutely sure.

@item
@code{quick} skips words less than seven characters long.

@item
@code{quicker} additionally skips words that don't contain a number.

@item
@code{quickest} uses all words that are at least seven characters long
and which contain at least one number as well as at least one
letter.
@end itemize

If nil, then no hashes are turned into sections, but you can still
visit the commit at point using "RET".
@end defopt

The diffs shown in the revision buffer may be automatically restricted
to a subset of the changed files.  If the revision buffer is displayed
from a log buffer, the revision buffer will share the same file
restriction as that log buffer (also see the command
@code{magit-diff-toggle-file-filter}).  Note, however, that the log's file
restriction will be ignored when @code{magit-log-arguments} includes
@code{--follow}.  In this case, the @code{-u} argument of the log popup can be
used to show the file-restricted diffs inline.

If the revision buffer is not displayed from a log buffer, the file
restriction is determined by the file restriction in the repository's
diff buffer, if it exists, and the value of the option
@code{magit-use-sticky-arguments}.

 @node Ediffing
 @section Ediffing
 
@@ -3428,7 +4084,7 @@ Show staged changes to a file using Ediff.
 @cindex magit-ediff-show-working-tree
 @item @kbd{E w} @tie{}@tie{}@tie{}@tie{}(@code{magit-ediff-show-working-tree})
 
-Show changes in a file between HEAD and working tree using Ediff.
Show changes in a file between @code{HEAD} and working tree using Ediff.
 
 @kindex E c
 @cindex magit-ediff-show-commit
@@ -3523,6 +4179,7 @@ Whether to show commit counts in Magit-Refs mode buffers.
 @item
 @code{nil} Never show counts.
 @end itemize

 The default is @code{nil} because anything else can be very expensive.
 @end defopt
 
@@ -3719,7 +4376,7 @@ like you would do in other buffers.
 @subsection References Sections
 
 The contents of references buffers is controlled using the hook
-@code{magit-refs-sections-hook}.  See @ref{Section Hooks,Section Hooks} to learn about such hooks
@code{magit-refs-sections-hook}.  See @ref{Section Hooks} to learn about such hooks
 and how to customize them.  All of the below functions are members of
 the default value.  Note that it makes much less sense to customize
 this hook than it does for the respective hook used for the status
@@ -3869,24 +4526,39 @@ the <a href="http://git-scm.com/docs/git-blame">git-blame(1)</a> manpage.
 the git-blame(1) manpage.
 @end iftex
 
To start blaming use @code{M-x} in a file-visiting buffer to invoke one of
the next tree commands.  In a blob-visiting buffer you can also use
the key bindings described below, and when Magit-File mode is enabled,
then you can at least use @code{C-c M-g} to enter the blaming popup instead
of having to type out the command name.

 @table @asis
 @kindex M-x magit-blame
 @cindex magit-blame
 @item @kbd{M-x magit-blame} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame})
 
-Display edit history of FILE up to REVISION.
This command augments each line or chunk of lines in the current
file- or blob-visiting buffer with information about what commits
last touched these lines.

If the buffer visits a revision of that file, then history up to
that revision is considered.  Otherwise, the file's full history is
considered, including uncommitted changes.
 
-Interactively blame the file being visited in the current buffer.
-If the buffer visits a revision of that file, then blame up to that
-revision.  Otherwise, blame the file's full history, including
-uncommitted changes.
If Magit-Blame mode is already turned on in the current buffer then
blaming is done recursively, by visiting REVISION:FILE (using
@code{magit-find-file}), where REVISION is the revision before the revision
that added the current line or chunk of lines.
 
-If Magit-Blame mode is already turned on then blame recursively, by
-visiting REVISION:FILE (using @code{magit-find-file}), where revision is
-the revision before the revision that added the lines at point.
@kindex M-x magit-blame-reverse
@cindex magit-blame-reverse
@item @kbd{M-x magit-blame-reverse} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame-reverse})
 
-ARGS is a list of additional arguments to pass to @code{git blame}; only
-arguments available from @code{magit-blame-popup} should be used.
This command augments each line or chunk of lines in the current
file- or blob-visiting buffer with information about the last
revision in which a line still existed.

Like @code{magit-blame}, this command can be used recursively.
 
 @kindex M-x magit-blame-popup
 @cindex magit-blame-popup
@@ -3894,105 +4566,120 @@ arguments available from @code{magit-blame-popup} should be used.
 
 This prefix command shows the above suffix command along with the
 appropriate infix arguments in a popup buffer.
@end table
 
The above commands are also bound in the keymaps @code{magit-blame-mode-map}
and @code{magit-blob-mode-map}, and in the popup @code{magit-file-popup}.  Once
Magit-Blame mode is enabled in a file-visiting buffer, you can use @code{B}
to show the blaming popup, @code{b} to blame recursively going backward in
time, and @code{f} to blame recursively going forward in time (i.e. blame in
reverse).  These bindings are always available in blob-visiting
buffers.

Additionally the following key bindings are available when Magit-Blame
mode is enabled.  These commands are also available in other buffers;
here only the behavior is described that is relevant in file-visiting
buffers that are being blamed.

@table @asis
 @kindex RET
 @cindex magit-show-commit
 @item @kbd{RET} @tie{}@tie{}@tie{}@tie{}(@code{magit-show-commit})
 
-Show the commit at point.  If there is no commit at point or with a
-prefix argument, prompt for a commit.
This command shows the commit that last touched the line at point.
 
 @kindex SPC
 @cindex magit-diff-show-or-scroll-up
 @item @kbd{SPC} @tie{}@tie{}@tie{}@tie{}(@code{magit-diff-show-or-scroll-up})
 
-Update the commit or diff buffer for the thing at point.
This command updates the commit buffer.
 
-Either show the commit or stash at point in the appropriate buffer,
-or if that buffer is already being displayed in the current frame
-and contains information about that commit or stash, then instead
-scroll the buffer up.  If there is no commit or stash at point, then
-prompt for a commit.
This either shows the commit that last touched the line at point in
the appropriate buffer, or if that buffer is already being displayed
in the current frame and if that buffer contains information about
that commit, then the buffer is scrolled up instead.
 
 @kindex DEL
 @cindex magit-diff-show-or-scroll-down
 @item @kbd{DEL} @tie{}@tie{}@tie{}@tie{}(@code{magit-diff-show-or-scroll-down})
 
-Update the commit or diff buffer for the thing at point.
This command updates the commit buffer.
 
-Either show the commit or stash at point in the appropriate buffer,
-or if that buffer is already being displayed in the current frame
-and contains information about that commit or stash, then instead
-scroll the buffer down.  If there is no commit or stash at point,
-then prompt for a commit.
This either shows the commit that last touched the line at point in
the appropriate buffer, or if that buffer is already being displayed
in the current frame and if that buffer contains information about
that commit, then the buffer is scrolled down instead.
 
 @kindex n
 @cindex magit-blame-next-chunk
 @item @kbd{n} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame-next-chunk})
 
-Move to the next chunk.
This command moves to the next chunk.
 
 @kindex N
 @cindex magit-blame-next-chunk-same-commit
 @item @kbd{N} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame-next-chunk-same-commit})
 
-Move to the next chunk from the same commit.
This command moves to the next chunk from the same commit.
 
 @kindex p
 @cindex magit-blame-previous-chunk
 @item @kbd{p} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame-previous-chunk})
 
-Move to the previous chunk.
This command moves to the previous chunk.
 
 @kindex P
 @cindex magit-blame-previous-chunk-same-commit
 @item @kbd{P} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame-previous-chunk-same-commit})
 
-Move to the previous chunk from the same commit.
This command moves to the previous chunk from the same commit.
 
 @kindex q
 @cindex magit-blame-quit
 @item @kbd{q} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame-quit})
 
-Turn off Magit-Blame mode.  If the buffer was created during a
-recursive blame, then also kill the buffer.
This command turns off Magit-Blame mode.  If the buffer was created
during a recursive blame, then it also kills the buffer.
 
 @kindex M-w
 @cindex magit-blame-copy-hash
 @item @kbd{M-w} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame-copy-hash})
 
-Save the hash of the current chunk's commit to the kill ring.
This command saves the hash of the current chunk's commit to the
kill ring.
 
-When the region is active, then save that to the @code{kill-ring},
-like @code{kill-ring-save} would.
When the region is active, the command saves the region's content
instead of the hash, like @code{kill-ring-save} would.
 
 @kindex t
 @cindex magit-blame-toggle-headings
 @item @kbd{t} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame-toggle-headings})
 
-Show or hide blame chunk headings.
This command shows or hides blame chunk headings.
 
 @end table
 
 @defopt magit-blame-heading-format
 
-Format string used for blame headings.
The format string used for blame headings.
 @end defopt
 
 @defopt magit-blame-time-format
 
-Format string used for time strings in blame headings.
The format string used for time strings in blame headings.
 @end defopt
 
 @defopt magit-blame-show-headings
 
-Whether to initially show blame block headings.  The headings can
-also be toggled locally using command @code{magit-blame-toggle-headings}.
This option controls whether blame block headings are initially
shown.  The headings can also be toggled locally using the command
@code{magit-blame-toggle-headings}.
 @end defopt
 
 @defopt magit-blame-goto-chunk-hook
 
-Hook run by @code{magit-blame-next-chunk} and @code{magit-blame-previous-chunk}.
This hook is run by @code{magit-blame-next-chunk} and
@code{magit-blame-previous-chunk}.
 @end defopt
 
 @node Manipulating
@@ -4070,7 +4757,7 @@ Besides staging and unstaging, Magit also provides several other
 once, a hunk, multiple hunks at once, and on parts of a hunk.  These
 apply variants are described in the next section.
 
-You can also use Ediff to stage and unstage.  See @ref{Ediffing,Ediffing}.
You can also use Ediff to stage and unstage.  See @ref{Ediffing}.
 
 @table @asis
 @kindex s
@@ -4449,9 +5136,9 @@ whether the session is finished successfully or was canceled).  It is
 sometimes useful to bring back messages from that ring.
 
 @table @asis
-@kindex C-s M-s
@kindex C-c M-s
 @cindex git-commit-save-message
-@item @kbd{C-s M-s} @tie{}@tie{}@tie{}@tie{}(@code{git-commit-save-message})
@item @kbd{C-c M-s} @tie{}@tie{}@tie{}@tie{}(@code{git-commit-save-message})
 
 Save the current buffer content to the commit message ring.
 
@@ -4767,7 +5454,7 @@ the variables that are related to fetching, pulling, and pushing (as
 well as some other branch-related variables) can be inspected and
 changed using the popup @code{magit-branch-config-popup}, which is a
 sub-popup of many popups that deal with branches.  It is also possible
-to set the push-remote or upstream while pushing (see @ref{Pushing,Pushing}).
to set the push-remote or upstream while pushing (see @ref{Pushing}).
 
 @node The Branch Popup
 @subsection The Branch Popup
@@ -4797,11 +5484,21 @@ specialized @code{magit-branch-config-popup} does.
 Whether the @code{magit-branch-popup} shows Git variables.  This defaults
 to t to avoid changing key bindings.  When set to nil, no variables
 are displayed directly in this popup, and the sub-popup
-@code{magit-branch-config-popup} has to be used indead to view and change
@code{magit-branch-config-popup} has to be used instead to view and change
 branch related variables.
 @end defopt
 
 @table @asis
@kindex b C
@cindex magit-branch-config-popup
@item @kbd{b C} @tie{}@tie{}@tie{}@tie{}(@code{magit-branch-config-popup})

This command shows branch related variables in a separate popup.  By
default this asks the user for which branch the variables should be
shown.  When @code{magit-branch-popup-show-variables} is @code{nil}, then it shows
the variables for the current branch, unless a prefix argument is
used.

 @kindex b b
 @cindex magit-checkout
 @item @kbd{b b} @tie{}@tie{}@tie{}@tie{}(@code{magit-checkout})
@@ -4828,10 +5525,41 @@ Also see option @code{magit-branch-prefer-remote-upstream}.
 @cindex magit-branch-and-checkout
 @item @kbd{b c} @tie{}@tie{}@tie{}@tie{}(@code{magit-branch-and-checkout})
 
-This command creates a new branch like @code{magit-branch}, but then also
-checks it out.
This command creates a new branch like @code{magit-branch}, but then also
checks it out.

Also see option @code{magit-branch-prefer-remote-upstream}.

@kindex b l
@cindex magit-branch-checkout
@item @kbd{b l} @tie{}@tie{}@tie{}@tie{}(@code{magit-branch-checkout})

This command checks out an existing or new local branch.  It reads a
branch name from the user offering all local branches and a subset
of remote branches as candidates.  Remote branches for which a local
branch by the same name exists are omitted from the list of
candidates.  The user can also enter a completely new branch name.

@itemize
@item
If the user selects an existing local branch, then that is checked
out.


@item
If the user selects a remote branch, then it creates and checks
out a new local branch with the same name, and configures the
selected remote branch as the push target.

 
-Also see option @code{magit-branch-prefer-remote-upstream}.
@item
If the user enters a new branch name, then it creates and checks
that out, after also reading the starting-point from the user.
@end itemize

In the latter two cases the upstream is also set.  Whether it is set
to the chosen starting point or something else depends on the value
of @code{magit-branch-adjust-remote-upstream-alist}.
 
 @kindex b s
 @cindex magit-branch-spinoff
@@ -4857,14 +5585,135 @@ to @code{FROM~}, instead of to the last commit it shares with its
 upstream.  Interactively, FROM is only ever non-nil, if the
 region selects some commits, and among those commits, FROM is
 the commit that is the fewest commits ahead of the source
-branch.  (It not yet possible to spin off a single commit,
-unless it is the only unpushed commit.  See #2920.)
branch.
 
 The commit at the other end of the selection actually does not
 matter, all commits between FROM and @code{HEAD} are moved to the new
 branch.  If FROM is not reachable from @code{HEAD} or is reachable from the
 source branch's upstream, then an error is raised.
 
@kindex b R
@cindex magit-branch-pull-request
@item @kbd{b R} @tie{}@tie{}@tie{}@tie{}(@code{magit-branch-pull-request})

This command creates and configures a new branch from a Github
pull-request, creating and configuring a new remote if necessary.

The name of the local branch is the same as the name of the remote
branch that you are being asked to merge, unless the contributor
could not be bother to properly name the branch before opening the
pull-request.  The most likely such case is when you are being asked
to merge something like "fork/master" into "origin/master".  In such
cases the local branch will be named "pr-N", where @code{N} is the
pull-request number.

These variables are always set by this command:

@itemize
@item
@code{branch.<name>.pullRequest} is set to the pull-request number.

@item
@code{branch.<name>.description} is set to the pull-request title.

@item
@code{branch.<name>.rebase} is set to @code{true} because there should be no
merge commits among the commits in a pull-request.
@end itemize

This command also configures the upstream and the push-remote of the
local branch that it creates.

The branch against which the pull-request was opened, is always used
as the upstream.  This makes it easy to see what commits you are
being asked to merge in the section titled something like "Unmerged
into origin/master".

Like for other commands that create a branch it depends on the
option @code{magit-branch-prefer-remote-upstream} whether the remote branch
itself or the respective local branch is used as the upstream, so
this section may also be titled e.g. "Unmerged into master".

When necessary and possible, then the remote pull-request branch is
configured to be used as the push-target.  This makes it easy to see
what further changes the contributor has made since you last
reviewed their changes in the section titled something like
"Unpulled from origin/new-feature" or "Unpulled from
fork/new-feature".

@itemize
@item
If the pull-request branch is located in the upstream repository,
then it is not necessary to configure the push-target.

(If you have push access to the upstream repository, then it is
usually a good idea to configure that as the push-remote using
@code{remote.pushDefault}.  However even if you are not using that
recommended setting, then it is still easy enough to set
@code{branch.<name>.pushRemote} while pushing using @code{P p}.)


@item
If the pull-request branch is located inside a fork, then you
usually are able to push to that branch, because Github by default
allows the recipient of a pull-request to push to the remote
pull-request branch even if it is located in a fork.  The
contributor has to explicitly disable this.

@itemize
@item
If you are not allowed to push to the pull-request branch on
the fork, then a branch by the same name located in the
upstream repository is configured as the push-target.


@item
A ¡ª sadly rather common ¡ª special case is when the contributor
didn't bother to use a dedicated branch for the pull-request.

The most likely such case is when you are being asked to merge
something like "fork/master" into "origin/master".  The special
push permission mentioned above is never granted for the branch
that is the repository's default branch, and that is almost
certainly be the case in this scenario.

To enable you to easily push somewhere anyway, the local branch
is named "pr-N" (where @code{N} is the pull-request number) and the
upstream repository is used as the push-remote.


@item
Finally, if you are allowed to push to the pull-request branch
and the contributor had the foresight to use a dedicated branch,
then the fork is configured as the push-remote.
@end itemize

The push-remote is configured using @code{branch.<name>.pushRemote}, even
if the used value is identical to that of @code{remote.pushDefault}, just
in case you change the value of the latter later on.  Additionally
the variable @code{branch.<name>.pullRequestRemote} is set to the fork
remote.
@end itemize

When you later delete the local pull-request branch, then you are
offered to also delete the corresponding remote, provided it is not
the upstream remote and that the tracking branch that corresponds to
the deleted branch is the only remaining tracked branch.  If you
don't confirm, then only the tracking branch itself is deleted in
addition to the local branch.

Do not delete the tracking branch instead of the local branch.  The
cleanup mentioned in the previous paragraph is not performed if you
do that.

@kindex b r
@cindex magit-checkout-pull-request
@item @kbd{b r} @tie{}@tie{}@tie{}@tie{}(@code{magit-checkout-pull-request})

This command creates and configures a new branch from a pull
request, the same way @code{magit-branch-pull-request} does.  Additionally
it checks out the new branch.

 @kindex b x
 @cindex magit-branch-reset
 @item @kbd{b x} @tie{}@tie{}@tie{}@tie{}(@code{magit-branch-reset})
@@ -4913,23 +5762,22 @@ and I recommend you leave it at that.
 This option specifies whether remote upstreams are favored over
 local upstreams when creating new branches.
 
-When a new branch is created, Magit offers the branch, commit, or
-stash as the default starting point of the new branch.  If there is
-no such thing at point, then it falls back to offer the current
-branch as starting-point.  The user may then accept that default or
-pick something else.
When a new branch is created, then the branch, commit, or stash at
point is suggested as the starting point of the new branch, or if
there is no such revision at point the current branch.  In either
case the user may choose another starting point.
 
-If the chosen starting-point is a branch, then it may also be set
If the chosen starting point is a branch, then it may also be set
 as the upstream of the new branch, depending on the value of the
 Git variable `branch.autoSetupMerge'.  By default this is done
 for remote branches, but not for local branches.
 
 You might prefer to always use some remote branch as upstream.
-If the chosen starting-point is (1) a local branch, (2) whose
If the chosen starting point is (1) a local branch, (2) whose
 name matches a member of the value of this option, (3) the
 upstream of that local branch is a remote branch with the same
 name, and (4) that remote branch can be fast-forwarded to the
-local branch, then the chosen branch is used as starting-point,
local branch, then the chosen branch is used as starting point,
 but its own upstream is used as the upstream of the new branch.
 
 Members of this option's value are treated as branch names that
@@ -4972,7 +5820,7 @@ and the push-remote reference the same related branch would be
 wasteful.  Instead a branch like "maint" or "master" should be used
 as the upstream.
 
-This option allows specifing the branch that should be used as the
This option allows specifying the branch that should be used as the
 upstream when branching certain remote branches.  The value is an
 alist of the form @code{((UPSTREAM . RULE)...)}.  The first matching
 element is used, the following elements are ignored.
@@ -5015,11 +5863,37 @@ This command creates and checks out a new orphan branch with
 contents from a given revision.
 @end deffn
 
@cindex magit-branch-or-checkout
@deffn Command magit-branch-or-checkout

This command is a hybrid between @code{magit-checkout} and
@code{magit-branch-and-checkout} and is intended as a replacement for the
former in @code{magit-branch-popup}.

It first asks the user for an existing branch or revision.  If the
user input actually can be resolved as a branch or revision, then it
checks that out, just like @code{magit-checkout} would.

Otherwise it creates and checks out a new branch using the input as
its name.  Before doing so it reads the starting-point for the new
branch.  This is similar to what @code{magit-branch-and-checkout} does.

To use this command instead of @code{magit-checkout} add this to your init
file:

@lisp
(magit-remove-popup-key 'magit-branch-popup :action ?b)
(magit-define-popup-action 'magit-branch-popup
  ?b "Checkout" 'magit-branch-or-checkout
  'magit-branch t)
@end lisp
@end deffn

 @node The Branch Config Popup
 @subsection The Branch Config Popup
 
-@cindex magit-branch-popup
-@deffn Command magit-branch-popup
@cindex magit-branch-config-popup
@deffn Command magit-branch-config-popup
 
 This prefix command shows the following branch-related Git variables
 in a popup buffer.  The values can be changed from that buffer.
@@ -5104,6 +5978,7 @@ When @code{true} then pulling is done by rebasing.
 @item
 When @code{false} (the default) then pulling is done by merging.
 @end itemize

 Since it is never a good idea to merge the upstream branch into a
 feature or hotfix branch and most branches are such branches, you
 should consider setting this to @code{true}, and @code{branch.master.rebase} to
@@ -5212,7 +6087,7 @@ the <a href="http://git-scm.com/docs/git-checkout">git-checkout(1)</a> manpage.
 @iftex
 the git-checkout(1) manpage.
 @end iftex
- and @ref{Pushing,Pushing}.
 and @ref{Pushing}.
 
 @defopt magit-prefer-remote-upstream
 
@@ -5409,7 +6284,7 @@ commands and binding @code{C-c ^ C-h} and press @code{RET} while point is on a
 command name to read its documentation.
 
 Normally you would edit one version and then tell Smerge to keep only
-that version.  Use @code{C-c ^ m} (@code{smerge-keep-mine)} to keep the "HEAD"
that version.  Use @code{C-c ^ m} (@code{smerge-keep-mine}) to keep the @code{HEAD}
 version or @code{C-c ^ o} (@code{smerge-keep-other}) to keep the version that
 follows "|||||||".  Then use @code{C-c ^ n} to move to the next conflicting
 area in the same file.  Once you are done resolving conflicts, return
@@ -5423,12 +6298,12 @@ different versions of the file.  To resolve conflicts in a file using
 Ediff press @code{e} while point is on such a file in the status buffer.
 
 Ediff can be used for other purposes as well.  For more information on
-how to enter Ediff from Magit, see @ref{Ediffing,Ediffing}.  Explaining how to use
how to enter Ediff from Magit, see @ref{Ediffing}.  Explaining how to use
 Ediff is beyond the scope of this manual, instead see @ref{Top,,,ediff,}.
 
 If you are unsure whether you should Smerge or Ediff, then use the
 former.  It is much easier to understand and use, and except for
-truely complex conflicts, the latter is usually overkill.
truly complex conflicts, the latter is usually overkill.
 
 @node Rebasing
 @section Rebasing
@@ -5465,7 +6340,7 @@ stop somewhere along the way, either because you told it to do so, or
 because applying a commit failed due to a conflict.  When that
 happens, then the status buffer shows information about the rebase
 sequence which is in progress in a section similar to a log section.
-See @ref{Information About In-Progress Rebase,Information About In-Progress Rebase}.
See @ref{Information About In-Progress Rebase}.
 
 @table @asis
 @kindex r p
@@ -5489,18 +6364,26 @@ Rebase the current branch onto a branch read in the minibuffer.  All
 commits that are reachable from head but not from the selected
 branch TARGET are being rebased."
 
-@kindex r o
@kindex r s
 @cindex magit-rebase-subset
-@item @kbd{r o} @tie{}@tie{}@tie{}@tie{}(@code{magit-rebase-subset})
@item @kbd{r s} @tie{}@tie{}@tie{}@tie{}(@code{magit-rebase-subset})
 
 Start a non-interactive rebase sequence with commits from START to
 @code{HEAD} onto NEWBASE.  START has to be selected from a list of recent
 commits.
 @end table
 
-Note that the popup also features the infix argument @code{--interactive}.
-This can be used to turn one of the above non-interactive rebase
-variants into an interactive rebase.
By default Magit uses the @code{--autostash} argument, which causes
uncommitted changes to be stored in a stash before the rebase begins.
These changes are restored after the rebase completes and if possible
the stash is removed.  If the stash does not apply cleanly, then the
stash is not removed.  In case something goes wrong when resolving
the conflicts, this allows you to start over.

Even though one of the actions is dedicated to interactive rebases,
the popup also features the infix argument @code{--interactive}.  This can be
used to turn one of the other, non-interactive rebase variants into an
interactive rebase.
 
 For example if you want to clean up a feature branch and at the same
 time rebase it onto @code{master}, then you could use @code{r-iu}.  But we recommend
@@ -5538,6 +6421,12 @@ Edit a single older commit using rebase.
 @item @kbd{r w} @tie{}@tie{}@tie{}@tie{}(@code{magit-rebase-reword-commit})
 
 Reword a single older commit using rebase.

@kindex r k
@cindex magit-rebase-remove-commit
@item @kbd{r k} @tie{}@tie{}@tie{}@tie{}(@code{magit-rebase-remove-commit})

Remove a single older commit using rebase.
 @end table
 
 When a rebase is in progress, then the popup buffer features these
@@ -5726,17 +6615,17 @@ Whether confirmation is required to cancel.
 @subsection Information About In-Progress Rebase
 
 While a rebase sequence is in progress, the status buffer features a
-section which lists the commits that have already been applied as well
section that lists the commits that have already been applied as well
 as the commits that still have to be applied.
 
 The commits are split in two halves.  When rebase stops at a commit,
-either because the user has to deal with a conflict or explicitly
-requested that rebase stops at that commit, then point is placed on
-the commit that separates the two groups, i.e. on @code{HEAD}.  The commits
-above it have not been applied yet, while it and the commits below it
-have already been applied.  In between these two groups of applied and
-yet-to-be applied commits, there sometimes is a commit which has been
-dropped.
either because the user has to deal with a conflict or because s/he
explicitly requested that rebase stops at that commit, then point is
placed on the commit that separates the two groups, i.e. on @code{HEAD}.  The
commits above it have not been applied yet, while the @code{HEAD} and the
commits below it have already been applied.  In between these two
groups of applied and yet-to-be applied commits, there sometimes is a
commit which has been dropped.
 
 Each commit is prefixed with a word and these words are additionally
 shown in different colors to indicate the status of the commits.
@@ -5760,7 +6649,7 @@ The blue commit is the @code{HEAD} commit.
 The green commit is the commit the rebase sequence stopped at.  If
 this is the same commit as @code{HEAD} (e.g. because you haven't done
 anything yet after rebase stopped at the commit, then this commit is
-shown in blue, not green.  There can only be a green and a blue
shown in blue, not green.  There can only be a green @strong{and} a blue
 commit at the same time, if you create one or more new commits after
 rebase stops at a commit.
 
@@ -5778,93 +6667,138 @@ The following words are used:
 @item
 Commits prefixed with @code{pick}, @code{reword}, @code{edit}, @code{squash}, and @code{fixup} have not
 been applied yet.  These words have the same meaning here as they do
-in the buffer used to edit the rebase sequence.  See @ref{Editing Rebase Sequences,Editing Rebase Sequences}.
in the buffer used to edit the rebase sequence.  See @ref{Editing Rebase Sequences}.


@item
Commits prefixed with @code{done} and @code{onto} have already been applied.
It is possible for such a commit to be the @code{HEAD}, in which case it
is blue.  Otherwise it is grey.

@itemize
@item
The commit prefixed with @code{onto} is the commit on top of which all
the other commits are being re-applied.  This commit itself did
not have to be re-applied, it is the commit rebase did rewind to
before starting to re-apply other commits.
 
 
 @item
-The commit prefixed with @code{onto} is the commit on top of which all the
-other commits are being re-applied.  Like the commits that have
-already been re-applied, it is reachable from @code{HEAD}, but unlike those
-it has not actually been re-applied during the current session - it
-wasn't touched at all.
Commits prefixed with @code{done} have already been re-applied.  This
includes commits that have been re-applied but also new commits
that you have created during the rebase.
@end itemize
 
 
 @item
-Commits prefixed with @code{done} have already been re-applied.  Not all
-commits that have already been applied are prefixed with this word,
-though.
All other commits, those not prefixed with any of the above words,
are in some way related to the commit at which rebase stopped.

To determine whether a commit is related to the stopped-at commit
their hashes, trees and patch-ids @footnote{The patch-id is a hash of the @emph{changes} introduced by a
commit.  It differs from the hash of the commit itself, which is a
hash of the result of applying that change (i.e. the resulting trees
and blobs) as well as author and committer information, the commit
message, and the hashes of the parents of the commit.  The patch-id
hash on the other hand is created only from the added and removed
lines, even line numbers and whitespace changes are ignored when
calculating this hash.  The patch-ids of two commits can be used to
answer the question "Do these commits make the same change?".} are being compared.
The commit message is not used for this purpose.

Generally speaking commits that are related to the stopped-at commit
can have any of the used colors, though not all color/word
combinations are possible.
 
Words used for stopped-at commits are:
 
@itemize
 @item
-When a commit is prefixed with @code{void}, then that indicates that Magit
-knows for sure that all the changes in that commit have been applied
-using several new commits.  This commit is no longer reachable from
-@code{HEAD}, and it also isn't one of the commits that will be applied when
-resuming the session.
When a commit is prefixed with @code{void}, then that indicates that
Magit knows for sure that all the changes in that commit have been
applied using several new commits.  This commit is no longer
reachable from @code{HEAD}, and it also isn't one of the commits that
will be applied when resuming the session.
 
 
 @item
 When a commit is prefixed with @code{join}, then that indicates that the
 rebase sequence stopped at that commit due to a conflict - you now
 have to join (merge) the changes with what has already been
-applied.  In a sense this is the commit rebase stopped at, but while
-its effect is already in the index and in the worktree (with
applied.  In a sense this is the commit rebase stopped at, but
while its effect is already in the index and in the worktree (with
 conflict markers), the commit itself has not actually been applied
 yet (it isn't the @code{HEAD}).  So it is shown in yellow, like the other
 commits that still have to be applied.
 
 
 @item
-When a commit is prefixed with @code{goal}, @code{same}, or @code{work}, then that
-indicates that you reset to an earlier commit (and that this commit
-therefore is no longer reachable from @code{HEAD}), but that it might still
-be possible to create a new commit with the exact same tree or at
-least the same patch-id @footnote{The patch-id is a hash of the @emph{changes} introduced by
-commit.  It differs from hash of the commit itself, which is a hash of
-the result of applying that change (i.e. the resulting trees and
-blobs) as well as author and committer information, the commit
-message, and the hashes of the parents of the commit.  The patch-id
-hash on the other hand is created only from the added and removed
-lines, even line numbers and whitespace are created when calculating
-the hash.  The patch-ids of two commits can be used to answer the
-question "Do these two commits make the same change?".}, without manually editing any
-file.  Or at the very least that there are some uncommitted
-remaining, which may or may not originate from that commit.
When a commit is prefixed with @code{stop} or a @emph{blue} or @emph{green} @code{same}, then
that indicates that rebase stopped at this commit, that it is
still applied or has been applied again, and that at least its
patch-id is unchanged.

@itemize
@item
When a commit is prefixed with @code{stop}, then that indicates that
rebase stopped at that commit because you requested that
earlier, and its patch-id is unchanged.  It might even still be
the exact same commit.


@item
When a commit is prefixed with a @emph{blue} or @emph{green} @code{same}, then that
indicates that while its tree or hash changed, its patch-id did
not.  If it is blue, then it is the @code{HEAD} commit (as always for
blue).  When it is green, then it no longer is @code{HEAD} because
other commit have been created since (but before continuing the
rebase).
@end itemize


@item
When a commit is prefixed with @code{goal}, a @emph{yellow} @code{same,} or @code{work}, then
that indicates that rebase applied that commit but that you then
reset @code{HEAD} to an earlier commit (likely to split it up into
multiple commits), and that there are some uncommitted changes
remaining which likely (but not necessarily) originate from that
commit.
 
 @itemize
 @item
 When a commit is prefixed with @code{goal}, then that indicates that it
-is still possible to create a commit with the exact same tree
-(the "goal") without manually editing a file, by simply committing
-the index (or, provided nothing is already staged, by staging all
-unstaged changes and then committing that).  This is the case when
-the original tree exists in the index or worktree in untainted
-form.
is still possible to create a new commit with the exact same
tree (the "goal") without manually editing any files, by
committing the index, or by staging all changes and then
committing that.  This is the case when the original tree still
exists in the index or worktree in untainted form.
 
 
 @item
-When a commit is prefixed with @code{same}, then that indicates that it
-is no longer possible to create a commit with the exact same tree,
-but that it is still possible to create a commit with the same
-patch-id.  This would be the case if you created a new commit with
-other changes, but the changes from the original commit still
-exist in the index and/or working tree in untainted form.
When a commit is prefixed with a yellow @code{same}, then that
indicates that it is no longer possible to create a commit with
the exact same tree, but that it is still possible to create a
commit with the same patch-id.  This would be the case if you
created a new commit with other changes, but the changes from
the original commit still exist in the index or working tree in
untainted form.
 
 
 @item
-When a commit is prefixed with @code{work}, then that indicates that you
-are working with the changes from that commit after resetting to
-an earlier commit.  There are changes in the index and/or working
-tree and some of them likely originate from that commit.
When a commit is prefixed with @code{work}, then that indicates that
you reset @code{HEAD} to an earlier commit, and that there are some
staged and/or unstaged changes (likely, but not necessarily)
originating from that commit.  However it is no longer possible
to create a new commit with the same tree or at least the same
patch-id because you have already made other changes.
 @end itemize
 
 
 @item
 When a commit is prefixed with @code{poof} or @code{gone}, then that indicates
-that you reset to an earlier commit (and that this commit therefore
-is no longer reachable from @code{HEAD}), and that there are no
-uncommitted changes remaining which might allow you to create a new
-commit with the same tree or at least the same patch-id.
that rebase applied that commit but that you then reset @code{HEAD} to an
earlier commit (likely to split it up into multiple commits), and
that there are no uncommitted changes.
 
 @itemize
 @item
@@ -5876,10 +6810,11 @@ effect.
 
 @item
 When a commit is prefixed with @code{gone}, then that indicates that it
-is no longer reachable from @code{HEAD} and that we also cannot determine
-whether its changes are still in effect in one or more new
-commits.  They might be, but if so, then there must also be other
-changes which makes it impossible to know for sure.
is no longer reachable from @code{HEAD} and that we also cannot
determine whether its changes are still in effect in one or more
new commits.  They might be, but if so, then there must also be
other changes which makes it impossible to know for sure.
@end itemize
 @end itemize
 @end itemize
 
@@ -5926,18 +6861,19 @@ features the following commands.
 @cindex magit-cherry-pick
 @item @kbd{A A} @tie{}@tie{}@tie{}@tie{}(@code{magit-cherry-pick})
 
-Cherry-pick a commit.  Prompt for a commit, defaulting to the commit
-at point.  If the region selects multiple commits, then pick all of
-them, without prompting.
This command copies COMMITS from another branch onto the current
branch.  If the region selects multiple commits, then those are
copied, without prompting.  Otherwise the user is prompted for a
commit or range, defaulting to the commit at point.
 
 @kindex A a
 @cindex magit-cherry-apply
 @item @kbd{A a} @tie{}@tie{}@tie{}@tie{}(@code{magit-cherry-apply})
 
-Apply the changes in a commit to the working tree, but do not commit
-them.  Prompt for a commit, defaulting to the commit at point.  If
-the region selects multiple commits, then apply all of them, without
-prompting.
This command applies the changes in COMMITS from another branch onto
the current branch.  If the region selects multiple commits, then
those are used, without prompting.  Otherwise the user is prompted
for a commit or range, defaulting to the commit at point.
 
 This command also has a top-level binding, which can be invoked without
 using the popup by typing @code{a} at the top-level.
@@ -6054,45 +6990,43 @@ Reset the head and index to some commit read from the user and
 defaulting to the commit at point.  The working tree is kept as-is.
 With a prefix argument also reset the working tree.
 
-@kindex M-x magit-reset-index
-@cindex magit-reset-index
-@item @kbd{M-x magit-reset-index} @tie{}@tie{}@tie{}@tie{}(@code{magit-reset-index})
-
-Reset the index to some commit read from the user and defaulting to
-the commit at point.  Keep the @code{HEAD} and working tree as-is, so if
-the commit refers to the @code{HEAD}, then this effectively unstages all
-changes.
-
-@kindex M-x magit-reset-head
@kindex X m
 @cindex magit-reset-head
-@item @kbd{M-x magit-reset-head} @tie{}@tie{}@tie{}@tie{}(@code{magit-reset-head})
@item @kbd{X m} @tie{}@tie{}@tie{}@tie{}(@code{magit-reset-head})
 
 Reset the @code{HEAD} and index to some commit read from the user and
 defaulting to the commit at point.  The working tree is kept as-is.
 
-@kindex M-x magit-reset-soft
@kindex X s
 @cindex magit-reset-soft
-@item @kbd{M-x magit-reset-soft} @tie{}@tie{}@tie{}@tie{}(@code{magit-reset-soft})
@item @kbd{X s} @tie{}@tie{}@tie{}@tie{}(@code{magit-reset-soft})
 
 Reset the @code{HEAD} to some commit read from the user and defaulting
 to the commit at point.  The index and the working tree are kept
 as-is.
 
-@kindex M-x magit-reset-hard
@kindex X h
 @cindex magit-reset-hard
-@item @kbd{M-x magit-reset-hard} @tie{}@tie{}@tie{}@tie{}(@code{magit-reset-hard})
@item @kbd{X h} @tie{}@tie{}@tie{}@tie{}(@code{magit-reset-hard})
 
 Reset the @code{HEAD}, index, and working tree to some commit read from the
 user and defaulting to the commit at point.
 
-@kindex M-x magit-file-checkout
@kindex X i
@cindex magit-reset-index
@item @kbd{X i} @tie{}@tie{}@tie{}@tie{}(@code{magit-reset-index})

Reset the index to some commit read from the user and defaulting to
the commit at point.  Keep the @code{HEAD} and working tree as-is, so if
the commit refers to the @code{HEAD}, then this effectively unstages all
changes.

@kindex X f
 @cindex magit-file-checkout
-@item @kbd{M-x magit-file-checkout} @tie{}@tie{}@tie{}@tie{}(@code{magit-file-checkout})
@item @kbd{X f} @tie{}@tie{}@tie{}@tie{}(@code{magit-file-checkout})
 
 Update file in the working tree and index to the contents from a
-revision.
-
-Both the revision and file are read from the user.
revision.  Both the revision and file are read from the user.
 @end table
 
 @node Stashing
@@ -6212,7 +7146,16 @@ Show all diffs of a stash in a buffer.
 @cindex magit-stash-branch
 @item @kbd{z b} @tie{}@tie{}@tie{}@tie{}(@code{magit-stash-branch})
 
-Create and checkout a new BRANCH from STASH.
Create and checkout a new BRANCH from STASH.  The branch starts at
the commit that was current when the stash was created.

@kindex z B
@cindex magit-stash-branch-here
@item @kbd{z B} @tie{}@tie{}@tie{}@tie{}(@code{magit-stash-branch-here})

Create and checkout a new BRANCH using @code{magit-branch} with the current
branch or @code{HEAD} as the starting-point.  Then apply STASH, dropping it
if it applies cleanly.
 
 @kindex z f
 @cindex magit-stash-format-patch
@@ -6280,6 +7223,19 @@ is shown, then this specifies how much space is used to do so.
 @node Remotes
 @section Remotes
 
@menu
* The Remote Popup::
* The Remote Config Popup::
@end menu

@node The Remote Popup
@subsection The Remote Popup

The popup @code{magit-remote-popup} is used to add remotes and to make
changes to existing remotes.  This popup only deals with remotes
themselves, not with branches or the transfer of commits.  Those
features are available from separate popups.

 Also see 
 @ifinfo
 @ref{git-remote,,,gitman,}.
@@ -6301,6 +7257,28 @@ the git-remote(1) manpage.
 This prefix command shows the following suffix commands along with
 the appropriate infix arguments in a popup buffer.
 
@end table

@defopt magit-remote-popup-show-variables

This option controls whether the @code{magit-remote-popup} shows remote
related Git variables.  When set to nil, no variables are displayed
directly in this popup, and the sub-popup @code{magit-remote-config-popup}
has to be used instead to view and change remote related variables.
@end defopt

@table @asis
@kindex M C
@cindex magit-remote-config-popup
@item @kbd{M C} @tie{}@tie{}@tie{}@tie{}(@code{magit-remote-config-popup})

This command shows remote related variables in a separate popup.  By
default this asks the user for which remote the variables should be
shown.  When @code{magit-remote-popup-show-variables} is @code{nil}, then it shows
the variables for the upstream of the current branch or "origin" it
that branch has no remote upstream.  To select another remote use a
prefix argument.

 @kindex M a
 @cindex magit-remote-add
 @item @kbd{M a} @tie{}@tie{}@tie{}@tie{}(@code{magit-remote-add})
@@ -6328,6 +7306,14 @@ read in the minibuffer.
 
 Delete a remote, read from the minibuffer.
 
@kindex M p
@cindex magit-remote-prune-refspecs
@item @kbd{M p} @tie{}@tie{}@tie{}@tie{}(@code{magit-remote-prune-refspecs})

Remove stale refspecs and tracking branches for REMOTE.  If there
are only stale refspecs, then offer to either delete the remote or
replace the refspecs with the default refspec instead.

 @end table
 
 @defopt magit-remote-add-set-remote.pushDefault
@@ -6341,11 +7327,62 @@ is a string, then set without asking, provided that the name of the added
 remote is equal to that string and the variable isn't already set.
 @end defopt
 
@node The Remote Config Popup
@subsection The Remote Config Popup

@cindex magit-remote-config-popup
@deffn Command magit-remote-config-popup

This prefix command shows the following remote-related Git variables
in a popup buffer.  The values can be changed from that buffer.

This popup is a sub-popup of the @code{magit-remote-popup} in which "C" is
bound to this popup.
@end deffn

The following variables are used to configure a specific remote.  The
values are being displayed for the upstream remote of the current
branch.  To change the value for another remote invoke
@code{magit-remote-config-popup} with a prefix argument.

@defvar remote.NAME.url

This variable specifies the url of the remote named NAME.  It can
have multiple values.
@end defvar

@defvar remote.NAME.fetch

The refspec used when fetching from the remote named NAME.  It can
have multiple values.
@end defvar

@defvar remote.NAME.pushurl

This variable specifies the url used for fetching from the remote
named NAME.  If it is not specified, then @code{remote.NAME.url} is used
instead.  It can have multiple values.
@end defvar

@defvar remote.NAME.push

The refspec used when pushing to the remote named NAME.  It can
have multiple values.
@end defvar

@defvar remote.NAME.tagOpts

This variable specifies what tags are fetched by default.  If the
value is @code{--no-tags} then no tags are fetched.  If the value is
@code{--tags}, then all tags are fetched.  If this variable has not value,
then only tags are fetched that are reachable from fetched branches.
@end defvar

 @node Fetching
 @section Fetching
 
 For information about the differences between the @emph{upstream} and the
-@emph{push-remote}, see @ref{Branching,Branching}.
@emph{push-remote}, see @ref{Branching}.
 
 Also see 
 @ifinfo
@@ -6422,7 +7459,7 @@ more information.
 @section Pulling
 
 For information about the differences between the @emph{upstream} and the
-@emph{push-remote}, see @ref{Branching,Branching}.
@emph{push-remote}, see @ref{Branching}.
 
 Also see 
 @ifinfo
@@ -6472,7 +7509,7 @@ more information.
 @section Pushing
 
 For information about the differences between the @emph{upstream} and the
-@emph{push-remote}, see @ref{Branching,Branching}.
@emph{push-remote}, see @ref{Branching}.
 
 Also see 
 @ifinfo
@@ -6514,7 +7551,7 @@ push-remote can be changed before pushed to it.
 Push the current branch to its upstream branch.
 
 When @code{magit-push-current-set-remote-if-missing} is non-nil and the
-push-remote is not configured, then read the upstram from the
push-remote is not configured, then read the upstream from the
 user, set it, and then push to it.  With a prefix argument the
 push-remote can be changed before pushed to it.
 
@@ -6645,6 +7682,9 @@ commit, defaulting to the commit at point.
 Request that upstream pulls from your public repository.
 @end table
 
It is also possible to save a plain patch file by using @code{C-x C-w} inside
a @code{magit-diff-mode} or @code{magit-revision-mode} buffer.

 @node Applying Patches
 @section Applying Patches
 
@@ -6659,6 +7699,18 @@ the <a href="http://git-scm.com/docs/git-am">git-am(1)</a> manpage.
 @end ifhtml
 @iftex
 the git-am(1) manpage.
@end iftex
 and 
@ifinfo
@ref{git-apply,,,gitman,}.
@end ifinfo
@ifhtml
@html
the <a href="http://git-scm.com/docs/git-apply">git-apply(1)</a> manpage.
@end html
@end ifhtml
@iftex
the git-apply(1) manpage.
 @end iftex
 
 @table @asis
@@ -6682,7 +7734,12 @@ defaulting to the file at point.
 @item @kbd{w m} @tie{}@tie{}@tie{}@tie{}(@code{magit-am-apply-maildir})
 
 Apply the patches from a maildir.
@end table
 
When an "am" operation is in progress, then the popup buffer features
these commands instead.

@table @asis
 @kindex w w
 @cindex magit-am-continue
 @item @kbd{w w} @tie{}@tie{}@tie{}@tie{}(@code{magit-am-continue})
@@ -6703,6 +7760,25 @@ Abort the current patch applying sequence.  This discards all
 changes made since the sequence started.
 @end table
 
In addition to the commands listed at the top, the "am" popup also has
a binding for the related "patch" popup.

@table @asis
@kindex w a
@cindex magit-patch-apply-popup
@item @kbd{w a} @tie{}@tie{}@tie{}@tie{}(@code{magit-patch-apply-popup})

This prefix command shows the following suffix commands along with
the appropriate infix arguments in a popup buffer.

@kindex w a a
@cindex magit-patch-apply
@item @kbd{w a a} @tie{}@tie{}@tie{}@tie{}(@code{magit-patch-apply})

This command applies a simple patch file, which may not contain any
Git metadata in addition to the actual diff.
@end table

 @node Miscellaneous
 @chapter Miscellaneous
 
@@ -6812,29 +7888,6 @@ By default use the value of Git variable @code{core.notesRef} or
 @item @kbd{T p} @tie{}@tie{}@tie{}@tie{}(@code{magit-notes-prune})
 
 Remove notes about unreachable commits.
-
-@kindex T s
-@cindex magit-notes-set-ref
-@item @kbd{T s} @tie{}@tie{}@tie{}@tie{}(@code{magit-notes-set-ref})
-
-Set the current notes ref to a the value read from the user.  The
-ref is made current by setting the value of the Git variable
-@code{core.notesRef}.  With a prefix argument change the global value
-instead of the value in the current repository.  When this is
-undefined, then "refs/notes/commit" is used.
-
-Other @code{magit-notes-*} commands, as well as the sub-commands of Git's
-@code{note} command, default to operate on that ref.
-
-@kindex T S
-@cindex magit-notes-set-display-refs
-@item @kbd{T S} @tie{}@tie{}@tie{}@tie{}(@code{magit-notes-set-display-refs})
-
-Set notes refs to be display in addition to "core.notesRef".  This
-reads a colon separated list of notes refs from the user.  The
-values are stored in the Git variable @code{notes.displayRef}.  With a
-prefix argument GLOBAL change the global values instead of the
-values in the current repository.
 @end table
 
 It is possible to merge one note ref into another.  That may result in
@@ -6869,6 +7922,24 @@ conflicts.
 Abort the current notes ref merge.
 @end table
 
The following variables control what notes reference @code{magit-notes-*},
@code{git notes} and @code{git show} act on and display.  Both the local and global
values are displayed and can be modified.

@defvar core.notesRef

This variable specifies the notes ref that is displayed by default
and which commands act on by default.
@end defvar

@defvar notes.displayRef

This variable specifies additional notes ref to be displayed in
addition to the ref specified by @code{core.notesRef}.  It can have
multiple values and may end with @code{*} to display all refs in the
@code{refs/notes/} namespace (or @code{**} if some names contain slashes).
@end defvar

 @node Submodules
 @section Submodules
 
@@ -6893,7 +7964,7 @@ the git-submodule(1) manpage.
 @node Listing Submodules
 @subsection Listing Submodules
 
-The command @code{magit-list-submodule} displays a list of the current
The command @code{magit-list-submodules} displays a list of the current
 repository's submodules in a separate buffer.  It's also possible to
 display information about submodules directly in the status buffer of
 the super-repository by adding @code{magit-insert-submodules} to the hook
@@ -6926,7 +7997,8 @@ that supports the keys @code{:right-align} and @code{:pad-right}.
 @defun magit-insert-submodules
 
 Insert sections for all submodules.  For each section insert the
-path, the branch, and the output of @code{git describe --tags}.
path, the branch, and the output of @code{git describe --tags},
or, failing that, the abbreviated HEAD commit hash.
 
 Press @code{RET} on such a submodule section to show its own status buffer.
 Press @code{RET} on the "Modules" section to display a list of submodules
@@ -6985,9 +8057,9 @@ Update each submodule's remote URL according to ".gitmodules".
 
 Fetch submodule.  With a prefix argument fetch all remotes.
 
-@kindex o i
-@cindex magit-submodule-init
-@item @kbd{o i} @tie{}@tie{}@tie{}@tie{}(@code{magit-submodule-init})
@kindex o d
@cindex magit-submodule-deinit
@item @kbd{o d} @tie{}@tie{}@tie{}@tie{}(@code{magit-submodule-deinit})
 
 Unregister the submodule at PATH.
 @end table
@@ -7088,7 +8160,7 @@ instead of the reference name.
 @cindex magit-copy-buffer-revision
 @item @kbd{C-w} @tie{}@tie{}@tie{}@tie{}(@code{magit-copy-buffer-revision})
 
-This command save the revision being displayed in the current buffer
This command saves the revision being displayed in the current buffer
 to the @code{kill-ring} and also pushes it to the @code{magit-revision-stack}.  It
 is mainly intended for use in @code{magit-revision-mode} buffers, the only
 buffers where it is always unambiguous exactly which revision should
@@ -7169,7 +8241,7 @@ commit does not change the fork-point of the working tree wip ref.  The
 fork-points are not adjusted until there actually is a change that
 should be committed to the respective wip ref.
 
-To view the log for the a branch and its wip refs use the commands
To view the log for a branch and its wip refs use the commands
 @code{magit-wip-log} and @code{magit-wip-log-current}.  You should use @code{--graph} when
 using these commands.  Alternatively you can use the reflog to show
 all commits that ever existed on a wip ref.  You can then recover lost
@@ -7200,7 +8272,7 @@ which might seem excessive, but allows fine tuning of when exactly
 changes are being committed to the wip refs.  Enabling all modes makes
 it less likely that a change slips through the cracks.
 
-Setting the below variable directly does not take effect; either
Setting the following variables directly does not take effect; either
 customize them or call the respective mode function.
 
 @defopt magit-wip-after-save-mode
@@ -7289,7 +8361,7 @@ few key bindings, but this might be extended in the future.
 
 Whether to establish certain Magit key bindings in all file-visiting
 buffers belonging to a Git repository.  This establishes the
-bindings suggested in @ref{Getting Started,Getting Started} (but only for file-visiting
bindings suggested in @ref{Getting Started} (but only for file-visiting
 buffers), and additionally binds @code{C-c M-g} to @code{magit-file-popup}.
 @end defopt
 
@@ -7318,7 +8390,7 @@ Unstage all changes to the file being visited in the current buffer.
 @item @kbd{C-c M-g c} @tie{}@tie{}@tie{}@tie{}(@code{magit-commit-popup})
 
 This prefix command shows suffix commands along with the appropriate
-infix arguments in a popup buffer.  See @ref{Initiating a Commit,Initiating a Commit}.
infix arguments in a popup buffer.  See @ref{Initiating a Commit}.
 
 @kindex C-c M-g D
 @cindex magit-diff-buffer-file-popup
@@ -7334,15 +8406,14 @@ is automatically used in the popup to limit the diff to that file.
 @item @kbd{C-c M-g d} @tie{}@tie{}@tie{}@tie{}(@code{magit-diff-buffer-file})
 
 This command shows the diff for the file of blob that the current
-buffer visits.  Renames are followed when a prefix argument is used
-or when @code{--follow} is part of @code{magit-diff-arguments}.
buffer visits.
 
 @end table
 
 @defopt magit-diff-buffer-file-locked
 
-This option controls whether @code{magit-diff-buffer-file} uses a decicated
-buffer.  See @ref{Modes and Buffers,Modes and Buffers}.
This option controls whether @code{magit-diff-buffer-file} uses a dedicated
buffer.  See @ref{Modes and Buffers}.
 @end defopt
 
 @table @asis
@@ -7361,14 +8432,15 @@ is automatically used in the popup to limit the log to that file.
 
 This command shows the log for the file of blob that the current
 buffer visits.  Renames are followed when a prefix argument is used
-or when @code{--follow} is part of @code{magit-log-arguments}.
or when @code{--follow} is part of @code{magit-log-arguments}.  When the
region is active, the log is restricted to the selected line range.
 
 @end table
 
 @defopt magit-log-buffer-file-locked
 
-This option controls whether @code{magit-log-buffer-file} uses a decicated
-buffer.  See @ref{Modes and Buffers,Modes and Buffers}.
This option controls whether @code{magit-log-buffer-file} uses a dedicated
buffer.  See @ref{Modes and Buffers}.
 @end defopt
 
 @table @asis
@@ -7377,7 +8449,7 @@ buffer.  See @ref{Modes and Buffers,Modes and Buffers}.
 @item @kbd{C-c M-g b} @tie{}@tie{}@tie{}@tie{}(@code{magit-blame-popup})
 
 This prefix command shows the @code{magit-blame} suffix command along with
-the appropriate infix arguments in a popup buffer.  See @ref{Initiating a Commit,Initiating a Commit}.
the appropriate infix arguments in a popup buffer.  See @ref{Initiating a Commit}.
 
 @kindex C-c M-g p
 @cindex magit-blob-previous
@@ -7444,7 +8516,7 @@ their value is not reflected in the respective popup buffers.  In
 this case the @code{--prune} argument in @code{magit-fetch-popup} might be active
 or inactive depending on the value of @code{magit-fetch-arguments} only,
 but that doesn't keep the Git variable from being honored by the
-suffix commands anyway.  So pruning might happen despite the the
suffix commands anyway.  So pruning might happen despite the
 @code{--prune} arguments being displayed in a way that seems to indicate
 that no pruning will happen.
 @end itemize
@@ -7553,12 +8625,12 @@ for @strong{uncommitted} changes in the working tree and not even the index
 uncommitted changes, it also makes it easy to shoot yourself in the
 foot in the process.  For that reason Magit provides three global
 modes that save @strong{tracked} files to work-in-progress references after or
-before certain actions.  See @ref{Wip Modes,Wip Modes}.
before certain actions.  See @ref{Wip Modes}.
 
 These modes are not enabled by default because of performance
 concerns.  Instead a lot of potentially destructive commands require
 confirmation every time they are used.  In many cases this can be
-disabled by adding a symbol to @code{magit-no-confirm} (see @ref{Completion and Confirmation,Completion and Confirmation}).  If you enable the various wip modes then you should
disabled by adding a symbol to @code{magit-no-confirm} (see @ref{Completion and Confirmation}).  If you enable the various wip modes then you should
 add @code{safe-with-wip} to this list.
 
 Similarly it isn't necessary to require confirmation before moving a
@@ -7570,7 +8642,7 @@ might want to change that.
 
 By default buffers visiting files are automatically reverted when the
 visited file changes on disk.  This isn't as risky as it might seem,
-but to make an informed decision you should see @ref{Risk of Reverting Automatically,Risk of Reverting Automatically}.
but to make an informed decision you should see @ref{Risk of Reverting Automatically}.
 
 @node Performance
 @subsection Performance
@@ -7590,7 +8662,7 @@ but also requires major refactoring.
 
 Meanwhile you can tell Magit to only automatically refresh the current
 Magit buffer, but not the status buffer.  If you do that, then the
-status buffer is only refreshed automatically if it itself is the
status buffer is only refreshed automatically if it is the
 current buffer.
 
 @lisp
@@ -7600,16 +8672,16 @@ current buffer.
 You should also check whether any third-party packages have added
 anything to @code{magit-refresh-buffer-hook}, @code{magit-status-refresh-hook},
 @code{magit-pre-refresh-hook}, and @code{magit-post-refresh-hook}.  If so, then
-check whether those additions impacts performance significantly.
check whether those additions impact performance significantly.
 Setting @code{magit-refresh-verbose} and then inspecting the output in the
 @code{*Messages*} buffer, should help doing so.
 
-Magit also reverts buffers which visit files located inside the
-current repository, when the visited file changes on disk.  That is
Magit also reverts buffers for visited files located inside the
current repository when the visited file changes on disk.  That is
 implemented on top of @code{auto-revert-mode} from the built-in library
 @code{autorevert}.  To figure out whether that impacts performance, check
 whether performance is significantly worse, when many buffers exist
-and/or when some buffers visit files using Tramp.  If so, then this
and/or when some buffers visit files using TRAMP.  If so, then this
 should help.
 
 @lisp
@@ -7617,7 +8689,7 @@ should help.
       'magit-auto-revert-repository-buffers-p)
 @end lisp
 
-For alternative approaches see @ref{Automatic Reverting of File-Visiting Buffers,Automatic Reverting of File-Visiting Buffers}.
For alternative approaches see @ref{Automatic Reverting of File-Visiting Buffers}.
 
 If you have enabled any features that are disabled by default, then
 you should check whether they impact performance significantly.  It's
@@ -7627,34 +8699,12 @@ they reduce performance at least in large repositories.
 If performance is only slow inside certain unusually large
 repositories, then you might want to disable certain features on a
 per-repository or per-repository-class basis only.  See
-@ref{Per-Repository Configuration,Per-Repository Configuration}.
-
-@unnumberedsubsubsec Microsoft Windows Performance
-
-In order to update the status buffer, @code{git} has to be run a few dozen
-times.  That is only problematic on Microsoft Windows, because that
-operating system is exceptionally slow at starting processes.  Sadly
-this is an issue that can only be fixed by Microsoft itself, and they
-don't appear to be particularly interested in doing so.
-
-Beside the subprocess issue, there also exist other Window-specific
-performance issues, some of which can be worked around.  The
-maintainers of "Git for Windows" try to reduce their effect, and in
-order to benefit from the latest performance tweaks, should always
-use the latest release.  Magit too tries to work around some
-Windows-specific issues.
-
-According to some sources setting the following Git variables can also
-help.
-
-@example
-git config --global core.preloadindex true   # default since v2.1
-git config --global core.fscache true        # default since v2.8
-git config --global gc.auto 256
-@end example
@ref{Per-Repository Configuration}.
 
-You should also check whether an anti-virus program is slowing things
-down.
@menu
* Microsoft Windows Performance::
* MacOS Performance::
@end menu
 
 @unnumberedsubsubsec Log Performance
 
@@ -7732,7 +8782,7 @@ using:
 
 Then you can type @code{C-c C-d} to show the diff when you actually want to
 see it, but only then.  Alternatively you can leave the hook alone and
-just type @code{C-g} in those cases when it takes to long to generate the
just type @code{C-g} in those cases when it takes too long to generate the
 diff.  If you do that, then you will end up with a broken diff buffer,
 but doing it this way has the advantage that you usually get to see
 the diff, which is useful because it increases the odds that you spot
@@ -7741,7 +8791,7 @@ potential issues.
 @unnumberedsubsubsec The Built-In VC Package
 
 Emacs comes with a version control interface called "VC", see
-@ref{Version Control,,,emacs,}.  It is enabled be default and if you don't
@ref{Version Control,,,emacs,}.  It is enabled be default, and if you don't
 use it in addition to Magit, then you should disable it to keep it
 from performing unnecessary work:
 
@@ -7749,13 +8799,64 @@ from performing unnecessary work:
 (setq vc-handled-backends nil)
 @end lisp
 
-You can also disable its use only for Git but keep using it when using
You can also disable its use for Git but keep using it when using
 another version control system:
 
 @lisp
 (setq vc-handled-backends (delq 'Git vc-handled-backends))
 @end lisp
 
@node Microsoft Windows Performance
@unnumberedsubsubsec Microsoft Windows Performance

In order to update the status buffer, @code{git} has to be run a few dozen
times.  That is problematic on Microsoft Windows, because that
operating system is exceptionally slow at starting processes.  Sadly
this is an issue that can only be fixed by Microsoft itself, and they
don't appear to be particularly interested in doing so.

Beside the subprocess issue, there are also other Windows-specific
performance issues. Some of these have workarounds.  The
maintainers of "Git for Windows" try to improve performance on Windows.
Always use the latest release in order to benefit from the latest
performance tweaks.  Magit too tries to work around some
Windows-specific issues.

According to some sources, setting the following Git variables can also
help.

@example
git config --global core.preloadindex true   # default since v2.1
git config --global core.fscache true        # default since v2.8
git config --global gc.auto 256
@end example

You should also check whether an anti-virus program is affecting
performance.

@node MacOS Performance
@unnumberedsubsubsec MacOS Performance

On macOS Emacs currently creates child processes using @code{fork}.  It
appears that this also copies GUI resources.  The result is that
forking takes about 30 times as long on Darwin than on Linux.  And
because Magit starts many @code{git} processes even when doing simple things,
that makes quite a difference.

On the @code{master} branch Emacs now uses @code{vfork} when possible, like this was
already done on Linux, and now child creation only takes about twice
as long on Darwin.  See @footnote{@uref{https://lists.gnu.org/archive/html/bug-gnu-emacs/2017-04/msg00201.html}} for more information.

Nobody knows when the changes on the @code{master} branch will be released as
@code{26.1}, but it is still a long way off.  You might want to get your
hands on this change before then.  The easiest way to get a patched
Emacs is to install the @code{emacs-plus} formula @footnote{@uref{https://github.com/d12frosted/homebrew-emacs-plus}} using @code{homebrew}.
The change has been backported, so you get it not only when using
@code{--HEAD}, but also when using @code{--devel} or when installing the latest
release (by not using a version argument).

Alternatively you can apply the backport @footnote{@uref{https://gist.githubusercontent.com/aaronjensen/f45894ddf431ecbff78b1bcf533d3e6b/raw/6a5cd7f57341aba673234348d8b0d2e776f86719/Emacs-25-OS-X-use-vfork.patch}} manually.

 @node Plumbing
 @chapter Plumbing
 
@@ -7768,7 +8869,7 @@ packages, without having to depend on Magit.  These libraries are
 described in separate manuals, see @ref{Top,,,with-editor,} and
 @ref{Top,,,magit-popup,}.
 
-If you are trying to find an unused key that you can bound to a
If you are trying to find an unused key that you can bind to a
 command provided by your own Magit extension, then checkout
 @uref{https://github.com/magit/magit/wiki/Plugin-Dispatch-Key-Registry}.
 
@@ -7788,15 +8889,15 @@ and have one of the prefixes @code{magit-run-}, @code{magit-call-}, @code{magit-
 or @code{magit-git-} (which is also used for other things).
 
 All of these functions accept an indefinite number of arguments, which
-are strings that specify command line arguments for git (or in some
are strings that specify command line arguments for Git (or in some
 cases an arbitrary executable).  These arguments are flattened before
 being passed on to the executable; so instead of strings they can also
 be lists of strings and arguments that are @code{nil} are silently dropped.
 Some of these functions also require a single mandatory argument
 before these command line arguments.
 
-Roughly speaking these functions run Git either to get some value or
-for side-effect.  The functions that return a value are useful to
Roughly speaking, these functions run Git either to get some value or
for side-effects.  The functions that return a value are useful to
 collect the information necessary to populate a Magit buffer, while
 the others are used to implement Magit commands.
 
@@ -7814,8 +8915,8 @@ trigger a refresh when the executable has finished.
 @node Getting a Value from Git
 @subsection Getting a Value from Git
 
-These functions run Git in order to get a value, either its exit
-status or its output.  Of course you could also use them to run Git
These functions run Git in order to get a value, an exit
status, or output.  Of course you could also use them to run Git
 commands that have side-effects, but that should be avoided.
 
 @defun magit-git-exit-code &rest args
@@ -7876,8 +8977,8 @@ add a section containing git's standard error in the current
 repository's process buffer.
 @end defun
 
-When an error occurs when using one of the above functions, then that
-is usually due to a bug, i.e. the use of an argument which is not
If an error occurs when using one of the above functions, then that
is usually due to a bug, i.e. using an argument which is not
 actually supported.  Such errors are usually not reported, but when
 they occur we need to be able to debug them.
 
@@ -7979,7 +9080,7 @@ Execute Git with ARGS, inserting washed output at point.  Actually
 first insert the raw output at point.  If there is no output call
 @code{magit-cancel-section}.  Otherwise temporarily narrow the buffer to
 the inserted text, move to its beginning, and then call function
-WASHER with no argument.
WASHER with ARGS as its sole argument.
 @end defun
 
 And now for the asynchronous variants.
@@ -8255,6 +9356,7 @@ their child sections.
 matches sections of TYPE regardless of the types of the parent
 sections.
 @end itemize

 Each TYPE is a symbol.  Note that it is not necessary to specify all
 TYPEs up to the root section as printed by @code{magit-describe-type},
 unless of course you want to be that precise.
@@ -8413,26 +9515,12 @@ of this variable and then calling this @code{magit-refresh-function}.
 @node Conventions
 @section Conventions
 
Also see @ref{Completion and Confirmation}.

 @menu
-* Confirmation and Completion::
 * Theming Faces::
 @end menu
 
-@node Confirmation and Completion
-@subsection Confirmation and Completion
-
-Dangerous operations that may lead to data loss have to be confirmed
-by default.  With a multi-section selection, this is done using
-questions that can be answered with "yes" or "no".  When the region isn't
-active, or if it doesn't constitute a valid section selection, then
-such commands instead read a single item in the minibuffer.  When the
-value of the current section is among the possible choices, then that
-is presented as default choice.  To confirm the action on a single
-item, the user has to answer @code{RET} (instead of "yes"), and to abort, @code{C-g}
-(instead of "no").  But alternatively the user may also select another
-item, just like if the command had been invoked with no suitable
-section at point at all.
-
 @node Theming Faces
 @subsection Theming Faces
 
@@ -8580,13 +9668,15 @@ frequently @strong{and recently} asked questions, i.e. questions that haven't
 made it into the manual yet, see
 @uref{https://github.com/magit/magit/wiki/FAQ}.
 
Please also use the @ref{Debugging Tools}.

 @menu
 * FAQ - How to @dots{}?::
 * FAQ - Issues and Errors::
 @end menu
 
 @node FAQ - How to @dots{}?
-@section FAQ - How to @dots{}?
@appendixsec FAQ - How to @dots{}?
 
 @menu
 * How to show git's output?::
@@ -8597,21 +9687,21 @@ made it into the manual yet, see
 @end menu
 
 @node How to show git's output?
-@subsection How to show git's output?
@appendixsubsec How to show git's output?
 
 To show the output of recently run git commands, press @code{$} (or, if that
 isn't available, @code{M-x magit-process-buffer}).  This will show a buffer
 containing a section per git invocation; as always press @code{TAB} to expand
 or collapse them.
 
-By default git's output is only inserted into the process buffer if it
-is run for side-effects.  When the output is consumed in some way then
-also inserting it into the process buffer would be to expensive.  For
-debugging purposes it's possible to do so anyway by setting
By default, git's output is only inserted into the process buffer if it
is run for side-effects.  When the output is consumed in some way,
also inserting it into the process buffer would be too expensive.  For
debugging purposes, it's possible to do so anyway by setting
 @code{magit-git-debug} to @code{t}.
 
 @node How to install the gitman info manual?
-@subsection How to install the gitman info manual?
@appendixsubsec How to install the gitman info manual?
 
 Git's manpages can be exported as an info manual called @code{gitman}.
 Magit's own info manual links to nodes in that manual instead of the
@@ -8631,7 +9721,7 @@ one of the supported packages @code{man} or @code{woman}, e.g.:
 @end lisp
 
 @node How to show diffs for gpg-encrypted files?
-@subsection How to show diffs for gpg-encrypted files?
@appendixsubsec How to show diffs for gpg-encrypted files?
 
 Git supports showing diffs for encrypted files, but has to be told to
 do so.  Since Magit just uses Git to get the diffs, configuring Git
@@ -8643,12 +9733,12 @@ echo "*.gpg filter=gpg diff=gpg" > .gitattributes
 @end example
 
 @node How does branching and pushing work?
-@subsection How does branching and pushing work?
@appendixsubsec How does branching and pushing work?
 
-Please see @ref{Branching,Branching} and @uref{http://emacsair.me/2016/01/18/magit-2.4}
Please see @ref{Branching} and @uref{http://emacsair.me/2016/01/18/magit-2.4}
 
 @node Can Magit be used as @code{ediff-version-control-package}?
-@subsection Can Magit be used as @code{ediff-version-control-package}?
@appendixsubsec Can Magit be used as @code{ediff-version-control-package}?
 
 No, it cannot.  For that to work the functions @code{ediff-magit-internal}
 and @code{ediff-magit-merge-internal} would have to be implemented, and they
@@ -8659,7 +9749,7 @@ are not.  These two functions are only used by the three commands
 These commands only delegate the task of populating buffers with
 certain revisions to the "internal" functions.  The equally important
 task of determining which revisions are to be compared/merged is not
-delegated.  Instead this is done without any support whatsoever, from
delegated.  Instead this is done without any support whatsoever from
 the version control package/system - meaning that the user has to
 enter the revisions explicitly.  Instead of implementing
 @code{ediff-magit-internal} we provide @code{magit-ediff-compare}, which handles
@@ -8681,7 +9771,7 @@ command @code{magit-ediff-resolve} which only shows yet-to-be resolved
 conflicts.
 
 @node FAQ - Issues and Errors
-@section FAQ - Issues and Errors
@appendixsec FAQ - Issues and Errors
 
 @menu
 * Magit is slow::
@@ -8694,15 +9784,16 @@ conflicts.
 * Point is wrong in the @code{COMMIT_EDITMSG} buffer::
 * The mode-line information isn't always up-to-date::
 * Emacs 24.5 hangs when loading Magit: Emacs 245 hangs when loading Magit. 
* A branch and tag sharing the same name breaks SOMETHING::
 @end menu
 
 @node Magit is slow
-@subsection Magit is slow
@appendixsubsec Magit is slow
 
-See @ref{Performance,Performance}.
See @ref{Performance}.
 
 @node I changed several thousand files at once and now Magit is unusable
-@subsection I changed several thousand files at once and now Magit is unusable
@appendixsubsec I changed several thousand files at once and now Magit is unusable
 
 Magit is @strong{currently} not expected to work under such conditions. It sure
 would be nice if it did, and v2.5 will hopefully be a big step into
@@ -8710,17 +9801,17 @@ that direction.  But it might take until v3.1 to accomplish fully
 satisfactory performance, because that requires some heavy refactoring.
 
 But for now we recommend you use the command line to complete this one
-commit.  Also see @ref{Performance,Performance}.
commit.  Also see @ref{Performance}.
 
 @node I am having problems committing
-@subsection I am having problems committing
@appendixsubsec I am having problems committing
 
 That likely means that Magit is having problems finding an appropriate
 emacsclient executable.  See @ref{Configuring With-Editor,,,with-editor,}
 and @ref{Debugging,,,with-editor,}.
 
 @node I am using MS Windows and cannot push with Magit
-@subsection I am using MS Windows and cannot push with Magit
@appendixsubsec I am using MS Windows and cannot push with Magit
 
 It's almost certain that Magit is only incidental to this issue.  It
 is much more likely that this is a configuration issue, even if you
@@ -8730,7 +9821,7 @@ Detailed setup instructions can be found at
 @uref{https://github.com/magit/magit/wiki/Pushing-with-Magit-from-Windows}.
 
 @node I am using OS X and SOMETHING works in shell but not in Magit
-@subsection I am using OS X and SOMETHING works in shell, but not in Magit
@appendixsubsec I am using OS X and SOMETHING works in shell, but not in Magit
 
 This usually occurs because Emacs doesn't have the same environment
 variables as your shell.  Try installing and configuring
@@ -8742,7 +9833,7 @@ If SOMETHING is "passphrase caching with gpg-agent for commit and/or
 tag signing", then you'll also need to synchronize @code{$GPG_AGENT_INFO}.
 
 @node Diffs contain control sequences
-@subsection Diffs contain control sequences
@appendixsubsec Diffs contain control sequences
 
 This happens when you configure Git to always color diffs and/or all
 of its output.  The valid values for relevant Git variables @code{color.ui}
@@ -8763,7 +9854,7 @@ then you can override these settings just for Magit by using:
 @end lisp
 
 @node Expanding a file to show the diff causes it to disappear
-@subsection Expanding a file to show the diff causes it to disappear
@appendixsubsec Expanding a file to show the diff causes it to disappear
 
 This is probably caused by a change of a @code{diff.*} Git variable.  You
 probably set that variable for a reason, and should therefore
@@ -8771,7 +9862,7 @@ only undo that setting in Magit by customizing
 @code{magit-git-global-arguments}.
 
 @node Point is wrong in the @code{COMMIT_EDITMSG} buffer
-@subsection Point is wrong in the @code{COMMIT_EDITMSG} buffer
@appendixsubsec Point is wrong in the @code{COMMIT_EDITMSG} buffer
 
 Neither Magit nor `git-commit` fiddle with point in the buffer used to
 write commit messages, so something else must be doing it.
@@ -8794,7 +9885,7 @@ help:
 @end lisp
 
 @node The mode-line information isn't always up-to-date
-@subsection The mode-line information isn't always up-to-date
@appendixsubsec The mode-line information isn't always up-to-date
 
 Magit is not responsible for the version control information that is
 being displayed in the mode-line and looks something like @code{Git-master}.
@@ -8823,7 +9914,7 @@ Or to disable it completely:
 @end lisp
 
 @node Emacs 245 hangs when loading Magit
-@subsection Emacs 24.5 hangs when loading Magit
@appendixsubsec Emacs 24.5 hangs when loading Magit
 
 This is actually triggered by loading Tramp.  See
 @uref{https://debbugs.gnu.org/cgi/bugreport.cgi?bug=20015} for details. You
@@ -8831,6 +9922,73 @@ can work around the problem by setting
 @code{tramp-ssh-controlmaster-options}. Changing your DNS server (e.g. to
 Google's @code{8.8.8.8}) may also be sufficient to work around the issue.
 
@node A branch and tag sharing the same name breaks SOMETHING
@appendixsubsec A branch and tag sharing the same name breaks SOMETHING

Or more generally, ambiguous refnames break SOMETHING.

Magit assumes that refs are named non-ambiguously across the
"refs/heads/", "refs/tags/", and "refs/remotes/" namespaces (i.e., all
the names remain unique when those prefixes are stripped).  We
consider ambiguous refnames unsupported and recommend that you use a
non-ambiguous naming scheme.  However, if you do work with a
repository that has ambiguous refnames, please report any issues you
encounter so that we can investigate whether there is a simple fix.

@node Debugging Tools
@chapter Debugging Tools

Magit and its dependencies provide a few debugging tools, and we
appreciate it very much if you use those tools before reporting an
issue.  Please include all relevant output when reporting an
issue.

@table @asis
@kindex M-x magit-version
@cindex magit-version
@item @kbd{M-x magit-version} @tie{}@tie{}@tie{}@tie{}(@code{magit-version})

This command shows the currently used versions of Magit, Git, and
Emacs in the echo area.  Non-interactively this just returns the
Magit version.

@kindex M-x magit-emacs-Q-command
@cindex magit-emacs-Q-command
@item @kbd{M-x magit-emacs-Q-command} @tie{}@tie{}@tie{}@tie{}(@code{magit-emacs-Q-command})

This command shows a debugging shell command in the echo area and
adds it to the kill ring.  Paste that command into a shell an run
it.

This shell command starts @code{emacs} with only @code{magit} and its
dependencies loaded.  Neither your configuration nor other installed
packages are loaded.  This makes it easier to determine whether some
issue lays with Magit or something else.

@kindex M-x magit-debug-git-executable
@cindex magit-debug-git-executable
@item @kbd{M-x magit-debug-git-executable} @tie{}@tie{}@tie{}@tie{}(@code{magit-debug-git-executable})

This command displays a buffer containing information about the
available and used @code{git} executable(s), and can be useful when
investigating @code{exec-path} issues.

Also see @ref{Git Executable}.

@kindex M-x with-editor-debug
@cindex with-editor-debug
@item @kbd{M-x with-editor-debug} @tie{}@tie{}@tie{}@tie{}(@code{with-editor-debug})

This command displays a buffer containing information about the
available and used @code{git} executable(s), and can be useful when
investigating why Magit (or rather @code{with-editor}) cannot find an
appropriate @code{emacsclient} executable.

Also see @ref{Debugging,,,with-editor,}.
@end table

Please also see the @ref{FAQ}.

 @node Keystroke Index
 @appendix Keystroke Index
 
