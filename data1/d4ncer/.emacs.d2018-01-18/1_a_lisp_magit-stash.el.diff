diff --git a/lisp/magit-stash.el b/lisp/magit-stash.el
index ca59bc19..56f5d593 100644
--- a/lisp/magit-stash.el
++ b/lisp/magit-stash.el
@@ -1,6 +1,6 @@
 ;;; magit-stash.el --- stash support for Magit  -*- lexical-binding: t -*-
 
-;; Copyright (C) 2008-2017  The Magit Project Contributors
;; Copyright (C) 2008-2018  The Magit Project Contributors
 ;;
 ;; You should have received a copy of the AUTHORS.md file which
 ;; lists all contributors.  If not, see http://magit.vc/authors.
@@ -29,6 +29,8 @@
 
 (require 'magit)
 
(defvar bookmark-make-record-function)

 ;;; Options
 
 (defgroup magit-stash nil
@@ -38,7 +40,8 @@
 ;;;; Diff options
 
 (defcustom magit-stash-sections-hook
-  '(magit-insert-stash-worktree
  '(magit-insert-stash-notes
    magit-insert-stash-worktree
     magit-insert-stash-index
     magit-insert-stash-untracked)
   "Hook run to insert sections into stash diff buffers."
@@ -98,6 +101,7 @@ AUTHOR-WIDTH has to be an integer.  When the name of the author
               (?v "Show"               magit-stash-show)
               (?b "Branch"             magit-stash-branch)
               (?k "Drop"               magit-stash-drop) nil
              (?B "Branch here"        magit-stash-branch-here) nil nil
               (?f "Format patch"       magit-stash-format-patch))
   :default-action 'magit-stash
   :max-action-columns 3)
@@ -194,7 +198,7 @@ while two prefix arguments are equivalent to `--all'."
   "Apply a stash to the working tree.
 Try to preserve the stash index.  If that fails because there
 are staged changes, apply without preserving the stash index."
-  (interactive (list (magit-read-stash "Apply stash" t)))
  (interactive (list (magit-read-stash "Apply stash")))
   (if (= (magit-call-git "stash" "apply" "--index" stash) 0)
       (magit-refresh)
     (magit-run-git "stash" "apply" stash)))
@@ -204,7 +208,7 @@ are staged changes, apply without preserving the stash index."
 Try to preserve the stash index.  If that fails because there
 are staged changes, apply without preserving the stash index
 and forgo removing the stash."
-  (interactive (list (magit-read-stash "Apply pop" t)))
  (interactive (list (magit-read-stash "Pop stash")))
   (if (= (magit-call-git "stash" "apply" "--index" stash) 0)
       (magit-stash-drop stash)
     (magit-run-git "stash" "apply" stash)))
@@ -213,10 +217,11 @@ and forgo removing the stash."
 (defun magit-stash-drop (stash)
   "Remove a stash from the stash list.
 When the region is active offer to drop all contained stashes."
-  (interactive (list (--if-let (magit-region-values 'stash)
-                         (or (magit-confirm t nil "Drop %i stashes" it)
-                             (user-error "Abort"))
-                       (magit-read-stash "Drop stash"))))
  (interactive
   (list (--if-let (magit-region-values 'stash)
             (or (magit-confirm t "Drop %s" "Drop %i stashes" it)
                 (user-error "Abort"))
           (magit-read-stash "Drop stash"))))
   (dolist (stash (if (listp stash)
                      (nreverse (prog1 stash (setq stash (car stash))))
                    (list stash)))
@@ -245,14 +250,25 @@ When the region is active offer to drop all contained stashes."
 ;;;###autoload
 (defun magit-stash-branch (stash branch)
   "Create and checkout a new BRANCH from STASH."
-  (interactive (list (magit-read-stash "Branch stash" t)
  (interactive (list (magit-read-stash "Branch stash")
                      (magit-read-string-ns "Branch name")))
   (magit-run-git "stash" "branch" branch stash))
 
;;;###autoload
(defun magit-stash-branch-here (stash branch)
  "Create and checkout a new BRANCH and apply STASH.
The branch is created using `magit-branch', using the current
branch or `HEAD' as the string-point."
  (interactive (list (magit-read-stash "Branch stash")
                     (magit-read-string-ns "Branch name")))
  (let ((inhibit-magit-refresh t))
    (magit-branch branch (or (magit-get-current-branch) "HEAD")))
  (magit-stash-apply stash))

 ;;;###autoload
 (defun magit-stash-format-patch (stash)
   "Create a patch from STASH"
-  (interactive (list (magit-read-stash "Create patch from stash" t)))
  (interactive (list (magit-read-stash "Create patch from stash")))
   (with-temp-file (magit-rev-format "0001-%f.patch" stash)
     (magit-git-insert "stash" "show" "-p" stash))
   (magit-refresh))
@@ -262,7 +278,7 @@ When the region is active offer to drop all contained stashes."
 (defun magit-stash-save (message index worktree untracked
                                  &optional refresh keep noerror ref)
   (if (or (and index     (magit-staged-files t))
-          (and worktree  (magit-modified-files t))
          (and worktree  (magit-unstaged-files t))
           (and untracked (magit-untracked-files (eq untracked 'all))))
       (magit-with-toplevel
         (magit-stash-store message (or ref "refs/stash")
@@ -299,7 +315,8 @@ When the region is active offer to drop all contained stashes."
         (summary (magit-stash-summary))
         (head "HEAD"))
     (when (and worktree (not index))
-      (setq head (magit-commit-tree "pre-stash index" nil "HEAD")))
      (setq head (or (magit-commit-tree "pre-stash index" nil "HEAD")
                     (error "Cannot save the current index state"))))
     (or (setq index (magit-commit-tree (concat "index on " summary) nil head))
         (error "Cannot save the current index state"))
     (and untracked
@@ -343,14 +360,40 @@ When the region is active offer to drop all contained stashes."
 (cl-defun magit-insert-stashes (&optional (ref   "refs/stash")
                                           (heading "Stashes:"))
   "Insert `stashes' section showing reflog for \"refs/stash\".
-If optional REF is non-nil show reflog for that instead.
-If optional HEADING is non-nil use that as section heading
If optional REF is non-nil, show reflog for that instead.
If optional HEADING is non-nil, use that as section heading
 instead of \"Stashes:\"."
-  (when (magit-rev-verify ref)
-    (magit-insert-section (stashes ref (not magit-status-expand-stashes))
-      (magit-insert-heading heading)
-      (magit-git-wash (apply-partially 'magit-log-wash-log 'stash)
-        "reflog" "--format=%gd%x00%aN%x00%at%x00%gs" ref))))
  (let ((verified (magit-rev-verify ref))
        (autostash
         (and (magit-rebase-in-progress-p)
              (magit-file-line
               (magit-git-dir
                (-> (if (file-directory-p (magit-git-dir "rebase-merge"))
                        "rebase-merge/autostash"
                      "rebase-apply/autostash")))))))
    (when (or autostash verified)
      (magit-insert-section (stashes ref (not magit-status-expand-stashes))
        (magit-insert-heading heading)
        (when autostash
          (pcase-let ((`(,author ,date ,msg)
                       (split-string
                        (car (magit-git-lines
                              "show" "-q" "--format=%aN%x00%at%x00%s"
                              autostash))
                        "\0")))
            (magit-insert-section (stash autostash)
              (insert (propertize "AUTOSTASH" 'face 'magit-hash))
              (insert " " msg "\n")
              (save-excursion
                (backward-char)
                (magit-log-format-margin author date)))))
        (if verified
            (magit-git-wash (apply-partially 'magit-log-wash-log 'stash)
              "reflog" "--format=%gd%x00%aN%x00%at%x00%gs" ref)
          (insert ?\n)
          (save-excursion
            (backward-char)
            (magit-make-margin-overlay)))))))
 
 ;;; List Stashes
 
@@ -363,7 +406,9 @@ instead of \"Stashes:\"."
 (define-derived-mode magit-stashes-mode magit-reflog-mode "Magit Stashes"
   "Mode for looking at lists of stashes."
   :group 'magit-log
-  (hack-dir-local-variables-non-file-buffer))
  (hack-dir-local-variables-non-file-buffer)
  (setq-local bookmark-make-record-function
              #'magit-bookmark--stashes-make-record))
 
 (cl-defun magit-stashes-refresh-buffer (ref)
   (magit-insert-section (stashesbuf)
@@ -388,13 +433,15 @@ instead of \"Stashes:\"."
 (define-derived-mode magit-stash-mode magit-diff-mode "Magit Stash"
   "Mode for looking at individual stashes."
   :group 'magit-diff
-  (hack-dir-local-variables-non-file-buffer))
  (hack-dir-local-variables-non-file-buffer)
  (setq-local bookmark-make-record-function
              #'magit-bookmark--stash-make-record))
 
 (defun magit-stash-refresh-buffer (stash _const _args _files)
-  (setq header-line-format
-        (concat
-         "\s" (propertize (capitalize stash) 'face 'magit-section-heading)
-         "\s" (magit-rev-format "%s" stash)))
  (magit-set-header-line-format
   (concat (propertize (capitalize stash) 'face 'magit-section-heading)
           " "
           (magit-rev-format "%s" stash)))
   (setq magit-buffer-revision-hash (magit-rev-parse stash))
   (magit-insert-section (stash)
     (run-hooks 'magit-stash-sections-hook)))
@@ -407,6 +454,18 @@ instead of \"Stashes:\"."
       (nth 2 magit-refresh-args)
       "--" (or files (nth 3 magit-refresh-args)))))
 
(defun magit-insert-stash-notes ()
  "Insert section showing notes for a stash.
This shows the notes for stash@{N} but not for the other commits
that make up the stash."
  (magit-insert-section section (note)
    (magit-insert-heading "Notes")
    (magit-git-insert "notes" "show" (car magit-refresh-args))
    (if (= (point)
           (oref section content))
        (magit-cancel-section)
      (insert "\n"))))

 (defun magit-insert-stash-index ()
   "Insert section showing staged changes of the stash."
   (let ((stash (car magit-refresh-args)))
