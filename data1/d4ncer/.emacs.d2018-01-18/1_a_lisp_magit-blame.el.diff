diff --git a/lisp/magit-blame.el b/lisp/magit-blame.el
index b5024ad7..7079f3eb 100644
--- a/lisp/magit-blame.el
++ b/lisp/magit-blame.el
@@ -1,6 +1,6 @@
 ;;; magit-blame.el --- blame support for Magit  -*- lexical-binding: t -*-
 
-;; Copyright (C) 2012-2017  The Magit Project Contributors
;; Copyright (C) 2012-2018  The Magit Project Contributors
 ;;
 ;; You should have received a copy of the AUTHORS.md file which
 ;; lists all contributors.  If not, see http://magit.vc/authors.
@@ -73,8 +73,6 @@ and then turned on again when turning off the latter."
   :group 'magit-blame
   :type '(repeat (symbol :tag "Mode")))
 
-(make-variable-buffer-local 'magit-blame-disabled-modes)
-
 (defcustom magit-blame-mode-lighter " Blame"
   "The mode-line lighter of the Magit-Blame mode."
   :group 'magit-blame
@@ -127,14 +125,19 @@ and then turned on again when turning off the latter."
            (define-key map (kbd   "i") 'magit-blame-previous-chunk)
            (define-key map (kbd   "I") 'magit-blame-previous-chunk-same-commit)
            (define-key map (kbd   "k") 'magit-blame-next-chunk)
-           (define-key map (kbd   "K") 'magit-blame-next-chunk-same-commit))
           (define-key map (kbd   "K") 'magit-blame-next-chunk-same-commit)
           (define-key map (kbd   "j") 'magit-blame)
           (define-key map (kbd   "l") 'magit-blame-reverse)
           (define-key map (kbd   "b") 'magit-blame-popup))
           (t
            (define-key map (kbd "C-m") 'magit-show-commit)
            (define-key map (kbd   "p") 'magit-blame-previous-chunk)
            (define-key map (kbd   "P") 'magit-blame-previous-chunk-same-commit)
            (define-key map (kbd   "n") 'magit-blame-next-chunk)
-           (define-key map (kbd   "N") 'magit-blame-next-chunk-same-commit)))
-    (define-key map (kbd   "b") 'magit-blame-popup)
           (define-key map (kbd   "N") 'magit-blame-next-chunk-same-commit)
           (define-key map (kbd   "b") 'magit-blame)
           (define-key map (kbd   "f") 'magit-blame-reverse)
           (define-key map (kbd   "B") 'magit-blame-popup)))
     (define-key map (kbd   "t") 'magit-blame-toggle-headings)
     (define-key map (kbd   "q") 'magit-blame-quit)
     (define-key map (kbd "M-w") 'magit-blame-copy-hash)
@@ -155,8 +158,10 @@ and then turned on again when turning off the latter."
 
 (defvar-local magit-blame-buffer-read-only nil)
 (defvar-local magit-blame-cache nil)
(defvar-local magit-blame-disabled-modes nil)
 (defvar-local magit-blame-process nil)
 (defvar-local magit-blame-recursive-p nil)
(defvar-local magit-blame-reverse-p nil)
 (defvar-local magit-blame-separator nil)
 
 (define-minor-mode magit-blame-mode
@@ -207,15 +212,47 @@ and then turned on again when turning off the latter."
               (?r "Do not treat root commits as boundaries" "--root"))
   :options  '((?M "Detect lines moved or copied within a file" "-M")
               (?C "Detect lines moved or copied between files" "-C"))
-  :actions  '((?b "Blame" magit-blame))
  :actions  '((?b "Show blob touching these lines" magit-blame)
              (?r (lambda ()
                    (with-current-buffer magit-pre-popup-buffer
                      (and (not buffer-file-name)
                           (propertize "Show last blob with these lines"
                                       'face 'default))))
                  magit-blame-reverse))
   :default-arguments '("-w")
  :max-action-columns 1
   :default-action 'magit-blame)
 
 ;;; Process
 
(defun magit-blame-arguments* (reverse)
  (let ((args (magit-blame-arguments)))
    (when (and reverse buffer-file-name)
      (user-error "Only blob buffers can be blamed in reverse"))
    (if (and magit-blame-mode
             (or (and reverse magit-blame-reverse-p)
                 (and (not reverse)
                      (not magit-blame-reverse-p))))
        (--if-let (magit-blame-chunk-get :previous-hash)
            (list it (magit-blame-chunk-get :previous-file)
                  args (magit-blame-chunk-get :previous-start))
          (user-error "Block has no further history"))
      (--if-let (magit-file-relative-name nil (not magit-buffer-file-name))
          (list (or magit-buffer-refname magit-buffer-revision) it args)
        (if buffer-file-name
            (user-error "Buffer isn't visiting a tracked file")
          (user-error "Buffer isn't visiting a file"))))))

;;;###autoload
(defun magit-blame-reverse (revision file &optional args line)
  "For each line show the last revision in which a line still existed.
\n(fn REVISION FILE &optional ARGS)" ; LINE is for internal use
  (interactive (magit-blame-arguments* t))
  (magit-blame revision file (cons "--reverse" args) line))

 ;;;###autoload
 (defun magit-blame (revision file &optional args line)
-  "Display edit history of FILE up to REVISION.
  "For each line show the revision that last touched it.
 
 Interactively blame the file being visited in the current buffer.
 If the buffer visits a revision of that file, then blame up to
@@ -230,18 +267,7 @@ point.
 ARGS is a list of additional arguments to pass to `git blame';
 only arguments available from `magit-blame-popup' should be used.
 \n(fn REVISION FILE &optional ARGS)" ; LINE is for internal use
-  (interactive
-   (let ((args (magit-blame-arguments)))
-     (if magit-blame-mode
-         (--if-let (magit-blame-chunk-get :previous-hash)
-             (list it (magit-blame-chunk-get :previous-file)
-                   args (magit-blame-chunk-get :previous-start))
-           (user-error "Block has no further history"))
-       (--if-let (magit-file-relative-name nil (not magit-buffer-file-name))
-           (list (or magit-buffer-refname magit-buffer-revision) it args)
-         (if buffer-file-name
-             (user-error "Buffer isn't visiting a tracked file")
-           (user-error "Buffer isn't visiting a file"))))))
  (interactive (magit-blame-arguments* nil))
   (let ((toplevel (or (magit-toplevel)
                       (user-error "Not in git repository"))))
     (let ((default-directory toplevel))
@@ -251,13 +277,17 @@ only arguments available from `magit-blame-popup' should be used.
             (progn (switch-to-buffer it)
                    (save-buffer))
           (find-file file))))
-    (let ((default-directory toplevel))
    (let ((default-directory toplevel)
          (reverse (and (member "--reverse" args) t)))
       (widen)
       (when line
         (setq magit-blame-recursive-p t)
         (goto-char (point-min))
         (forward-line (1- line)))
-      (unless magit-blame-mode
      (when (or (not magit-blame-mode)
                (and reverse  (not magit-blame-reverse-p))
                (and (not reverse) magit-blame-reverse-p))
        (setq magit-blame-reverse-p reverse)
         (setq magit-blame-cache (make-hash-table :test 'equal))
         (let ((show-headings magit-blame-show-headings))
           (magit-blame-mode 1)
@@ -437,6 +467,7 @@ This is intended for debugging purposes.")
 If the buffer was created during a recursive blame,
 then also kill the buffer."
   (interactive)
  (kill-local-variable 'magit-blame-reverse-p)
   (if magit-blame-recursive-p
       (kill-buffer)
     (magit-blame-mode -1)))
@@ -503,8 +534,8 @@ then also kill the buffer."
 (defun magit-blame-copy-hash ()
   "Save hash of the current chunk's commit to the kill ring.
 
-When the region is active, then save that to the `kill-ring',
-like `kill-ring-save' would."
When the region is active, then save the region's content
instead of the hash, like `kill-ring-save' would."
   (interactive)
   (if (use-region-p)
       (copy-region-as-kill nil nil 'region)
